
NTI_AVR_LAB10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003070  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00003070  000030e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000038a0  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001407  00000000  00000000  00006ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00007ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  0000804b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  0000821e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000a22d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  0000b39d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000c3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000c801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d0af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <main>
      7a:	0c 94 36 18 	jmp	0x306c	; 0x306c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 27 18 	jmp	0x304e	; 0x304e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 18 	jmp	0x300e	; 0x300e <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <GIE_ES_tInit>:

/*Initialization GIE Module*/

ES_t GIE_ES_tInit(void)

{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     cd0:	19 82       	std	Y+1, r1	; 0x01
	//SREG &=~(1<<7);
    asm("CLI");
     cd2:	f8 94       	cli
	return LOC_ES_tErrorState = ES_OK;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <GIE_ES_tEnable>:

/*Disable GIE */

ES_t GIE_ES_tEnable(void)

{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     cec:	19 82       	std	Y+1, r1	; 0x01
	//SREG |=(1<<7) ;
    asm("SEI");
     cee:	78 94       	sei

	return 	LOC_ES_tErrorState = ES_OK;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <GIE_ES_tDisable>:


/*Enable GIE*/

ES_t GIE_ES_tDisable(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62

	       ES_t LOC_ES_tErrorState = ES_NOK;
     d08:	19 82       	std	Y+1, r1	; 0x01
	   	//SREG &=~(1<<7);

	       asm("CLI");
     d0a:	f8 94       	cli
	return LOC_ES_tErrorState = ES_OK;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	89 81       	ldd	r24, Y+1	; 0x01
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <DIO_ES_tInit>:
#include"DIO_Private.h"


/*DIO Initialization*/
ES_t DIO_ES_tInit(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     d24:	19 82       	std	Y+1, r1	; 0x01
	/*Pins Direction according to your Configuration */
	DDRA = CONCAT(PA7_DDR,PA6_DDR,PA5_DDR,PA4_DDR,PA3_DDR,PA2_DDR,PA1_DDR,PA0_DDR);
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	10 82       	st	Z, r1
	DDRB = CONCAT(PB7_DDR,PB6_DDR,PB5_DDR,PB4_DDR,PB3_DDR,PB2_DDR,PB1_DDR,PB0_DDR);
     d2c:	e7 e3       	ldi	r30, 0x37	; 55
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	10 82       	st	Z, r1
	DDRC = CONCAT(PC7_DDR,PC6_DDR,PC5_DDR,PC4_DDR,PC3_DDR,PC2_DDR,PC1_DDR,PC0_DDR);
     d32:	e4 e3       	ldi	r30, 0x34	; 52
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	8f e2       	ldi	r24, 0x2F	; 47
     d38:	80 83       	st	Z, r24
	DDRD = CONCAT(PD7_DDR,PD6_DDR,PD5_DDR,PD4_DDR,PD3_DDR,PD2_DDR,PD1_DDR,PD0_DDR);
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	10 82       	st	Z, r1

	/*Pins Initial Value according to your configuration */
	PORTA = CONCAT(PA7_PORT,PA6_PORT,PA5_PORT,PA4_PORT,PA3_PORT,PA2_PORT,PA1_PORT,PA0_PORT);
     d40:	eb e3       	ldi	r30, 0x3B	; 59
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
	PORTB = CONCAT(PB7_PORT,PB6_PORT,PB5_PORT,PB4_PORT,PB3_PORT,PB2_PORT,PB1_PORT,PB0_PORT);
     d46:	e8 e3       	ldi	r30, 0x38	; 56
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	10 82       	st	Z, r1
	PORTC = CONCAT(PC7_PORT,PC6_PORT,PC5_PORT,PC4_PORT,PC3_PORT,PC2_PORT,PC1_PORT,PC0_PORT);
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	10 82       	st	Z, r1
	PORTD = CONCAT(PD7_PORT,PD6_PORT,PD5_PORT,PD4_PORT,PD3_PORT,PD2_PORT,PD1_PORT,PD0_PORT);
     d52:	e2 e3       	ldi	r30, 0x32	; 50
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	10 82       	st	Z, r1

#elif PA0_DDR == PIN_INPUT

#endif
	 */
	LOC_ES_tErrorState = ES_OK ;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <DIO_ES_tSetPinDirection>:
/*Set Pin Direction*/
ES_t DIO_ES_tSetPinDirection(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinDirection)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <DIO_ES_tSetPinDirection+0x6>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <DIO_ES_tSetPinDirection+0x8>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <DIO_ES_tSetPinDirection+0xa>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8a 83       	std	Y+2, r24	; 0x02
     d76:	6b 83       	std	Y+3, r22	; 0x03
     d78:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
     d7a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	84 30       	cpi	r24, 0x04	; 4
     d80:	48 f0       	brcs	.+18     	; 0xd94 <DIO_ES_tSetPinDirection+0x2e>
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	30 f0       	brcs	.+12     	; 0xd94 <DIO_ES_tSetPinDirection+0x2e>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <DIO_ES_tSetPinDirection+0x2e>
			Copy_u8PinNumber>PIN7 &&
			Copy_PinDirection>PIN_OUTPUT)
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	d1 c0       	rjmp	.+418    	; 0xf36 <DIO_ES_tSetPinDirection+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3e 83       	std	Y+6, r19	; 0x06
     d9c:	2d 83       	std	Y+5, r18	; 0x05
     d9e:	6d 81       	ldd	r22, Y+5	; 0x05
     da0:	7e 81       	ldd	r23, Y+6	; 0x06
     da2:	61 30       	cpi	r22, 0x01	; 1
     da4:	71 05       	cpc	r23, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_ES_tSetPinDirection+0x44>
     da8:	44 c0       	rjmp	.+136    	; 0xe32 <DIO_ES_tSetPinDirection+0xcc>
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	91 05       	cpc	r25, r1
     db2:	34 f4       	brge	.+12     	; 0xdc0 <DIO_ES_tSetPinDirection+0x5a>
     db4:	2d 81       	ldd	r18, Y+5	; 0x05
     db6:	3e 81       	ldd	r19, Y+6	; 0x06
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	71 f0       	breq	.+28     	; 0xdda <DIO_ES_tSetPinDirection+0x74>
     dbe:	b9 c0       	rjmp	.+370    	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
     dc0:	6d 81       	ldd	r22, Y+5	; 0x05
     dc2:	7e 81       	ldd	r23, Y+6	; 0x06
     dc4:	62 30       	cpi	r22, 0x02	; 2
     dc6:	71 05       	cpc	r23, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <DIO_ES_tSetPinDirection+0x66>
     dca:	5c c0       	rjmp	.+184    	; 0xe84 <DIO_ES_tSetPinDirection+0x11e>
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 05       	cpc	r25, r1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <DIO_ES_tSetPinDirection+0x72>
     dd6:	82 c0       	rjmp	.+260    	; 0xedc <DIO_ES_tSetPinDirection+0x176>
     dd8:	ac c0       	rjmp	.+344    	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinDirection==PIN_OUTPUT)
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	a1 f4       	brne	.+40     	; 0xe08 <DIO_ES_tSetPinDirection+0xa2>
				DDRA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     de0:	aa e3       	ldi	r26, 0x3A	; 58
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ea e3       	ldi	r30, 0x3A	; 58
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_ES_tSetPinDirection+0x98>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_ES_tSetPinDirection+0x94>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	95 c0       	rjmp	.+298    	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     e08:	aa e3       	ldi	r26, 0x3A	; 58
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea e3       	ldi	r30, 0x3A	; 58
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_ES_tSetPinDirection+0xc0>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_ES_tSetPinDirection+0xbc>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	80 c0       	rjmp	.+256    	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTB:
			DDRB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     e32:	a7 e3       	ldi	r26, 0x37	; 55
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e3       	ldi	r30, 0x37	; 55
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_ES_tSetPinDirection+0xe8>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	2a 95       	dec	r18
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_ES_tSetPinDirection+0xe4>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
			DDRB |= (Copy_PinDirection<<Copy_u8PinNumber);
     e58:	a7 e3       	ldi	r26, 0x37	; 55
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e7 e3       	ldi	r30, 0x37	; 55
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	b9 01       	movw	r22, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_ES_tSetPinDirection+0x112>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	8a 95       	dec	r24
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_ES_tSetPinDirection+0x10e>
     e7c:	cb 01       	movw	r24, r22
     e7e:	84 2b       	or	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	57 c0       	rjmp	.+174    	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinDirection==PIN_OUTPUT)
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	a1 f4       	brne	.+40     	; 0xeb2 <DIO_ES_tSetPinDirection+0x14c>
				DDRC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e4 e3       	ldi	r30, 0x34	; 52
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_ES_tSetPinDirection+0x142>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_ES_tSetPinDirection+0x13e>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	40 c0       	rjmp	.+128    	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     eb2:	a4 e3       	ldi	r26, 0x34	; 52
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e4 e3       	ldi	r30, 0x34	; 52
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_ES_tSetPinDirection+0x16a>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_ES_tSetPinDirection+0x166>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	2b c0       	rjmp	.+86     	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinDirection==PIN_OUTPUT)
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <DIO_ES_tSetPinDirection+0x1a4>
				DDRD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     ee2:	a1 e3       	ldi	r26, 0x31	; 49
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e1 e3       	ldi	r30, 0x31	; 49
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_ES_tSetPinDirection+0x19a>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_ES_tSetPinDirection+0x196>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     f0a:	a1 e3       	ldi	r26, 0x31	; 49
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e1 e3       	ldi	r30, 0x31	; 49
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_ES_tSetPinDirection+0x1c2>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_ES_tSetPinDirection+0x1be>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
}
     f38:	26 96       	adiw	r28, 0x06	; 6
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <DIO_ES_tSetPinValue>:
/*Set Pin Value*/
ES_t DIO_ES_tSetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinValue)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_ES_tSetPinValue+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_ES_tSetPinValue+0x8>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <DIO_ES_tSetPinValue+0xa>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	6b 83       	std	Y+3, r22	; 0x03
     f5c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
     f5e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	48 f0       	brcs	.+18     	; 0xf78 <DIO_ES_tSetPinValue+0x2e>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	30 f0       	brcs	.+12     	; 0xf78 <DIO_ES_tSetPinValue+0x2e>
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	18 f0       	brcs	.+6      	; 0xf78 <DIO_ES_tSetPinValue+0x2e>
			Copy_u8PinNumber>PIN7 &&
			Copy_PinValue>PIN_HIGH)
	{
		LOC_ES_tErrorState  = ES_OUT_OF_RANGE ;
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	d1 c0       	rjmp	.+418    	; 0x111a <DIO_ES_tSetPinValue+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3e 83       	std	Y+6, r19	; 0x06
     f80:	2d 83       	std	Y+5, r18	; 0x05
     f82:	6d 81       	ldd	r22, Y+5	; 0x05
     f84:	7e 81       	ldd	r23, Y+6	; 0x06
     f86:	61 30       	cpi	r22, 0x01	; 1
     f88:	71 05       	cpc	r23, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_ES_tSetPinValue+0x44>
     f8c:	44 c0       	rjmp	.+136    	; 0x1016 <DIO_ES_tSetPinValue+0xcc>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	91 05       	cpc	r25, r1
     f96:	34 f4       	brge	.+12     	; 0xfa4 <DIO_ES_tSetPinValue+0x5a>
     f98:	2d 81       	ldd	r18, Y+5	; 0x05
     f9a:	3e 81       	ldd	r19, Y+6	; 0x06
     f9c:	21 15       	cp	r18, r1
     f9e:	31 05       	cpc	r19, r1
     fa0:	71 f0       	breq	.+28     	; 0xfbe <DIO_ES_tSetPinValue+0x74>
     fa2:	b9 c0       	rjmp	.+370    	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
     fa4:	6d 81       	ldd	r22, Y+5	; 0x05
     fa6:	7e 81       	ldd	r23, Y+6	; 0x06
     fa8:	62 30       	cpi	r22, 0x02	; 2
     faa:	71 05       	cpc	r23, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_ES_tSetPinValue+0x66>
     fae:	5c c0       	rjmp	.+184    	; 0x1068 <DIO_ES_tSetPinValue+0x11e>
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <DIO_ES_tSetPinValue+0x72>
     fba:	82 c0       	rjmp	.+260    	; 0x10c0 <DIO_ES_tSetPinValue+0x176>
     fbc:	ac c0       	rjmp	.+344    	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinValue==PIN_HIGH)
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <DIO_ES_tSetPinValue+0xa2>
				PORTA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_ES_tSetPinValue+0x98>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_ES_tSetPinValue+0x94>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	95 c0       	rjmp	.+298    	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     fec:	ab e3       	ldi	r26, 0x3B	; 59
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	eb e3       	ldi	r30, 0x3B	; 59
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_ES_tSetPinValue+0xc0>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_ES_tSetPinValue+0xbc>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	80 c0       	rjmp	.+256    	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTB:
			PORTB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1016:	a8 e3       	ldi	r26, 0x38	; 56
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e8 e3       	ldi	r30, 0x38	; 56
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_ES_tSetPinValue+0xe8>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	2a 95       	dec	r18
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_ES_tSetPinValue+0xe4>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
			PORTB |= (Copy_PinValue<<Copy_u8PinNumber);
    103c:	a8 e3       	ldi	r26, 0x38	; 56
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e8 e3       	ldi	r30, 0x38	; 56
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	b9 01       	movw	r22, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_ES_tSetPinValue+0x112>
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_ES_tSetPinValue+0x10e>
    1060:	cb 01       	movw	r24, r22
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	57 c0       	rjmp	.+174    	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinValue==PIN_HIGH)
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <DIO_ES_tSetPinValue+0x14c>
				PORTC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_ES_tSetPinValue+0x142>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_ES_tSetPinValue+0x13e>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_ES_tSetPinValue+0x16a>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_ES_tSetPinValue+0x166>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	2b c0       	rjmp	.+86     	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinValue==PIN_HIGH)
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <DIO_ES_tSetPinValue+0x1a4>
				PORTD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    10c6:	a2 e3       	ldi	r26, 0x32	; 50
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e2 e3       	ldi	r30, 0x32	; 50
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_ES_tSetPinValue+0x19a>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_ES_tSetPinValue+0x196>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    10ee:	a2 e3       	ldi	r26, 0x32	; 50
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_ES_tSetPinValue+0x1c2>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_ES_tSetPinValue+0x1be>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
}
    111c:	26 96       	adiw	r28, 0x06	; 6
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_ES_tGetPinValue>:
/*Get Pin Value*/
ES_t DIO_ES_tGetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8* Copy_PinValue)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	27 97       	sbiw	r28, 0x07	; 7
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	6b 83       	std	Y+3, r22	; 0x03
    1146:	5d 83       	std	Y+5, r21	; 0x05
    1148:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    114a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PinValue!=NULL)
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	09 f4       	brne	.+2      	; 0x1156 <DIO_ES_tGetPinValue+0x28>
    1154:	7c c0       	rjmp	.+248    	; 0x124e <DIO_ES_tGetPinValue+0x120>
	{
		if(Copy_u8PortNumber> DIO_PORTD &&
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	30 f0       	brcs	.+12     	; 0x1168 <DIO_ES_tGetPinValue+0x3a>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	18 f0       	brcs	.+6      	; 0x1168 <DIO_ES_tGetPinValue+0x3a>
				Copy_u8PinNumber>PIN7 )
		{
			LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	75 c0       	rjmp	.+234    	; 0x1252 <DIO_ES_tGetPinValue+0x124>
		}
		else
		{
			switch(Copy_u8PortNumber)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3f 83       	std	Y+7, r19	; 0x07
    1170:	2e 83       	std	Y+6, r18	; 0x06
    1172:	4e 81       	ldd	r20, Y+6	; 0x06
    1174:	5f 81       	ldd	r21, Y+7	; 0x07
    1176:	41 30       	cpi	r20, 0x01	; 1
    1178:	51 05       	cpc	r21, r1
    117a:	59 f1       	breq	.+86     	; 0x11d2 <DIO_ES_tGetPinValue+0xa4>
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	9f 81       	ldd	r25, Y+7	; 0x07
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	34 f4       	brge	.+12     	; 0x1192 <DIO_ES_tGetPinValue+0x64>
    1186:	2e 81       	ldd	r18, Y+6	; 0x06
    1188:	3f 81       	ldd	r19, Y+7	; 0x07
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	69 f0       	breq	.+26     	; 0x11aa <DIO_ES_tGetPinValue+0x7c>
    1190:	5b c0       	rjmp	.+182    	; 0x1248 <DIO_ES_tGetPinValue+0x11a>
    1192:	4e 81       	ldd	r20, Y+6	; 0x06
    1194:	5f 81       	ldd	r21, Y+7	; 0x07
    1196:	42 30       	cpi	r20, 0x02	; 2
    1198:	51 05       	cpc	r21, r1
    119a:	79 f1       	breq	.+94     	; 0x11fa <DIO_ES_tGetPinValue+0xcc>
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <DIO_ES_tGetPinValue+0x7a>
    11a6:	3d c0       	rjmp	.+122    	; 0x1222 <DIO_ES_tGetPinValue+0xf4>
    11a8:	4f c0       	rjmp	.+158    	; 0x1248 <DIO_ES_tGetPinValue+0x11a>
			{

			case DIO_PORTA:
				*Copy_PinValue = (PINA>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    11aa:	e9 e3       	ldi	r30, 0x39	; 57
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_ES_tGetPinValue+0x94>
    11be:	55 95       	asr	r21
    11c0:	47 95       	ror	r20
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_ES_tGetPinValue+0x90>
    11c6:	ca 01       	movw	r24, r20
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	ec 81       	ldd	r30, Y+4	; 0x04
    11cc:	fd 81       	ldd	r31, Y+5	; 0x05
    11ce:	80 83       	st	Z, r24
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTB:
				*Copy_PinValue = (PINB>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    11d2:	e6 e3       	ldi	r30, 0x36	; 54
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_ES_tGetPinValue+0xbc>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_ES_tGetPinValue+0xb8>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	ec 81       	ldd	r30, Y+4	; 0x04
    11f4:	fd 81       	ldd	r31, Y+5	; 0x05
    11f6:	80 83       	st	Z, r24
    11f8:	27 c0       	rjmp	.+78     	; 0x1248 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTC:
				*Copy_PinValue = (PINC>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    11fa:	e3 e3       	ldi	r30, 0x33	; 51
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_ES_tGetPinValue+0xe4>
    120e:	55 95       	asr	r21
    1210:	47 95       	ror	r20
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_ES_tGetPinValue+0xe0>
    1216:	ca 01       	movw	r24, r20
    1218:	81 70       	andi	r24, 0x01	; 1
    121a:	ec 81       	ldd	r30, Y+4	; 0x04
    121c:	fd 81       	ldd	r31, Y+5	; 0x05
    121e:	80 83       	st	Z, r24
    1220:	13 c0       	rjmp	.+38     	; 0x1248 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTD:
				*Copy_PinValue = (PIND>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1222:	e0 e3       	ldi	r30, 0x30	; 48
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a9 01       	movw	r20, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_ES_tGetPinValue+0x10c>
    1236:	55 95       	asr	r21
    1238:	47 95       	ror	r20
    123a:	8a 95       	dec	r24
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_ES_tGetPinValue+0x108>
    123e:	ca 01       	movw	r24, r20
    1240:	81 70       	andi	r24, 0x01	; 1
    1242:	ec 81       	ldd	r30, Y+4	; 0x04
    1244:	fd 81       	ldd	r31, Y+5	; 0x05
    1246:	80 83       	st	Z, r24
				break ;
			default:
				break ;
				/*Do Nothing*/
			}
			LOC_ES_tErrorState = ES_OK ;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_ES_tGetPinValue+0x124>
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ES_tErrorState ;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
}
    1254:	27 96       	adiw	r28, 0x07	; 7
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <DIO_ES_tTogglePinValue>:
/*Toggle Pin Value*/
ES_t DIO_ES_tTogglePinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_ES_tTogglePinValue+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_ES_tTogglePinValue+0x8>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	6b 83       	std	Y+3, r22	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK;
    1278:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	30 f0       	brcs	.+12     	; 0x128c <DIO_ES_tTogglePinValue+0x26>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	18 f0       	brcs	.+6      	; 0x128c <DIO_ES_tTogglePinValue+0x26>
			Copy_u8PinNumber>PIN7 )
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	70 c0       	rjmp	.+224    	; 0x136c <DIO_ES_tTogglePinValue+0x106>
	}
	else
	{
		switch(Copy_u8PortNumber)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3d 83       	std	Y+5, r19	; 0x05
    1294:	2c 83       	std	Y+4, r18	; 0x04
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	49 f1       	breq	.+82     	; 0x12f2 <DIO_ES_tTogglePinValue+0x8c>
    12a0:	2c 81       	ldd	r18, Y+4	; 0x04
    12a2:	3d 81       	ldd	r19, Y+5	; 0x05
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <DIO_ES_tTogglePinValue+0x4e>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <DIO_ES_tTogglePinValue+0x64>
    12b2:	5a c0       	rjmp	.+180    	; 0x1368 <DIO_ES_tTogglePinValue+0x102>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	71 f1       	breq	.+92     	; 0x131a <DIO_ES_tTogglePinValue+0xb4>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	e9 f1       	breq	.+122    	; 0x1342 <DIO_ES_tTogglePinValue+0xdc>
    12c8:	4f c0       	rjmp	.+158    	; 0x1368 <DIO_ES_tTogglePinValue+0x102>
		{

		case DIO_PORTA:
			PORTA ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_ES_tTogglePinValue+0x82>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_ES_tTogglePinValue+0x7e>
    12ec:	84 27       	eor	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	3b c0       	rjmp	.+118    	; 0x1368 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTB:
			PORTB ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_ES_tTogglePinValue+0xaa>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_ES_tTogglePinValue+0xa6>
    1314:	84 27       	eor	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	27 c0       	rjmp	.+78     	; 0x1368 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTC:
			PORTC ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    131a:	a5 e3       	ldi	r26, 0x35	; 53
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_ES_tTogglePinValue+0xd2>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_ES_tTogglePinValue+0xce>
    133c:	84 27       	eor	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	13 c0       	rjmp	.+38     	; 0x1368 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTD:
			PORTD ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1342:	a2 e3       	ldi	r26, 0x32	; 50
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e2 e3       	ldi	r30, 0x32	; 50
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_ES_tTogglePinValue+0xfa>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_ES_tTogglePinValue+0xf6>
    1364:	84 27       	eor	r24, r20
    1366:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <SWITCH_ES_tInit>:
extern u8 G_u8SwitchNum ;


/*Switch Driver Initialization*/
ES_t SWITCH_ES_tInit(SWITCH_t* Copy_PtrSWITCH_tConfig )
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <SWITCH_ES_tInit+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <SWITCH_ES_tInit+0x8>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    138e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtrSWITCH_tConfig !=NULL)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	09 f4       	brne	.+2      	; 0x139a <SWITCH_ES_tInit+0x1c>
    1398:	5c c0       	rjmp	.+184    	; 0x1452 <SWITCH_ES_tInit+0xd4>
	{
		u8 LOC_u8SwitchIter = 0 ;
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	53 c0       	rjmp	.+166    	; 0x1444 <SWITCH_ES_tInit+0xc6>
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	c9 01       	movw	r24, r18
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	28 0f       	add	r18, r24
    13ac:	39 1f       	adc	r19, r25
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	fc 01       	movw	r30, r24
    13b4:	e2 0f       	add	r30, r18
    13b6:	f3 1f       	adc	r31, r19
    13b8:	40 81       	ld	r20, Z
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	c9 01       	movw	r24, r18
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	28 0f       	add	r18, r24
    13c8:	39 1f       	adc	r19, r25
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	fc 01       	movw	r30, r24
    13d0:	e2 0f       	add	r30, r18
    13d2:	f3 1f       	adc	r31, r19
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	84 2f       	mov	r24, r20
    13d8:	69 2f       	mov	r22, r25
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
					Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PIN,PIN_INPUT);
			DIO_ES_tSetPinValue(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	c9 01       	movw	r24, r18
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	28 0f       	add	r18, r24
    13ee:	39 1f       	adc	r19, r25
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	fc 01       	movw	r30, r24
    13f6:	e2 0f       	add	r30, r18
    13f8:	f3 1f       	adc	r31, r19
    13fa:	50 81       	ld	r21, Z
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	c9 01       	movw	r24, r18
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	28 0f       	add	r18, r24
    140a:	39 1f       	adc	r19, r25
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	fc 01       	movw	r30, r24
    1412:	e2 0f       	add	r30, r18
    1414:	f3 1f       	adc	r31, r19
    1416:	41 81       	ldd	r20, Z+1	; 0x01
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	c9 01       	movw	r24, r18
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	28 0f       	add	r18, r24
    1426:	39 1f       	adc	r19, r25
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	fc 01       	movw	r30, r24
    142e:	e2 0f       	add	r30, r18
    1430:	f3 1f       	adc	r31, r19
    1432:	92 81       	ldd	r25, Z+2	; 0x02
    1434:	85 2f       	mov	r24, r21
    1436:	64 2f       	mov	r22, r20
    1438:	49 2f       	mov	r20, r25
    143a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtrSWITCH_tConfig !=NULL)
	{
		u8 LOC_u8SwitchIter = 0 ;
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	90 91 68 01 	lds	r25, 0x0168
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	89 17       	cp	r24, r25
    144c:	08 f4       	brcc	.+2      	; 0x1450 <SWITCH_ES_tInit+0xd2>
    144e:	a7 cf       	rjmp	.-178    	; 0x139e <SWITCH_ES_tInit+0x20>
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <SWITCH_ES_tInit+0xd8>
					(Copy_PtrSWITCH_tConfig+LOC_u8SwitchIter)->SWITCH_INTERFACE);
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	8a 83       	std	Y+2, r24	; 0x02
	}

   return LOC_ES_tErrorState ;
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <SWITCH_ES_tGetSwitchState>:
/*Get Switch State*/
ES_t SWITCH_ES_tGetSwitchState(SWITCH_t* Copy_PtrSWITCH_tInfo,u8* Copy_Pu8SwitchState)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <SWITCH_ES_tGetSwitchState+0x6>
    146c:	00 d0       	rcall	.+0      	; 0x146e <SWITCH_ES_tGetSwitchState+0x8>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9b 83       	std	Y+3, r25	; 0x03
    1476:	8a 83       	std	Y+2, r24	; 0x02
    1478:	7d 83       	std	Y+5, r23	; 0x05
    147a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    147c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8SwitchState !=NULL &&
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	91 f0       	breq	.+36     	; 0x14aa <SWITCH_ES_tGetSwitchState+0x44>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	71 f0       	breq	.+28     	; 0x14aa <SWITCH_ES_tGetSwitchState+0x44>
			Copy_Pu8SwitchState !=NULL)
	{
		LOC_ES_tErrorState = DIO_ES_tGetPinValue(Copy_PtrSWITCH_tInfo->SWITCH_PORT,Copy_PtrSWITCH_tInfo->SWITCH_PIN,Copy_Pu8SwitchState);
    148e:	ea 81       	ldd	r30, Y+2	; 0x02
    1490:	fb 81       	ldd	r31, Y+3	; 0x03
    1492:	80 81       	ld	r24, Z
    1494:	ea 81       	ldd	r30, Y+2	; 0x02
    1496:	fb 81       	ldd	r31, Y+3	; 0x03
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	69 2f       	mov	r22, r25
    14a0:	a9 01       	movw	r20, r18
    14a2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tGetPinValue>
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <SWITCH_ES_tGetSwitchState+0x48>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	89 83       	std	Y+1, r24	; 0x01
	}
	   return LOC_ES_tErrorState ;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <STEPPER_ES_tInit>:



/*Stepper_ULN2003 Initialization*/
ES_t STEPPER_ES_tInit(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    14ca:	19 82       	std	Y+1, r1	; 0x01
	DIO_ES_tSetPinDirection(BLUE_GRP,BLUE_PIN,PIN_OUTPUT);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(PINK_GRP,PINK_PIN,PIN_OUTPUT);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	67 e0       	ldi	r22, 0x07	; 7
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(YELLOW_GRP,YELLOW_PIN,PIN_OUTPUT);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	65 e0       	ldi	r22, 0x05	; 5
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(ORANGE_GRP,ORANGE_PIN,PIN_OUTPUT);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	63 e0       	ldi	r22, 0x03	; 3
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,PIN_HIGH);
	 */
	LOC_ES_tErrorState = ES_OK ;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <STEPPER_ES_tFullCycle>:

/**/
ES_t STEPPER_ES_tFullCycle(u8 Copy_u8Direction,u8 Copy_u8Speed)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	a6 97       	sbiw	r28, 0x26	; 38
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	8b a3       	std	Y+35, r24	; 0x23
    1518:	6c a3       	std	Y+36, r22	; 0x24
	ES_t LOC_ES_tErrorState = ES_NOK ;
    151a:	1a a2       	std	Y+34, r1	; 0x22
	u8 State = 15 ;
    151c:	8f e0       	ldi	r24, 0x0F	; 15
    151e:	89 a3       	std	Y+33, r24	; 0x21
	switch(Copy_u8Direction)
    1520:	8b a1       	ldd	r24, Y+35	; 0x23
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3e a3       	std	Y+38, r19	; 0x26
    1528:	2d a3       	std	Y+37, r18	; 0x25
    152a:	8d a1       	ldd	r24, Y+37	; 0x25
    152c:	9e a1       	ldd	r25, Y+38	; 0x26
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	39 f0       	breq	.+14     	; 0x1540 <STEPPER_ES_tFullCycle+0x3e>
    1532:	2d a1       	ldd	r18, Y+37	; 0x25
    1534:	3e a1       	ldd	r19, Y+38	; 0x26
    1536:	21 30       	cpi	r18, 0x01	; 1
    1538:	31 05       	cpc	r19, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <STEPPER_ES_tFullCycle+0x3c>
    153c:	c3 c0       	rjmp	.+390    	; 0x16c4 <STEPPER_ES_tFullCycle+0x1c2>
    153e:	83 c1       	rjmp	.+774    	; 0x1846 <STEPPER_ES_tFullCycle+0x344>
	{
	case CW:
		for(u16 i = 0 ; i<2048 ; i++)
    1540:	18 a2       	std	Y+32, r1	; 0x20
    1542:	1f 8e       	std	Y+31, r1	; 0x1f
    1544:	b7 c0       	rjmp	.+366    	; 0x16b4 <STEPPER_ES_tFullCycle+0x1b2>
		{
			State &=~(1<<(i%4));
    1546:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1548:	98 a1       	ldd	r25, Y+32	; 0x20
    154a:	9c 01       	movw	r18, r24
    154c:	23 70       	andi	r18, 0x03	; 3
    154e:	30 70       	andi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <STEPPER_ES_tFullCycle+0x58>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	2a 95       	dec	r18
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <STEPPER_ES_tFullCycle+0x54>
    155e:	98 2f       	mov	r25, r24
    1560:	90 95       	com	r25
    1562:	89 a1       	ldd	r24, Y+33	; 0x21
    1564:	89 23       	and	r24, r25
    1566:	89 a3       	std	Y+33, r24	; 0x21
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>0)&1)));
    1568:	89 a1       	ldd	r24, Y+33	; 0x21
    156a:	98 2f       	mov	r25, r24
    156c:	91 70       	andi	r25, 0x01	; 1
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	63 e0       	ldi	r22, 0x03	; 3
    1572:	49 2f       	mov	r20, r25
    1574:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>1)&1)));
    1578:	89 a1       	ldd	r24, Y+33	; 0x21
    157a:	86 95       	lsr	r24
    157c:	98 2f       	mov	r25, r24
    157e:	91 70       	andi	r25, 0x01	; 1
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	65 e0       	ldi	r22, 0x05	; 5
    1584:	49 2f       	mov	r20, r25
    1586:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>2)&1)));
    158a:	89 a1       	ldd	r24, Y+33	; 0x21
    158c:	86 95       	lsr	r24
    158e:	86 95       	lsr	r24
    1590:	98 2f       	mov	r25, r24
    1592:	91 70       	andi	r25, 0x01	; 1
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	67 e0       	ldi	r22, 0x07	; 7
    1598:	49 2f       	mov	r20, r25
    159a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>3)&1)));
    159e:	89 a1       	ldd	r24, Y+33	; 0x21
    15a0:	86 95       	lsr	r24
    15a2:	86 95       	lsr	r24
    15a4:	86 95       	lsr	r24
    15a6:	98 2f       	mov	r25, r24
    15a8:	91 70       	andi	r25, 0x01	; 1
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	49 2f       	mov	r20, r25
    15b0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

			State = 0x0F ;
    15b4:	8f e0       	ldi	r24, 0x0F	; 15
    15b6:	89 a3       	std	Y+33, r24	; 0x21
			_delay_ms(Copy_u8Speed);
    15b8:	8c a1       	ldd	r24, Y+36	; 0x24
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	89 8f       	std	Y+25, r24	; 0x19
    15d0:	9a 8f       	std	Y+26, r25	; 0x1a
    15d2:	ab 8f       	std	Y+27, r26	; 0x1b
    15d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d6:	69 8d       	ldd	r22, Y+25	; 0x19
    15d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4a ef       	ldi	r20, 0xFA	; 250
    15e4:	54 e4       	ldi	r21, 0x44	; 68
    15e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8d 8b       	std	Y+21, r24	; 0x15
    15f0:	9e 8b       	std	Y+22, r25	; 0x16
    15f2:	af 8b       	std	Y+23, r26	; 0x17
    15f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f6:	6d 89       	ldd	r22, Y+21	; 0x15
    15f8:	7e 89       	ldd	r23, Y+22	; 0x16
    15fa:	8f 89       	ldd	r24, Y+23	; 0x17
    15fc:	98 8d       	ldd	r25, Y+24	; 0x18
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e8       	ldi	r20, 0x80	; 128
    1604:	5f e3       	ldi	r21, 0x3F	; 63
    1606:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    160a:	88 23       	and	r24, r24
    160c:	2c f4       	brge	.+10     	; 0x1618 <STEPPER_ES_tFullCycle+0x116>
		__ticks = 1;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 8b       	std	Y+20, r25	; 0x14
    1614:	8b 8b       	std	Y+19, r24	; 0x13
    1616:	3f c0       	rjmp	.+126    	; 0x1696 <STEPPER_ES_tFullCycle+0x194>
	else if (__tmp > 65535)
    1618:	6d 89       	ldd	r22, Y+21	; 0x15
    161a:	7e 89       	ldd	r23, Y+22	; 0x16
    161c:	8f 89       	ldd	r24, Y+23	; 0x17
    161e:	98 8d       	ldd	r25, Y+24	; 0x18
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	3f ef       	ldi	r19, 0xFF	; 255
    1624:	4f e7       	ldi	r20, 0x7F	; 127
    1626:	57 e4       	ldi	r21, 0x47	; 71
    1628:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    162c:	18 16       	cp	r1, r24
    162e:	4c f5       	brge	.+82     	; 0x1682 <STEPPER_ES_tFullCycle+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1630:	69 8d       	ldd	r22, Y+25	; 0x19
    1632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e2       	ldi	r20, 0x20	; 32
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
    1658:	0f c0       	rjmp	.+30     	; 0x1678 <STEPPER_ES_tFullCycle+0x176>
    165a:	88 ec       	ldi	r24, 0xC8	; 200
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9a 8b       	std	Y+18, r25	; 0x12
    1660:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1662:	89 89       	ldd	r24, Y+17	; 0x11
    1664:	9a 89       	ldd	r25, Y+18	; 0x12
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <STEPPER_ES_tFullCycle+0x164>
    166a:	9a 8b       	std	Y+18, r25	; 0x12
    166c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166e:	8b 89       	ldd	r24, Y+19	; 0x13
    1670:	9c 89       	ldd	r25, Y+20	; 0x14
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	9c 8b       	std	Y+20, r25	; 0x14
    1676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1678:	8b 89       	ldd	r24, Y+19	; 0x13
    167a:	9c 89       	ldd	r25, Y+20	; 0x14
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	69 f7       	brne	.-38     	; 0x165a <STEPPER_ES_tFullCycle+0x158>
    1680:	14 c0       	rjmp	.+40     	; 0x16aa <STEPPER_ES_tFullCycle+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1682:	6d 89       	ldd	r22, Y+21	; 0x15
    1684:	7e 89       	ldd	r23, Y+22	; 0x16
    1686:	8f 89       	ldd	r24, Y+23	; 0x17
    1688:	98 8d       	ldd	r25, Y+24	; 0x18
    168a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9c 8b       	std	Y+20, r25	; 0x14
    1694:	8b 8b       	std	Y+19, r24	; 0x13
    1696:	8b 89       	ldd	r24, Y+19	; 0x13
    1698:	9c 89       	ldd	r25, Y+20	; 0x14
    169a:	98 8b       	std	Y+16, r25	; 0x10
    169c:	8f 87       	std	Y+15, r24	; 0x0f
    169e:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a0:	98 89       	ldd	r25, Y+16	; 0x10
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <STEPPER_ES_tFullCycle+0x1a0>
    16a6:	98 8b       	std	Y+16, r25	; 0x10
    16a8:	8f 87       	std	Y+15, r24	; 0x0f
	ES_t LOC_ES_tErrorState = ES_NOK ;
	u8 State = 15 ;
	switch(Copy_u8Direction)
	{
	case CW:
		for(u16 i = 0 ; i<2048 ; i++)
    16aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16ac:	98 a1       	ldd	r25, Y+32	; 0x20
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	98 a3       	std	Y+32, r25	; 0x20
    16b2:	8f 8f       	std	Y+31, r24	; 0x1f
    16b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b6:	98 a1       	ldd	r25, Y+32	; 0x20
    16b8:	38 e0       	ldi	r19, 0x08	; 8
    16ba:	80 30       	cpi	r24, 0x00	; 0
    16bc:	93 07       	cpc	r25, r19
    16be:	08 f4       	brcc	.+2      	; 0x16c2 <STEPPER_ES_tFullCycle+0x1c0>
    16c0:	42 cf       	rjmp	.-380    	; 0x1546 <STEPPER_ES_tFullCycle+0x44>
    16c2:	c1 c0       	rjmp	.+386    	; 0x1846 <STEPPER_ES_tFullCycle+0x344>
			_delay_ms(Copy_u8Speed);
		}
		break ;
	case CCW:

		for(u16 i = 0 ; i<2048 ; i++)
    16c4:	1e 8e       	std	Y+30, r1	; 0x1e
    16c6:	1d 8e       	std	Y+29, r1	; 0x1d
    16c8:	b7 c0       	rjmp	.+366    	; 0x1838 <STEPPER_ES_tFullCycle+0x336>
		{

			State &=~(1<<(i%4));
    16ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ce:	9c 01       	movw	r18, r24
    16d0:	23 70       	andi	r18, 0x03	; 3
    16d2:	30 70       	andi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <STEPPER_ES_tFullCycle+0x1dc>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	2a 95       	dec	r18
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <STEPPER_ES_tFullCycle+0x1d8>
    16e2:	98 2f       	mov	r25, r24
    16e4:	90 95       	com	r25
    16e6:	89 a1       	ldd	r24, Y+33	; 0x21
    16e8:	89 23       	and	r24, r25
    16ea:	89 a3       	std	Y+33, r24	; 0x21
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    16ec:	89 a1       	ldd	r24, Y+33	; 0x21
    16ee:	98 2f       	mov	r25, r24
    16f0:	91 70       	andi	r25, 0x01	; 1
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	49 2f       	mov	r20, r25
    16f8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    16fc:	89 a1       	ldd	r24, Y+33	; 0x21
    16fe:	86 95       	lsr	r24
    1700:	98 2f       	mov	r25, r24
    1702:	91 70       	andi	r25, 0x01	; 1
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	67 e0       	ldi	r22, 0x07	; 7
    1708:	49 2f       	mov	r20, r25
    170a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    170e:	89 a1       	ldd	r24, Y+33	; 0x21
    1710:	86 95       	lsr	r24
    1712:	86 95       	lsr	r24
    1714:	98 2f       	mov	r25, r24
    1716:	91 70       	andi	r25, 0x01	; 1
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	65 e0       	ldi	r22, 0x05	; 5
    171c:	49 2f       	mov	r20, r25
    171e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    1722:	89 a1       	ldd	r24, Y+33	; 0x21
    1724:	86 95       	lsr	r24
    1726:	86 95       	lsr	r24
    1728:	86 95       	lsr	r24
    172a:	98 2f       	mov	r25, r24
    172c:	91 70       	andi	r25, 0x01	; 1
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	63 e0       	ldi	r22, 0x03	; 3
    1732:	49 2f       	mov	r20, r25
    1734:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			State = 0x0F ;
    1738:	8f e0       	ldi	r24, 0x0F	; 15
    173a:	89 a3       	std	Y+33, r24	; 0x21
			_delay_ms(Copy_u8Speed);
    173c:	8c a1       	ldd	r24, Y+36	; 0x24
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a0 e0       	ldi	r26, 0x00	; 0
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8b 87       	std	Y+11, r24	; 0x0b
    1754:	9c 87       	std	Y+12, r25	; 0x0c
    1756:	ad 87       	std	Y+13, r26	; 0x0d
    1758:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175a:	6b 85       	ldd	r22, Y+11	; 0x0b
    175c:	7c 85       	ldd	r23, Y+12	; 0x0c
    175e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1760:	9e 85       	ldd	r25, Y+14	; 0x0e
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a ef       	ldi	r20, 0xFA	; 250
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8f 83       	std	Y+7, r24	; 0x07
    1774:	98 87       	std	Y+8, r25	; 0x08
    1776:	a9 87       	std	Y+9, r26	; 0x09
    1778:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <STEPPER_ES_tFullCycle+0x29a>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	3f c0       	rjmp	.+126    	; 0x181a <STEPPER_ES_tFullCycle+0x318>
	else if (__tmp > 65535)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <STEPPER_ES_tFullCycle+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <STEPPER_ES_tFullCycle+0x2fa>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <STEPPER_ES_tFullCycle+0x2e8>
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f7       	brne	.-38     	; 0x17de <STEPPER_ES_tFullCycle+0x2dc>
    1804:	14 c0       	rjmp	.+40     	; 0x182e <STEPPER_ES_tFullCycle+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	9a 81       	ldd	r25, Y+2	; 0x02
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <STEPPER_ES_tFullCycle+0x324>
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(Copy_u8Speed);
		}
		break ;
	case CCW:

		for(u16 i = 0 ; i<2048 ; i++)
    182e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1830:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	9e 8f       	std	Y+30, r25	; 0x1e
    1836:	8d 8f       	std	Y+29, r24	; 0x1d
    1838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183c:	28 e0       	ldi	r18, 0x08	; 8
    183e:	80 30       	cpi	r24, 0x00	; 0
    1840:	92 07       	cpc	r25, r18
    1842:	08 f4       	brcc	.+2      	; 0x1846 <STEPPER_ES_tFullCycle+0x344>
    1844:	42 cf       	rjmp	.-380    	; 0x16ca <STEPPER_ES_tFullCycle+0x1c8>
		/* Do Nothing*/
		break ;

	}

	return LOC_ES_tErrorState ;
    1846:	8a a1       	ldd	r24, Y+34	; 0x22


}
    1848:	a6 96       	adiw	r28, 0x26	; 38
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <STEPPER_ES_tRotationAngle>:

/**/
ES_t STEPPER_ES_tRotationAngle(u8 Copy_u8Direction,u8 Copy_u8Speed,u16 Copy_u8Angle)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	a8 97       	sbiw	r28, 0x28	; 40
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	8d a3       	std	Y+37, r24	; 0x25
    1870:	6e a3       	std	Y+38, r22	; 0x26
    1872:	58 a7       	std	Y+40, r21	; 0x28
    1874:	4f a3       	std	Y+39, r20	; 0x27
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1876:	1c a2       	std	Y+36, r1	; 0x24

	u8 State = 15 ;
    1878:	8f e0       	ldi	r24, 0x0F	; 15
    187a:	8b a3       	std	Y+35, r24	; 0x23
	u16 Steps =  (Copy_u8Angle * 2048UL) / 360UL;
    187c:	8f a1       	ldd	r24, Y+39	; 0x27
    187e:	98 a5       	ldd	r25, Y+40	; 0x28
    1880:	cc 01       	movw	r24, r24
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	07 2e       	mov	r0, r23
    1888:	7b e0       	ldi	r23, 0x0B	; 11
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	aa 1f       	adc	r26, r26
    1890:	bb 1f       	adc	r27, r27
    1892:	7a 95       	dec	r23
    1894:	d1 f7       	brne	.-12     	; 0x188a <STEPPER_ES_tRotationAngle+0x30>
    1896:	70 2d       	mov	r23, r0
    1898:	28 e6       	ldi	r18, 0x68	; 104
    189a:	31 e0       	ldi	r19, 0x01	; 1
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    18a8:	da 01       	movw	r26, r20
    18aa:	c9 01       	movw	r24, r18
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
	if(Copy_u8Direction == CCW)
    18b0:	8d a1       	ldd	r24, Y+37	; 0x25
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <STEPPER_ES_tRotationAngle+0x5e>
    18b6:	c2 c0       	rjmp	.+388    	; 0x1a3c <STEPPER_ES_tRotationAngle+0x1e2>
	{
		for(u16 i = 0 ; i<Steps ; i++)
    18b8:	18 a2       	std	Y+32, r1	; 0x20
    18ba:	1f 8e       	std	Y+31, r1	; 0x1f
    18bc:	b7 c0       	rjmp	.+366    	; 0x1a2c <STEPPER_ES_tRotationAngle+0x1d2>
		{
			State &=~(1<<(i%4));
    18be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c0:	98 a1       	ldd	r25, Y+32	; 0x20
    18c2:	9c 01       	movw	r18, r24
    18c4:	23 70       	andi	r18, 0x03	; 3
    18c6:	30 70       	andi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <STEPPER_ES_tRotationAngle+0x78>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	2a 95       	dec	r18
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <STEPPER_ES_tRotationAngle+0x74>
    18d6:	98 2f       	mov	r25, r24
    18d8:	90 95       	com	r25
    18da:	8b a1       	ldd	r24, Y+35	; 0x23
    18dc:	89 23       	and	r24, r25
    18de:	8b a3       	std	Y+35, r24	; 0x23
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    18e0:	8b a1       	ldd	r24, Y+35	; 0x23
    18e2:	98 2f       	mov	r25, r24
    18e4:	91 70       	andi	r25, 0x01	; 1
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	49 2f       	mov	r20, r25
    18ec:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    18f0:	8b a1       	ldd	r24, Y+35	; 0x23
    18f2:	86 95       	lsr	r24
    18f4:	98 2f       	mov	r25, r24
    18f6:	91 70       	andi	r25, 0x01	; 1
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	67 e0       	ldi	r22, 0x07	; 7
    18fc:	49 2f       	mov	r20, r25
    18fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    1902:	8b a1       	ldd	r24, Y+35	; 0x23
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	98 2f       	mov	r25, r24
    190a:	91 70       	andi	r25, 0x01	; 1
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	65 e0       	ldi	r22, 0x05	; 5
    1910:	49 2f       	mov	r20, r25
    1912:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    1916:	8b a1       	ldd	r24, Y+35	; 0x23
    1918:	86 95       	lsr	r24
    191a:	86 95       	lsr	r24
    191c:	86 95       	lsr	r24
    191e:	98 2f       	mov	r25, r24
    1920:	91 70       	andi	r25, 0x01	; 1
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	63 e0       	ldi	r22, 0x03	; 3
    1926:	49 2f       	mov	r20, r25
    1928:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			State = 0x0F ;
    192c:	8f e0       	ldi	r24, 0x0F	; 15
    192e:	8b a3       	std	Y+35, r24	; 0x23
			_delay_ms(Copy_u8Speed);
    1930:	8e a1       	ldd	r24, Y+38	; 0x26
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	89 8f       	std	Y+25, r24	; 0x19
    1948:	9a 8f       	std	Y+26, r25	; 0x1a
    194a:	ab 8f       	std	Y+27, r26	; 0x1b
    194c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	69 8d       	ldd	r22, Y+25	; 0x19
    1950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8d 8b       	std	Y+21, r24	; 0x15
    1968:	9e 8b       	std	Y+22, r25	; 0x16
    196a:	af 8b       	std	Y+23, r26	; 0x17
    196c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    196e:	6d 89       	ldd	r22, Y+21	; 0x15
    1970:	7e 89       	ldd	r23, Y+22	; 0x16
    1972:	8f 89       	ldd	r24, Y+23	; 0x17
    1974:	98 8d       	ldd	r25, Y+24	; 0x18
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <STEPPER_ES_tRotationAngle+0x136>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <STEPPER_ES_tRotationAngle+0x1b4>
	else if (__tmp > 65535)
    1990:	6d 89       	ldd	r22, Y+21	; 0x15
    1992:	7e 89       	ldd	r23, Y+22	; 0x16
    1994:	8f 89       	ldd	r24, Y+23	; 0x17
    1996:	98 8d       	ldd	r25, Y+24	; 0x18
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <STEPPER_ES_tRotationAngle+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	69 8d       	ldd	r22, Y+25	; 0x19
    19aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <STEPPER_ES_tRotationAngle+0x196>
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9a 8b       	std	Y+18, r25	; 0x12
    19d8:	89 8b       	std	Y+17, r24	; 0x11
    19da:	89 89       	ldd	r24, Y+17	; 0x11
    19dc:	9a 89       	ldd	r25, Y+18	; 0x12
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <STEPPER_ES_tRotationAngle+0x184>
    19e2:	9a 8b       	std	Y+18, r25	; 0x12
    19e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9c 8b       	std	Y+20, r25	; 0x14
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	8b 89       	ldd	r24, Y+19	; 0x13
    19f2:	9c 89       	ldd	r25, Y+20	; 0x14
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <STEPPER_ES_tRotationAngle+0x178>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <STEPPER_ES_tRotationAngle+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6d 89       	ldd	r22, Y+21	; 0x15
    19fc:	7e 89       	ldd	r23, Y+22	; 0x16
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	98 8b       	std	Y+16, r25	; 0x10
    1a14:	8f 87       	std	Y+15, r24	; 0x0f
    1a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a18:	98 89       	ldd	r25, Y+16	; 0x10
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <STEPPER_ES_tRotationAngle+0x1c0>
    1a1e:	98 8b       	std	Y+16, r25	; 0x10
    1a20:	8f 87       	std	Y+15, r24	; 0x0f

	u8 State = 15 ;
	u16 Steps =  (Copy_u8Angle * 2048UL) / 360UL;
	if(Copy_u8Direction == CCW)
	{
		for(u16 i = 0 ; i<Steps ; i++)
    1a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a24:	98 a1       	ldd	r25, Y+32	; 0x20
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	98 a3       	std	Y+32, r25	; 0x20
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a2c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1a2e:	38 a1       	ldd	r19, Y+32	; 0x20
    1a30:	89 a1       	ldd	r24, Y+33	; 0x21
    1a32:	9a a1       	ldd	r25, Y+34	; 0x22
    1a34:	28 17       	cp	r18, r24
    1a36:	39 07       	cpc	r19, r25
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <STEPPER_ES_tRotationAngle+0x1e2>
    1a3a:	41 cf       	rjmp	.-382    	; 0x18be <STEPPER_ES_tRotationAngle+0x64>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
			State = 0x0F ;
			_delay_ms(Copy_u8Speed);
		}
	}
	if(Copy_u8Direction == CW)
    1a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <STEPPER_ES_tRotationAngle+0x1ea>
    1a42:	c2 c0       	rjmp	.+388    	; 0x1bc8 <STEPPER_ES_tRotationAngle+0x36e>
	{
		for(u16 i = 0 ; i<Steps ; i++)
    1a44:	1e 8e       	std	Y+30, r1	; 0x1e
    1a46:	1d 8e       	std	Y+29, r1	; 0x1d
    1a48:	b7 c0       	rjmp	.+366    	; 0x1bb8 <STEPPER_ES_tRotationAngle+0x35e>
		{
			State &=~(1<<(i%4));
    1a4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4e:	9c 01       	movw	r18, r24
    1a50:	23 70       	andi	r18, 0x03	; 3
    1a52:	30 70       	andi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <STEPPER_ES_tRotationAngle+0x204>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	2a 95       	dec	r18
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <STEPPER_ES_tRotationAngle+0x200>
    1a62:	98 2f       	mov	r25, r24
    1a64:	90 95       	com	r25
    1a66:	8b a1       	ldd	r24, Y+35	; 0x23
    1a68:	89 23       	and	r24, r25
    1a6a:	8b a3       	std	Y+35, r24	; 0x23
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>0)&1)));
    1a6c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a6e:	98 2f       	mov	r25, r24
    1a70:	91 70       	andi	r25, 0x01	; 1
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	63 e0       	ldi	r22, 0x03	; 3
    1a76:	49 2f       	mov	r20, r25
    1a78:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>1)&1)));
    1a7c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a7e:	86 95       	lsr	r24
    1a80:	98 2f       	mov	r25, r24
    1a82:	91 70       	andi	r25, 0x01	; 1
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	65 e0       	ldi	r22, 0x05	; 5
    1a88:	49 2f       	mov	r20, r25
    1a8a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>2)&1)));
    1a8e:	8b a1       	ldd	r24, Y+35	; 0x23
    1a90:	86 95       	lsr	r24
    1a92:	86 95       	lsr	r24
    1a94:	98 2f       	mov	r25, r24
    1a96:	91 70       	andi	r25, 0x01	; 1
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	67 e0       	ldi	r22, 0x07	; 7
    1a9c:	49 2f       	mov	r20, r25
    1a9e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>3)&1)));
    1aa2:	8b a1       	ldd	r24, Y+35	; 0x23
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	98 2f       	mov	r25, r24
    1aac:	91 70       	andi	r25, 0x01	; 1
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

			State = 0x0F ;
    1ab8:	8f e0       	ldi	r24, 0x0F	; 15
    1aba:	8b a3       	std	Y+35, r24	; 0x23
			_delay_ms(Copy_u8Speed);
    1abc:	8e a1       	ldd	r24, Y+38	; 0x26
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a0 e0       	ldi	r26, 0x00	; 0
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8b 87       	std	Y+11, r24	; 0x0b
    1ad4:	9c 87       	std	Y+12, r25	; 0x0c
    1ad6:	ad 87       	std	Y+13, r26	; 0x0d
    1ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    1adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a ef       	ldi	r20, 0xFA	; 250
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8f 83       	std	Y+7, r24	; 0x07
    1af4:	98 87       	std	Y+8, r25	; 0x08
    1af6:	a9 87       	std	Y+9, r26	; 0x09
    1af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afa:	6f 81       	ldd	r22, Y+7	; 0x07
    1afc:	78 85       	ldd	r23, Y+8	; 0x08
    1afe:	89 85       	ldd	r24, Y+9	; 0x09
    1b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <STEPPER_ES_tRotationAngle+0x2c2>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <STEPPER_ES_tRotationAngle+0x340>
	else if (__tmp > 65535)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <STEPPER_ES_tRotationAngle+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <STEPPER_ES_tRotationAngle+0x322>
    1b5e:	88 ec       	ldi	r24, 0xC8	; 200
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <STEPPER_ES_tRotationAngle+0x310>
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
    1b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <STEPPER_ES_tRotationAngle+0x304>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <STEPPER_ES_tRotationAngle+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	6f 81       	ldd	r22, Y+7	; 0x07
    1b88:	78 85       	ldd	r23, Y+8	; 0x08
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <STEPPER_ES_tRotationAngle+0x34c>
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(Copy_u8Speed);
		}
	}
	if(Copy_u8Direction == CW)
	{
		for(u16 i = 0 ; i<Steps ; i++)
    1bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1bba:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc0:	28 17       	cp	r18, r24
    1bc2:	39 07       	cpc	r19, r25
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <STEPPER_ES_tRotationAngle+0x36e>
    1bc6:	41 cf       	rjmp	.-382    	; 0x1a4a <STEPPER_ES_tRotationAngle+0x1f0>
			State = 0x0F ;
			_delay_ms(Copy_u8Speed);
		}

	}
	return LOC_ES_tErrorState ;
    1bc8:	8c a1       	ldd	r24, Y+36	; 0x24
}
    1bca:	a8 96       	adiw	r28, 0x28	; 40
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <MOTOR_293D_ES_tInit>:
#include<util/delay.h>


/**/
ES_t MOTOR_293D_ES_tInit(void)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1be6:	19 82       	std	Y+1, r1	; 0x01
	DIO_ES_tSetPinDirection(IN1_GRP,IN1_PIN,PIN_OUTPUT);
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(IN2_GRP,IN2_PIN,PIN_OUTPUT);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(EN_GRP,EN_PIN,PIN_OUTPUT);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>

	DIO_ES_tSetPinValue(IN1_GRP,IN1_PIN,PIN_HIGH);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(IN2_GRP,IN2_PIN,PIN_HIGH);
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(EN_GRP,EN_PIN,PIN_HIGH);
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	LOC_ES_tErrorState = ES_OK ;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <MOTOR_293D_ES_tStartWithDirection>:

/**/
ES_t MOTOR_293D_ES_tStartWithDirection(u8 Copy_u8Direction,u8 Copy_u8Speed)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <MOTOR_293D_ES_tStartWithDirection+0x6>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <MOTOR_293D_ES_tStartWithDirection+0x8>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	6b 83       	std	Y+3, r22	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1c44:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Direction)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	31 f0       	breq	.+12     	; 0x1c64 <MOTOR_293D_ES_tStartWithDirection+0x32>
    1c58:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5c:	21 30       	cpi	r18, 0x01	; 1
    1c5e:	31 05       	cpc	r19, r1
    1c60:	61 f0       	breq	.+24     	; 0x1c7a <MOTOR_293D_ES_tStartWithDirection+0x48>
    1c62:	15 c0       	rjmp	.+42     	; 0x1c8e <MOTOR_293D_ES_tStartWithDirection+0x5c>
	{
	case CW:
		DIO_ES_tSetPinValue(IN1_GRP,IN1_PIN,PIN_LOW);
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(IN2_GRP,IN2_PIN,PIN_HIGH);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <MOTOR_293D_ES_tStartWithDirection+0x5c>
		break ;
	case CCW:
		DIO_ES_tSetPinValue(IN1_GRP,IN1_PIN,PIN_HIGH);
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		DIO_ES_tSetPinValue(IN2_GRP,IN2_PIN,PIN_LOW);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	default :
		/*Do Nothing*/
		break ;
	}

	DIO_ES_tSetPinValue(EN_GRP,EN_PIN,Copy_u8Speed);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	62 e0       	ldi	r22, 0x02	; 2
    1c92:	4b 81       	ldd	r20, Y+3	; 0x03
    1c94:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	LOC_ES_tErrorState = ES_OK ;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <MOTOR_293D_ES_tStop>:
/**/
ES_t MOTOR_293D_ES_tStop(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	0f 92       	push	r0
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1cb8:	19 82       	std	Y+1, r1	; 0x01

//	DIO_ES_tSetPinValue(IN1_GRP,IN1_PIN,PIN_LOW);
//	DIO_ES_tSetPinValue(IN2_GRP,IN2_PIN,PIN_LOW);

	DIO_ES_tSetPinValue(IN1_GRP,IN1_PIN,PIN_HIGH);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(IN2_GRP,IN2_PIN,PIN_HIGH);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	LOC_ES_tErrorState = ES_OK ;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <LED_ES_tInit>:


extern u8 G_u8LEDsNum ;
/*LED Driver Initialization*/
ES_t LED_ES_tInit(LED_t* Copy_PtoArrLED_tConfig)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <LED_ES_tInit+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <LED_ES_tInit+0x8>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1cec:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtoArrLED_tConfig != NULL)
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <LED_ES_tInit+0x1c>
    1cf6:	5e c0       	rjmp	.+188    	; 0x1db4 <LED_ES_tInit+0xd8>
	{
		u8 LOC_u8Iter = 0;
    1cf8:	19 82       	std	Y+1, r1	; 0x01
    1cfa:	53 c0       	rjmp	.+166    	; 0x1da2 <LED_ES_tInit+0xc6>
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	c9 01       	movw	r24, r18
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	28 0f       	add	r18, r24
    1d0a:	39 1f       	adc	r19, r25
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	fc 01       	movw	r30, r24
    1d12:	e2 0f       	add	r30, r18
    1d14:	f3 1f       	adc	r31, r19
    1d16:	40 81       	ld	r20, Z
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	c9 01       	movw	r24, r18
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	28 0f       	add	r18, r24
    1d26:	39 1f       	adc	r19, r25
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e2 0f       	add	r30, r18
    1d30:	f3 1f       	adc	r31, r19
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	84 2f       	mov	r24, r20
    1d36:	69 2f       	mov	r22, r25
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	c9 01       	movw	r24, r18
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	28 0f       	add	r18, r24
    1d4c:	39 1f       	adc	r19, r25
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	50 81       	ld	r21, Z
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	c9 01       	movw	r24, r18
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	28 0f       	add	r18, r24
    1d68:	39 1f       	adc	r19, r25
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e2 0f       	add	r30, r18
    1d72:	f3 1f       	adc	r31, r19
    1d74:	41 81       	ldd	r20, Z+1	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	c9 01       	movw	r24, r18
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	28 0f       	add	r18, r24
    1d84:	39 1f       	adc	r19, r25
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e2 0f       	add	r30, r18
    1d8e:	f3 1f       	adc	r31, r19
    1d90:	92 81       	ldd	r25, Z+2	; 0x02
    1d92:	85 2f       	mov	r24, r21
    1d94:	64 2f       	mov	r22, r20
    1d96:	49 2f       	mov	r20, r25
    1d98:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtoArrLED_tConfig != NULL)
	{
		u8 LOC_u8Iter = 0;
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	90 91 75 01 	lds	r25, 0x0175
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	89 17       	cp	r24, r25
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <LED_ES_tInit+0xd2>
    1dac:	a7 cf       	rjmp	.-178    	; 0x1cfc <LED_ES_tInit+0x20>
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
		}


		 LOC_ES_tErrorState = ES_OK ;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <LED_ES_tInit+0xdc>

	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	8a 83       	std	Y+2, r24	; 0x02
	}


	return LOC_ES_tErrorState ;
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <LED_ES_tSetState>:

/*Set LED State*/

ES_t LED_ES_tSetState(LED_t* Copy_PtoArrLED_tInfo,u8 Copy_u8State)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <LED_ES_tSetState+0x6>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <LED_ES_tSetState+0x8>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9b 83       	std	Y+3, r25	; 0x03
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
    1dd8:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK ;
    1dda:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PtoArrLED_tInfo != NULL)
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <LED_ES_tSetState+0x36>
	{
		DIO_ES_tSetPinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN,Copy_u8State);
    1de4:	ea 81       	ldd	r30, Y+2	; 0x02
    1de6:	fb 81       	ldd	r31, Y+3	; 0x03
    1de8:	80 81       	ld	r24, Z
    1dea:	ea 81       	ldd	r30, Y+2	; 0x02
    1dec:	fb 81       	ldd	r31, Y+3	; 0x03
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	69 2f       	mov	r22, r25
    1df2:	4c 81       	ldd	r20, Y+4	; 0x04
    1df4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		LOC_ES_tErrorState = ES_OK;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <LED_ES_tSetState+0x3a>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LED_ES_tToggleState>:

/*Toggle LED State*/
ES_t LED_ES_tToggleState(LED_t* Copy_PtoArrLED_tInfo)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LED_ES_tToggleState+0x6>
    1e18:	0f 92       	push	r0
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	9b 83       	std	Y+3, r25	; 0x03
    1e20:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1e22:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_PtoArrLED_tInfo != NULL)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	61 f0       	breq	.+24     	; 0x1e44 <LED_ES_tToggleState+0x32>
		{
			DIO_ES_tTogglePinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN);
    1e2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e30:	80 81       	ld	r24, Z
    1e32:	ea 81       	ldd	r30, Y+2	; 0x02
    1e34:	fb 81       	ldd	r31, Y+3	; 0x03
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	69 2f       	mov	r22, r25
    1e3a:	0e 94 33 09 	call	0x1266	; 0x1266 <DIO_ES_tTogglePinValue>
			LOC_ES_tErrorState = ES_OK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <LED_ES_tToggleState+0x36>
		}
		else
		{
			LOC_ES_tErrorState = ES_NULL_POINTER;
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	89 83       	std	Y+1, r24	; 0x01
		}

		return LOC_ES_tErrorState ;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <LCD_ES_tInit>:
#include<util/delay.h>


/*LCD Driver Initialization*/
ES_t  LCD_ES_tInit(void)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1e6a:	1d 8e       	std	Y+29, r1	; 0x1d

	DIO_ES_tSetPinDirection(RS_GRP, RS_PIN, PIN_OUTPUT );
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	61 e0       	ldi	r22, 0x01	; 1
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(RW_GRP, RW_PIN, PIN_OUTPUT );
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(EN_GRP, EN_PIN, PIN_OUTPUT );
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>

	DIO_ES_tSetPinDirection(D7_GRP, D7_PIN, PIN_OUTPUT );
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	66 e0       	ldi	r22, 0x06	; 6
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D6_GRP, D6_PIN, PIN_OUTPUT );
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	65 e0       	ldi	r22, 0x05	; 5
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D5_GRP, D5_PIN, PIN_OUTPUT );
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	64 e0       	ldi	r22, 0x04	; 4
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D4_GRP, D4_PIN, PIN_OUTPUT );
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
	LCD_ES_tWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, 0 );
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	66 e0       	ldi	r22, 0x06	; 6
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, 0 );
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	65 e0       	ldi	r22, 0x05	; 5
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, 1 );
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	64 e0       	ldi	r22, 0x04	; 4
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, 0 );
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	89 8f       	std	Y+25, r24	; 0x19
    1f0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	69 8d       	ldd	r22, Y+25	; 0x19
    1f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a ef       	ldi	r20, 0xFA	; 250
    1f20:	54 e4       	ldi	r21, 0x44	; 68
    1f22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8d 8b       	std	Y+21, r24	; 0x15
    1f2c:	9e 8b       	std	Y+22, r25	; 0x16
    1f2e:	af 8b       	std	Y+23, r26	; 0x17
    1f30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f32:	6d 89       	ldd	r22, Y+21	; 0x15
    1f34:	7e 89       	ldd	r23, Y+22	; 0x16
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_ES_tInit+0xfe>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <LCD_ES_tInit+0x17c>
	else if (__tmp > 65535)
    1f54:	6d 89       	ldd	r22, Y+21	; 0x15
    1f56:	7e 89       	ldd	r23, Y+22	; 0x16
    1f58:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <LCD_ES_tInit+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9c 8b       	std	Y+20, r25	; 0x14
    1f92:	8b 8b       	std	Y+19, r24	; 0x13
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_ES_tInit+0x15e>
    1f96:	88 ec       	ldi	r24, 0xC8	; 200
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9a 8b       	std	Y+18, r25	; 0x12
    1f9c:	89 8b       	std	Y+17, r24	; 0x11
    1f9e:	89 89       	ldd	r24, Y+17	; 0x11
    1fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_ES_tInit+0x14c>
    1fa6:	9a 8b       	std	Y+18, r25	; 0x12
    1fa8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9c 8b       	std	Y+20, r25	; 0x14
    1fb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <LCD_ES_tInit+0x140>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <LCD_ES_tInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd6:	98 8b       	std	Y+16, r25	; 0x10
    1fd8:	8f 87       	std	Y+15, r24	; 0x0f
    1fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fdc:	98 89       	ldd	r25, Y+16	; 0x10
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_ES_tInit+0x188>
    1fe2:	98 8b       	std	Y+16, r25	; 0x10
    1fe4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 ef       	ldi	r26, 0xF0	; 240
    1ff6:	b1 e4       	ldi	r27, 0x41	; 65
    1ff8:	8b 87       	std	Y+11, r24	; 0x0b
    1ffa:	9c 87       	std	Y+12, r25	; 0x0c
    1ffc:	ad 87       	std	Y+13, r26	; 0x0d
    1ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a ef       	ldi	r20, 0xFA	; 250
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8f 83       	std	Y+7, r24	; 0x07
    201a:	98 87       	std	Y+8, r25	; 0x08
    201c:	a9 87       	std	Y+9, r26	; 0x09
    201e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_ES_tInit+0x1ec>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_ES_tInit+0x26a>
	else if (__tmp > 65535)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_ES_tInit+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_ES_tInit+0x24c>
    2084:	88 ec       	ldi	r24, 0xC8	; 200
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_ES_tInit+0x23a>
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_ES_tInit+0x22e>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_ES_tInit+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_ES_tInit+0x276>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	LCD_ES_tWriteNLatch(0x28);
    20d4:	88 e2       	ldi	r24, 0x28	; 40
    20d6:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
#else
#error "LCD mode configuration is wrong"
#endif

	//Display Control
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x0F);
    20e4:	8f e0       	ldi	r24, 0x0F	; 15
    20e6:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	//Display Clear
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x01);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
	//_delay_ms(2);

	//Entry Mode
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x06);
    2104:	86 e0       	ldi	r24, 0x06	; 6
    2106:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	return LOC_ES_tErrorState ;
    210a:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    210c:	6d 96       	adiw	r28, 0x1d	; 29
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <LCD_ES_tWriteData>:
/**************************************************************************************************************************************/
/*LCD write Data*/
ES_t   LCD_ES_tWriteData(u8 Copy_u8Data)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <LCD_ES_tWriteData+0x6>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    212a:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	61 e0       	ldi	r22, 0x01	; 1
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Data);
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <LCD_ES_tWriteCommand>:
/****************************************************************************************************************************************/
/*LCD write command*/
ES_t   LCD_ES_tWriteCommand(u8 Copy_u8Command)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <LCD_ES_tWriteCommand+0x6>
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2158:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Command);
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    216e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LCD_ES_tWriteNLatch>:

/******************************************************************************************************************************************/
static ES_t LCD_ES_tWriteNLatch(u8 Copy_u8Byte)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	ea 97       	sbiw	r28, 0x3a	; 58
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	8a af       	std	Y+58, r24	; 0x3a
	ES_t LOC_ES_tErrorState = ES_NOK;
    2190:	19 ae       	std	Y+57, r1	; 0x39
	_delay_ms(30);


#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	62 e0       	ldi	r22, 0x02	; 2
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>7)&1) );
    21a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    21a8:	98 2f       	mov	r25, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	99 27       	eor	r25, r25
    21ae:	99 1f       	adc	r25, r25
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	66 e0       	ldi	r22, 0x06	; 6
    21b4:	49 2f       	mov	r20, r25
    21b6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>6)&1) );
    21ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    21bc:	82 95       	swap	r24
    21be:	86 95       	lsr	r24
    21c0:	86 95       	lsr	r24
    21c2:	83 70       	andi	r24, 0x03	; 3
    21c4:	98 2f       	mov	r25, r24
    21c6:	91 70       	andi	r25, 0x01	; 1
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	65 e0       	ldi	r22, 0x05	; 5
    21cc:	49 2f       	mov	r20, r25
    21ce:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>5)&1) );
    21d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    21d4:	82 95       	swap	r24
    21d6:	86 95       	lsr	r24
    21d8:	87 70       	andi	r24, 0x07	; 7
    21da:	98 2f       	mov	r25, r24
    21dc:	91 70       	andi	r25, 0x01	; 1
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	64 e0       	ldi	r22, 0x04	; 4
    21e2:	49 2f       	mov	r20, r25
    21e4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>4)&1) );
    21e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ea:	82 95       	swap	r24
    21ec:	8f 70       	andi	r24, 0x0F	; 15
    21ee:	98 2f       	mov	r25, r24
    21f0:	91 70       	andi	r25, 0x01	; 1
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	63 e0       	ldi	r22, 0x03	; 3
    21f6:	49 2f       	mov	r20, r25
    21f8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e8       	ldi	r26, 0x80	; 128
    220c:	bf e3       	ldi	r27, 0x3F	; 63
    220e:	8d ab       	std	Y+53, r24	; 0x35
    2210:	9e ab       	std	Y+54, r25	; 0x36
    2212:	af ab       	std	Y+55, r26	; 0x37
    2214:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	6d a9       	ldd	r22, Y+53	; 0x35
    2218:	7e a9       	ldd	r23, Y+54	; 0x36
    221a:	8f a9       	ldd	r24, Y+55	; 0x37
    221c:	98 ad       	ldd	r25, Y+56	; 0x38
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a ef       	ldi	r20, 0xFA	; 250
    2224:	54 e4       	ldi	r21, 0x44	; 68
    2226:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	89 ab       	std	Y+49, r24	; 0x31
    2230:	9a ab       	std	Y+50, r25	; 0x32
    2232:	ab ab       	std	Y+51, r26	; 0x33
    2234:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2236:	69 a9       	ldd	r22, Y+49	; 0x31
    2238:	7a a9       	ldd	r23, Y+50	; 0x32
    223a:	8b a9       	ldd	r24, Y+51	; 0x33
    223c:	9c a9       	ldd	r25, Y+52	; 0x34
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <LCD_ES_tWriteNLatch+0xde>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	98 ab       	std	Y+48, r25	; 0x30
    2254:	8f a7       	std	Y+47, r24	; 0x2f
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <LCD_ES_tWriteNLatch+0x15c>
	else if (__tmp > 65535)
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <LCD_ES_tWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	6d a9       	ldd	r22, Y+53	; 0x35
    2272:	7e a9       	ldd	r23, Y+54	; 0x36
    2274:	8f a9       	ldd	r24, Y+55	; 0x37
    2276:	98 ad       	ldd	r25, Y+56	; 0x38
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	98 ab       	std	Y+48, r25	; 0x30
    2296:	8f a7       	std	Y+47, r24	; 0x2f
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <LCD_ES_tWriteNLatch+0x13e>
    229a:	88 ec       	ldi	r24, 0xC8	; 200
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9e a7       	std	Y+46, r25	; 0x2e
    22a0:	8d a7       	std	Y+45, r24	; 0x2d
    22a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_ES_tWriteNLatch+0x12c>
    22aa:	9e a7       	std	Y+46, r25	; 0x2e
    22ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b0:	98 a9       	ldd	r25, Y+48	; 0x30
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	98 ab       	std	Y+48, r25	; 0x30
    22b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ba:	98 a9       	ldd	r25, Y+48	; 0x30
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <LCD_ES_tWriteNLatch+0x120>
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <LCD_ES_tWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	69 a9       	ldd	r22, Y+49	; 0x31
    22c4:	7a a9       	ldd	r23, Y+50	; 0x32
    22c6:	8b a9       	ldd	r24, Y+51	; 0x33
    22c8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	98 ab       	std	Y+48, r25	; 0x30
    22d4:	8f a7       	std	Y+47, r24	; 0x2f
    22d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d8:	98 a9       	ldd	r25, Y+48	; 0x30
    22da:	9c a7       	std	Y+44, r25	; 0x2c
    22dc:	8b a7       	std	Y+43, r24	; 0x2b
    22de:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_ES_tWriteNLatch+0x168>
    22e6:	9c a7       	std	Y+44, r25	; 0x2c
    22e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	62 e0       	ldi	r22, 0x02	; 2
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a0 ef       	ldi	r26, 0xF0	; 240
    22fa:	b1 e4       	ldi	r27, 0x41	; 65
    22fc:	8f a3       	std	Y+39, r24	; 0x27
    22fe:	98 a7       	std	Y+40, r25	; 0x28
    2300:	a9 a7       	std	Y+41, r26	; 0x29
    2302:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	6f a1       	ldd	r22, Y+39	; 0x27
    2306:	78 a5       	ldd	r23, Y+40	; 0x28
    2308:	89 a5       	ldd	r24, Y+41	; 0x29
    230a:	9a a5       	ldd	r25, Y+42	; 0x2a
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4a ef       	ldi	r20, 0xFA	; 250
    2312:	54 e4       	ldi	r21, 0x44	; 68
    2314:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	8b a3       	std	Y+35, r24	; 0x23
    231e:	9c a3       	std	Y+36, r25	; 0x24
    2320:	ad a3       	std	Y+37, r26	; 0x25
    2322:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2324:	6b a1       	ldd	r22, Y+35	; 0x23
    2326:	7c a1       	ldd	r23, Y+36	; 0x24
    2328:	8d a1       	ldd	r24, Y+37	; 0x25
    232a:	9e a1       	ldd	r25, Y+38	; 0x26
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2338:	88 23       	and	r24, r24
    233a:	2c f4       	brge	.+10     	; 0x2346 <LCD_ES_tWriteNLatch+0x1cc>
		__ticks = 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9a a3       	std	Y+34, r25	; 0x22
    2342:	89 a3       	std	Y+33, r24	; 0x21
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <LCD_ES_tWriteNLatch+0x24a>
	else if (__tmp > 65535)
    2346:	6b a1       	ldd	r22, Y+35	; 0x23
    2348:	7c a1       	ldd	r23, Y+36	; 0x24
    234a:	8d a1       	ldd	r24, Y+37	; 0x25
    234c:	9e a1       	ldd	r25, Y+38	; 0x26
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	4f e7       	ldi	r20, 0x7F	; 127
    2354:	57 e4       	ldi	r21, 0x47	; 71
    2356:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    235a:	18 16       	cp	r1, r24
    235c:	4c f5       	brge	.+82     	; 0x23b0 <LCD_ES_tWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	6f a1       	ldd	r22, Y+39	; 0x27
    2360:	78 a5       	ldd	r23, Y+40	; 0x28
    2362:	89 a5       	ldd	r24, Y+41	; 0x29
    2364:	9a a5       	ldd	r25, Y+42	; 0x2a
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9a a3       	std	Y+34, r25	; 0x22
    2384:	89 a3       	std	Y+33, r24	; 0x21
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <LCD_ES_tWriteNLatch+0x22c>
    2388:	88 ec       	ldi	r24, 0xC8	; 200
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	98 a3       	std	Y+32, r25	; 0x20
    238e:	8f 8f       	std	Y+31, r24	; 0x1f
    2390:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2392:	98 a1       	ldd	r25, Y+32	; 0x20
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_ES_tWriteNLatch+0x21a>
    2398:	98 a3       	std	Y+32, r25	; 0x20
    239a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239c:	89 a1       	ldd	r24, Y+33	; 0x21
    239e:	9a a1       	ldd	r25, Y+34	; 0x22
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	9a a3       	std	Y+34, r25	; 0x22
    23a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	89 a1       	ldd	r24, Y+33	; 0x21
    23a8:	9a a1       	ldd	r25, Y+34	; 0x22
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	69 f7       	brne	.-38     	; 0x2388 <LCD_ES_tWriteNLatch+0x20e>
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <LCD_ES_tWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b0:	6b a1       	ldd	r22, Y+35	; 0x23
    23b2:	7c a1       	ldd	r23, Y+36	; 0x24
    23b4:	8d a1       	ldd	r24, Y+37	; 0x25
    23b6:	9e a1       	ldd	r25, Y+38	; 0x26
    23b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9a a3       	std	Y+34, r25	; 0x22
    23c2:	89 a3       	std	Y+33, r24	; 0x21
    23c4:	89 a1       	ldd	r24, Y+33	; 0x21
    23c6:	9a a1       	ldd	r25, Y+34	; 0x22
    23c8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ca:	8d 8f       	std	Y+29, r24	; 0x1d
    23cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_ES_tWriteNLatch+0x256>
    23d4:	9e 8f       	std	Y+30, r25	; 0x1e
    23d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>3)&1) );
    23d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    23da:	86 95       	lsr	r24
    23dc:	86 95       	lsr	r24
    23de:	86 95       	lsr	r24
    23e0:	98 2f       	mov	r25, r24
    23e2:	91 70       	andi	r25, 0x01	; 1
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	66 e0       	ldi	r22, 0x06	; 6
    23e8:	49 2f       	mov	r20, r25
    23ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>2)&1) );
    23ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    23f0:	86 95       	lsr	r24
    23f2:	86 95       	lsr	r24
    23f4:	98 2f       	mov	r25, r24
    23f6:	91 70       	andi	r25, 0x01	; 1
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	65 e0       	ldi	r22, 0x05	; 5
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>1)&1) );
    2402:	8a ad       	ldd	r24, Y+58	; 0x3a
    2404:	86 95       	lsr	r24
    2406:	98 2f       	mov	r25, r24
    2408:	91 70       	andi	r25, 0x01	; 1
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	64 e0       	ldi	r22, 0x04	; 4
    240e:	49 2f       	mov	r20, r25
    2410:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>0)&1) );
    2414:	8a ad       	ldd	r24, Y+58	; 0x3a
    2416:	98 2f       	mov	r25, r24
    2418:	91 70       	andi	r25, 0x01	; 1
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	63 e0       	ldi	r22, 0x03	; 3
    241e:	49 2f       	mov	r20, r25
    2420:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e8       	ldi	r26, 0x80	; 128
    2434:	bf e3       	ldi	r27, 0x3F	; 63
    2436:	89 8f       	std	Y+25, r24	; 0x19
    2438:	9a 8f       	std	Y+26, r25	; 0x1a
    243a:	ab 8f       	std	Y+27, r26	; 0x1b
    243c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	69 8d       	ldd	r22, Y+25	; 0x19
    2440:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2442:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2444:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8d 8b       	std	Y+21, r24	; 0x15
    2458:	9e 8b       	std	Y+22, r25	; 0x16
    245a:	af 8b       	std	Y+23, r26	; 0x17
    245c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    245e:	6d 89       	ldd	r22, Y+21	; 0x15
    2460:	7e 89       	ldd	r23, Y+22	; 0x16
    2462:	8f 89       	ldd	r24, Y+23	; 0x17
    2464:	98 8d       	ldd	r25, Y+24	; 0x18
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_ES_tWriteNLatch+0x306>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9c 8b       	std	Y+20, r25	; 0x14
    247c:	8b 8b       	std	Y+19, r24	; 0x13
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <LCD_ES_tWriteNLatch+0x384>
	else if (__tmp > 65535)
    2480:	6d 89       	ldd	r22, Y+21	; 0x15
    2482:	7e 89       	ldd	r23, Y+22	; 0x16
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <LCD_ES_tWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	69 8d       	ldd	r22, Y+25	; 0x19
    249a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_ES_tWriteNLatch+0x366>
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9a 8b       	std	Y+18, r25	; 0x12
    24c8:	89 8b       	std	Y+17, r24	; 0x11
    24ca:	89 89       	ldd	r24, Y+17	; 0x11
    24cc:	9a 89       	ldd	r25, Y+18	; 0x12
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_ES_tWriteNLatch+0x354>
    24d2:	9a 8b       	std	Y+18, r25	; 0x12
    24d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9c 8b       	std	Y+20, r25	; 0x14
    24de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_ES_tWriteNLatch+0x348>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <LCD_ES_tWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	6d 89       	ldd	r22, Y+21	; 0x15
    24ec:	7e 89       	ldd	r23, Y+22	; 0x16
    24ee:	8f 89       	ldd	r24, Y+23	; 0x17
    24f0:	98 8d       	ldd	r25, Y+24	; 0x18
    24f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	98 8b       	std	Y+16, r25	; 0x10
    2504:	8f 87       	std	Y+15, r24	; 0x0f
    2506:	8f 85       	ldd	r24, Y+15	; 0x0f
    2508:	98 89       	ldd	r25, Y+16	; 0x10
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_ES_tWriteNLatch+0x390>
    250e:	98 8b       	std	Y+16, r25	; 0x10
    2510:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 ef       	ldi	r26, 0xF0	; 240
    2522:	b1 e4       	ldi	r27, 0x41	; 65
    2524:	8b 87       	std	Y+11, r24	; 0x0b
    2526:	9c 87       	std	Y+12, r25	; 0x0c
    2528:	ad 87       	std	Y+13, r26	; 0x0d
    252a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	6b 85       	ldd	r22, Y+11	; 0x0b
    252e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2530:	8d 85       	ldd	r24, Y+13	; 0x0d
    2532:	9e 85       	ldd	r25, Y+14	; 0x0e
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a ef       	ldi	r20, 0xFA	; 250
    253a:	54 e4       	ldi	r21, 0x44	; 68
    253c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8f 83       	std	Y+7, r24	; 0x07
    2546:	98 87       	std	Y+8, r25	; 0x08
    2548:	a9 87       	std	Y+9, r26	; 0x09
    254a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_ES_tWriteNLatch+0x3f4>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <LCD_ES_tWriteNLatch+0x472>
	else if (__tmp > 65535)
    256e:	6f 81       	ldd	r22, Y+7	; 0x07
    2570:	78 85       	ldd	r23, Y+8	; 0x08
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <LCD_ES_tWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	7c 85       	ldd	r23, Y+12	; 0x0c
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <LCD_ES_tWriteNLatch+0x454>
    25b0:	88 ec       	ldi	r24, 0xC8	; 200
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_ES_tWriteNLatch+0x442>
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <LCD_ES_tWriteNLatch+0x436>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <LCD_ES_tWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_ES_tWriteNLatch+0x47e>
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01

#else
#error "LCD mode configuration is wrong"
#endif

	return LOC_ES_tErrorState;
    2600:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2602:	ea 96       	adiw	r28, 0x3a	; 58
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <LCD_ES_tWriteString>:
/***********************************************************************************************************************/
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	00 d0       	rcall	.+0      	; 0x261a <LCD_ES_tWriteString+0x6>
    261a:	00 d0       	rcall	.+0      	; 0x261c <LCD_ES_tWriteString+0x8>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03

	ES_t LOC_ES_tErrorState = ES_NOK;
    2624:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8Iterator = 0 ;
    2626:	19 82       	std	Y+1, r1	; 0x01
    2628:	13 c0       	rjmp	.+38     	; 0x2650 <LCD_ES_tWriteString+0x3c>
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
	{
		//LCD_enuWriteData(Copy_u8Data[LOC_u8Iterator]);
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	80 81       	ld	r24, Z
    2646:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
		LOC_u8Iterator++;
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{

	ES_t LOC_ES_tErrorState = ES_NOK;
	u8 LOC_u8Iterator = 0 ;
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	80 81       	ld	r24, Z
    2662:	88 23       	and	r24, r24
    2664:	11 f7       	brne	.-60     	; 0x262a <LCD_ES_tWriteString+0x16>
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}

	return LOC_ES_tErrorState;
    2666:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <LCD_ES_tSendIntgerNum>:
/***********************************************************************************************************************/
ES_t LCD_ES_tSendIntgerNum(s32 Copy_s32Num)
{
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	62 97       	sbiw	r28, 0x12	; 18
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	6f 87       	std	Y+15, r22	; 0x0f
    2690:	78 8b       	std	Y+16, r23	; 0x10
    2692:	89 8b       	std	Y+17, r24	; 0x11
    2694:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t LOC_ES_tErrorState = ES_NOK;
    2696:	1c 82       	std	Y+4, r1	; 0x04

	s8 LOC_s8Sign = -1;
    2698:	8f ef       	ldi	r24, 0xFF	; 255
    269a:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_u8ArrIndex = 0;
    269c:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8ArrNmber[10];
	/*Check Sign*/
	if(Copy_s32Num < 0)
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	98 89       	ldd	r25, Y+16	; 0x10
    26a2:	a9 89       	ldd	r26, Y+17	; 0x11
    26a4:	ba 89       	ldd	r27, Y+18	; 0x12
    26a6:	bb 23       	and	r27, r27
    26a8:	0c f0       	brlt	.+2      	; 0x26ac <LCD_ES_tSendIntgerNum+0x36>
    26aa:	4b c0       	rjmp	.+150    	; 0x2742 <LCD_ES_tSendIntgerNum+0xcc>
	{
		/*display Sign*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch('-');
    26b6:	8d e2       	ldi	r24, 0x2D	; 45
    26b8:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
		/*make The number Positive*/
		Copy_s32Num *=LOC_s8Sign ;
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	28 2f       	mov	r18, r24
    26c0:	33 27       	eor	r19, r19
    26c2:	27 fd       	sbrc	r18, 7
    26c4:	30 95       	com	r19
    26c6:	43 2f       	mov	r20, r19
    26c8:	53 2f       	mov	r21, r19
    26ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    26cc:	98 89       	ldd	r25, Y+16	; 0x10
    26ce:	a9 89       	ldd	r26, Y+17	; 0x11
    26d0:	ba 89       	ldd	r27, Y+18	; 0x12
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__mulsi3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8f 87       	std	Y+15, r24	; 0x0f
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	a9 8b       	std	Y+17, r26	; 0x11
    26e4:	ba 8b       	std	Y+18, r27	; 0x12
    26e6:	52 c0       	rjmp	.+164    	; 0x278c <LCD_ES_tSendIntgerNum+0x116>
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	08 2f       	mov	r16, r24
    26ec:	10 e0       	ldi	r17, 0x00	; 0
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	98 89       	ldd	r25, Y+16	; 0x10
    26f2:	a9 89       	ldd	r26, Y+17	; 0x11
    26f4:	ba 89       	ldd	r27, Y+18	; 0x12
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__divmodsi4>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	28 2f       	mov	r18, r24
    270c:	ce 01       	movw	r24, r28
    270e:	05 96       	adiw	r24, 0x05	; 5
    2710:	fc 01       	movw	r30, r24
    2712:	e0 0f       	add	r30, r16
    2714:	f1 1f       	adc	r31, r17
    2716:	20 83       	st	Z, r18
			Copy_s32Num/=10;
    2718:	8f 85       	ldd	r24, Y+15	; 0x0f
    271a:	98 89       	ldd	r25, Y+16	; 0x10
    271c:	a9 89       	ldd	r26, Y+17	; 0x11
    271e:	ba 89       	ldd	r27, Y+18	; 0x12
    2720:	2a e0       	ldi	r18, 0x0A	; 10
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__divmodsi4>
    2730:	da 01       	movw	r26, r20
    2732:	c9 01       	movw	r24, r18
    2734:	8f 87       	std	Y+15, r24	; 0x0f
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	a9 8b       	std	Y+17, r26	; 0x11
    273a:	ba 8b       	std	Y+18, r27	; 0x12
			LOC_u8ArrIndex++;
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Num *=LOC_s8Sign ;
	}
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
    2742:	8f 85       	ldd	r24, Y+15	; 0x0f
    2744:	98 89       	ldd	r25, Y+16	; 0x10
    2746:	a9 89       	ldd	r26, Y+17	; 0x11
    2748:	ba 89       	ldd	r27, Y+18	; 0x12
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	a1 05       	cpc	r26, r1
    274e:	b1 05       	cpc	r27, r1
    2750:	59 f6       	brne	.-106    	; 0x26e8 <LCD_ES_tSendIntgerNum+0x72>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	81 50       	subi	r24, 0x01	; 1
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	16 c0       	rjmp	.+44     	; 0x2786 <LCD_ES_tSendIntgerNum+0x110>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	33 27       	eor	r19, r19
    276a:	27 fd       	sbrc	r18, 7
    276c:	30 95       	com	r19
    276e:	ce 01       	movw	r24, r28
    2770:	05 96       	adiw	r24, 0x05	; 5
    2772:	fc 01       	movw	r30, r24
    2774:	e2 0f       	add	r30, r18
    2776:	f3 1f       	adc	r31, r19
    2778:	80 81       	ld	r24, Z
    277a:	80 5d       	subi	r24, 0xD0	; 208
    277c:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	81 50       	subi	r24, 0x01	; 1
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	88 23       	and	r24, r24
    278a:	3c f7       	brge	.-50     	; 0x275a <LCD_ES_tSendIntgerNum+0xe4>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');

		}
	}

	return LOC_ES_tErrorState;
    278c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    278e:	62 96       	adiw	r28, 0x12	; 18
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <LCD_ES_tCustomAlphChar>:

/************************************************************************************************************************/
/*LCD Create SpecialCharacter 8 Bits*/
ES_t  LCD_ES_tCustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <LCD_ES_tCustomAlphChar+0x6>
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <LCD_ES_tCustomAlphChar+0x8>
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    27b4:	7d 83       	std	Y+5, r23	; 0x05
    27b6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    27b8:	1a 82       	std	Y+2, r1	; 0x02
	/*you have only 8 patterns to be customized */

	if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	88 30       	cpi	r24, 0x08	; 8
    27be:	70 f5       	brcc	.+92     	; 0x281c <LCD_ES_tCustomAlphChar+0x78>
	{
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	61 e0       	ldi	r22, 0x01	; 1
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	08 96       	adiw	r24, 0x08	; 8
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	8a 83       	std	Y+2, r24	; 0x02
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    27e6:	19 82       	std	Y+1, r1	; 0x01
    27e8:	13 c0       	rjmp	.+38     	; 0x2810 <LCD_ES_tCustomAlphChar+0x6c>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	61 e0       	ldi	r22, 0x01	; 1
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	9d 81       	ldd	r25, Y+5	; 0x05
    27fe:	fc 01       	movw	r30, r24
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	80 81       	ld	r24, Z
    2806:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
		LOC_ES_tErrorState = ES_OK ;
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	88 30       	cpi	r24, 0x08	; 8
    2814:	50 f3       	brcs	.-44     	; 0x27ea <LCD_ES_tCustomAlphChar+0x46>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
		}
		LOC_ES_tErrorState = ES_OK;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <LCD_ES_tCustomAlphChar+0x7c>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return LOC_ES_tErrorState;
    2820:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <LCD_ES_tGoToPosition>:
/********************************************************************************************************************************************************/

/*LCD Go To Position*/

ES_t   LCD_ES_tGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <LCD_ES_tGoToPosition+0x6>
    2838:	00 d0       	rcall	.+0      	; 0x283a <LCD_ES_tGoToPosition+0x8>
    283a:	0f 92       	push	r0
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	8c 83       	std	Y+4, r24	; 0x04
    2842:	6d 83       	std	Y+5, r22	; 0x05
	ES_t LOC_ES_tErrorState = ES_NOK;
    2844:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8ArrRow[2] = {0x80,0xC0};
    2846:	80 e8       	ldi	r24, 0x80	; 128
    2848:	8a 83       	std	Y+2, r24	; 0x02
    284a:	80 ec       	ldi	r24, 0xC0	; 192
    284c:	8b 83       	std	Y+3, r24	; 0x03
	if( (1<=Copy_u8Row && Copy_u8Row<=2 ) &&
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	88 23       	and	r24, r24
    2852:	11 f1       	breq	.+68     	; 0x2898 <LCD_ES_tGoToPosition+0x66>
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	83 30       	cpi	r24, 0x03	; 3
    2858:	f8 f4       	brcc	.+62     	; 0x2898 <LCD_ES_tGoToPosition+0x66>
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	88 23       	and	r24, r24
    285e:	e1 f0       	breq	.+56     	; 0x2898 <LCD_ES_tGoToPosition+0x66>
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	81 31       	cpi	r24, 0x11	; 17
    2864:	c8 f4       	brcc	.+50     	; 0x2898 <LCD_ES_tGoToPosition+0x66>
			(1<=Copy_u8Col && Copy_u8Col<=16))
	{
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(LOC_u8ArrRow[Copy_u8Row-1]+ Copy_u8Col-1);
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9c 01       	movw	r18, r24
    2878:	21 50       	subi	r18, 0x01	; 1
    287a:	30 40       	sbci	r19, 0x00	; 0
    287c:	ce 01       	movw	r24, r28
    287e:	02 96       	adiw	r24, 0x02	; 2
    2880:	fc 01       	movw	r30, r24
    2882:	e2 0f       	add	r30, r18
    2884:	f3 1f       	adc	r31, r19
    2886:	90 81       	ld	r25, Z
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	89 0f       	add	r24, r25
    288c:	81 50       	subi	r24, 0x01	; 1
    288e:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	02 c0       	rjmp	.+4      	; 0x289c <LCD_ES_tGoToPosition+0x6a>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    2898:	82 e0       	ldi	r24, 0x02	; 2
    289a:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState;
    289c:	89 81       	ldd	r24, Y+1	; 0x01
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <KPAD_ES_tInit>:
#include<util/delay.h>


/*KeyPad Initialization*/
ES_t KPAD_ES_tInit(void)
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	0f 92       	push	r0
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState =ES_NOK ;
    28b8:	19 82       	std	Y+1, r1	; 0x01
	/*Set Row Input Direction */
	DIO_ES_tSetPinDirection(R1_GRP,R1_PIN,PIN_INPUT);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	64 e0       	ldi	r22, 0x04	; 4
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R2_GRP,R2_PIN,PIN_INPUT);
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	65 e0       	ldi	r22, 0x05	; 5
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R3_GRP,R3_PIN,PIN_INPUT);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	66 e0       	ldi	r22, 0x06	; 6
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R4_GRP,R4_PIN,PIN_INPUT);
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	67 e0       	ldi	r22, 0x07	; 7
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	/*Active internal Pull up in Row*/
	DIO_ES_tSetPinValue(R1_GRP,R1_PIN,DIO_PULLUP);
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	64 e0       	ldi	r22, 0x04	; 4
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R2_GRP,R2_PIN,DIO_PULLUP);
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	65 e0       	ldi	r22, 0x05	; 5
    28f0:	41 e0       	ldi	r20, 0x01	; 1
    28f2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R3_GRP,R3_PIN,DIO_PULLUP);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	66 e0       	ldi	r22, 0x06	; 6
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R4_GRP,R4_PIN,DIO_PULLUP);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	67 e0       	ldi	r22, 0x07	; 7
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>

	/*Set COL Output Direction */
	DIO_ES_tSetPinDirection(C1_GRP,C1_PIN,PIN_OUTPUT);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	62 e0       	ldi	r22, 0x02	; 2
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C2_GRP,C2_PIN,PIN_OUTPUT);
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	63 e0       	ldi	r22, 0x03	; 3
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C3_GRP,C3_PIN,PIN_OUTPUT);
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	64 e0       	ldi	r22, 0x04	; 4
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C4_GRP,C4_PIN,PIN_OUTPUT);
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	65 e0       	ldi	r22, 0x05	; 5
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_ES_tSetPinDirection>

	/*Cols Initial Vales High*/
	DIO_ES_tSetPinValue(C1_GRP,C1_PIN,PIN_HIGH);
    2932:	83 e0       	ldi	r24, 0x03	; 3
    2934:	62 e0       	ldi	r22, 0x02	; 2
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C2_GRP,C2_PIN,PIN_HIGH);
    293c:	83 e0       	ldi	r24, 0x03	; 3
    293e:	63 e0       	ldi	r22, 0x03	; 3
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C3_GRP,C3_PIN,PIN_HIGH);
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	64 e0       	ldi	r22, 0x04	; 4
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C4_GRP,C4_PIN,PIN_HIGH);
    2950:	83 e0       	ldi	r24, 0x03	; 3
    2952:	65 e0       	ldi	r22, 0x05	; 5
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
	 LOC_ES_tErrorState =ES_OK ;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <KPAD_ES_tGetPressedKey>:


/*Get Pressed Key*/
ES_t KPAD_ES_tGetPressedKey(u8* Copy_u8PressedKey)
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	e9 97       	sbiw	r28, 0x39	; 57
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	9c ab       	std	Y+52, r25	; 0x34
    297e:	8b ab       	std	Y+51, r24	; 0x33

	ES_t LOC_ES_tErrorState =ES_NOK ;
    2980:	19 8a       	std	Y+17, r1	; 0x11
	    u8 Local_u8RowIter =0;
    2982:	18 8a       	std	Y+16, r1	; 0x10
		u8 Local_u8ColIter =0;
    2984:	1f 86       	std	Y+15, r1	; 0x0f
		u8 Local_u8Value=0xff;
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	8a 8b       	std	Y+18, r24	; 0x12

		u8 Local_u8ColGrp[COL_NUM]={C1_GRP,C2_GRP,C3_GRP,C4_GRP};
    298a:	83 e0       	ldi	r24, 0x03	; 3
    298c:	8b 8b       	std	Y+19, r24	; 0x13
    298e:	83 e0       	ldi	r24, 0x03	; 3
    2990:	8c 8b       	std	Y+20, r24	; 0x14
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	8d 8b       	std	Y+21, r24	; 0x15
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	8e 8b       	std	Y+22, r24	; 0x16
		u8 Local_u8ColPin[COL_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	8f 8b       	std	Y+23, r24	; 0x17
    299e:	83 e0       	ldi	r24, 0x03	; 3
    29a0:	88 8f       	std	Y+24, r24	; 0x18
    29a2:	84 e0       	ldi	r24, 0x04	; 4
    29a4:	89 8f       	std	Y+25, r24	; 0x19
    29a6:	85 e0       	ldi	r24, 0x05	; 5
    29a8:	8a 8f       	std	Y+26, r24	; 0x1a

		u8 Local_u8RowGrp[ROW_NUM]={R1_GRP,R2_GRP,R3_GRP,R4_GRP};
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	8b 8f       	std	Y+27, r24	; 0x1b
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	8c 8f       	std	Y+28, r24	; 0x1c
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	8d 8f       	std	Y+29, r24	; 0x1d
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 Local_u8RowPin[ROW_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
    29be:	85 e0       	ldi	r24, 0x05	; 5
    29c0:	88 a3       	std	Y+32, r24	; 0x20
    29c2:	86 e0       	ldi	r24, 0x06	; 6
    29c4:	89 a3       	std	Y+33, r24	; 0x21
    29c6:	87 e0       	ldi	r24, 0x07	; 7
    29c8:	8a a3       	std	Y+34, r24	; 0x22

           /*Dummy value*/
		*Copy_u8PressedKey = KEYPAD_NOT_PRESSED;
    29ca:	eb a9       	ldd	r30, Y+51	; 0x33
    29cc:	fc a9       	ldd	r31, Y+52	; 0x34
    29ce:	8f ef       	ldi	r24, 0xFF	; 255
    29d0:	80 83       	st	Z, r24
    29d2:	3e c1       	rjmp	.+636    	; 0x2c50 <KPAD_ES_tGetPressedKey+0x2e8>

		for(; Local_u8ColIter < COL_NUM; Local_u8ColIter++)
		{
			/*Active Column [i]*/
			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
    29d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	ce 01       	movw	r24, r28
    29dc:	43 96       	adiw	r24, 0x13	; 19
    29de:	fc 01       	movw	r30, r24
    29e0:	e2 0f       	add	r30, r18
    29e2:	f3 1f       	adc	r31, r19
    29e4:	40 81       	ld	r20, Z
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	ce 01       	movw	r24, r28
    29ee:	47 96       	adiw	r24, 0x17	; 23
    29f0:	fc 01       	movw	r30, r24
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    29f6:	90 81       	ld	r25, Z
    29f8:	84 2f       	mov	r24, r20
    29fa:	69 2f       	mov	r22, r25
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
					Local_u8ColPin[Local_u8ColIter], PIN_LOW);

			for (Local_u8RowIter=0;Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    2a02:	18 8a       	std	Y+16, r1	; 0x10
    2a04:	07 c1       	rjmp	.+526    	; 0x2c14 <KPAD_ES_tGetPressedKey+0x2ac>
			{
				DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    2a06:	88 89       	ldd	r24, Y+16	; 0x10
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	4b 96       	adiw	r24, 0x1b	; 27
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	40 81       	ld	r20, Z
    2a18:	88 89       	ldd	r24, Y+16	; 0x10
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	ce 01       	movw	r24, r28
    2a20:	4f 96       	adiw	r24, 0x1f	; 31
    2a22:	fc 01       	movw	r30, r24
    2a24:	e2 0f       	add	r30, r18
    2a26:	f3 1f       	adc	r31, r19
    2a28:	90 81       	ld	r25, Z
    2a2a:	9e 01       	movw	r18, r28
    2a2c:	2e 5e       	subi	r18, 0xEE	; 238
    2a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a30:	84 2f       	mov	r24, r20
    2a32:	69 2f       	mov	r22, r25
    2a34:	a9 01       	movw	r20, r18
    2a36:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tGetPinValue>
						Local_u8RowPin[Local_u8RowIter], &Local_u8Value);

				if ( ! Local_u8Value)
    2a3a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a3c:	88 23       	and	r24, r24
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <KPAD_ES_tGetPressedKey+0xda>
    2a40:	e6 c0       	rjmp	.+460    	; 0x2c0e <KPAD_ES_tGetPressedKey+0x2a6>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e2       	ldi	r26, 0x20	; 32
    2a48:	b1 e4       	ldi	r27, 0x41	; 65
    2a4a:	8b 87       	std	Y+11, r24	; 0x0b
    2a4c:	9c 87       	std	Y+12, r25	; 0x0c
    2a4e:	ad 87       	std	Y+13, r26	; 0x0d
    2a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a ef       	ldi	r20, 0xFA	; 250
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8f 83       	std	Y+7, r24	; 0x07
    2a6c:	98 87       	std	Y+8, r25	; 0x08
    2a6e:	a9 87       	std	Y+9, r26	; 0x09
    2a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <KPAD_ES_tGetPressedKey+0x12c>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <KPAD_ES_tGetPressedKey+0x1aa>
	else if (__tmp > 65535)
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <KPAD_ES_tGetPressedKey+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9e 83       	std	Y+6, r25	; 0x06
    2ad2:	8d 83       	std	Y+5, r24	; 0x05
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <KPAD_ES_tGetPressedKey+0x18c>
    2ad6:	88 ec       	ldi	r24, 0xC8	; 200
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <KPAD_ES_tGetPressedKey+0x17a>
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <KPAD_ES_tGetPressedKey+0x16e>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <KPAD_ES_tGetPressedKey+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <KPAD_ES_tGetPressedKey+0x1b6>
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);// to avoid bouncing
					DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    2b26:	88 89       	ldd	r24, Y+16	; 0x10
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	4b 96       	adiw	r24, 0x1b	; 27
    2b30:	fc 01       	movw	r30, r24
    2b32:	e2 0f       	add	r30, r18
    2b34:	f3 1f       	adc	r31, r19
    2b36:	40 81       	ld	r20, Z
    2b38:	88 89       	ldd	r24, Y+16	; 0x10
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	ce 01       	movw	r24, r28
    2b40:	4f 96       	adiw	r24, 0x1f	; 31
    2b42:	fc 01       	movw	r30, r24
    2b44:	e2 0f       	add	r30, r18
    2b46:	f3 1f       	adc	r31, r19
    2b48:	90 81       	ld	r25, Z
    2b4a:	9e 01       	movw	r18, r28
    2b4c:	2e 5e       	subi	r18, 0xEE	; 238
    2b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b50:	84 2f       	mov	r24, r20
    2b52:	69 2f       	mov	r22, r25
    2b54:	a9 01       	movw	r20, r18
    2b56:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tGetPinValue>
										Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
					if ( ! Local_u8Value)
    2b5a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b5c:	88 23       	and	r24, r24
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <KPAD_ES_tGetPressedKey+0x1fa>
    2b60:	56 c0       	rjmp	.+172    	; 0x2c0e <KPAD_ES_tGetPressedKey+0x2a6>
    2b62:	1a c0       	rjmp	.+52     	; 0x2b98 <KPAD_ES_tGetPressedKey+0x230>
					{
						//prevent holding press
						while ( ! Local_u8Value)
							DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    2b64:	88 89       	ldd	r24, Y+16	; 0x10
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	4b 96       	adiw	r24, 0x1b	; 27
    2b6e:	fc 01       	movw	r30, r24
    2b70:	e2 0f       	add	r30, r18
    2b72:	f3 1f       	adc	r31, r19
    2b74:	40 81       	ld	r20, Z
    2b76:	88 89       	ldd	r24, Y+16	; 0x10
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	4f 96       	adiw	r24, 0x1f	; 31
    2b80:	fc 01       	movw	r30, r24
    2b82:	e2 0f       	add	r30, r18
    2b84:	f3 1f       	adc	r31, r19
    2b86:	90 81       	ld	r25, Z
    2b88:	9e 01       	movw	r18, r28
    2b8a:	2e 5e       	subi	r18, 0xEE	; 238
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	84 2f       	mov	r24, r20
    2b90:	69 2f       	mov	r22, r25
    2b92:	a9 01       	movw	r20, r18
    2b94:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_ES_tGetPinValue>
					DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
										Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
					if ( ! Local_u8Value)
					{
						//prevent holding press
						while ( ! Local_u8Value)
    2b98:	8a 89       	ldd	r24, Y+18	; 0x12
    2b9a:	88 23       	and	r24, r24
    2b9c:	19 f3       	breq	.-58     	; 0x2b64 <KPAD_ES_tGetPressedKey+0x1fc>
							DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
									Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
						//return switch value
						u8 Local_Au8KeyValues[ROW_NUM][COL_NUM]=KEY_VALUES;
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	83 96       	adiw	r24, 0x23	; 35
    2ba2:	9e ab       	std	Y+54, r25	; 0x36
    2ba4:	8d ab       	std	Y+53, r24	; 0x35
    2ba6:	ee e8       	ldi	r30, 0x8E	; 142
    2ba8:	f1 e0       	ldi	r31, 0x01	; 1
    2baa:	f8 af       	std	Y+56, r31	; 0x38
    2bac:	ef ab       	std	Y+55, r30	; 0x37
    2bae:	f0 e1       	ldi	r31, 0x10	; 16
    2bb0:	f9 af       	std	Y+57, r31	; 0x39
    2bb2:	ef a9       	ldd	r30, Y+55	; 0x37
    2bb4:	f8 ad       	ldd	r31, Y+56	; 0x38
    2bb6:	00 80       	ld	r0, Z
    2bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bba:	98 ad       	ldd	r25, Y+56	; 0x38
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	98 af       	std	Y+56, r25	; 0x38
    2bc0:	8f ab       	std	Y+55, r24	; 0x37
    2bc2:	ed a9       	ldd	r30, Y+53	; 0x35
    2bc4:	fe a9       	ldd	r31, Y+54	; 0x36
    2bc6:	00 82       	st	Z, r0
    2bc8:	8d a9       	ldd	r24, Y+53	; 0x35
    2bca:	9e a9       	ldd	r25, Y+54	; 0x36
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	9e ab       	std	Y+54, r25	; 0x36
    2bd0:	8d ab       	std	Y+53, r24	; 0x35
    2bd2:	99 ad       	ldd	r25, Y+57	; 0x39
    2bd4:	91 50       	subi	r25, 0x01	; 1
    2bd6:	99 af       	std	Y+57, r25	; 0x39
    2bd8:	e9 ad       	ldd	r30, Y+57	; 0x39
    2bda:	ee 23       	and	r30, r30
    2bdc:	51 f7       	brne	.-44     	; 0x2bb2 <KPAD_ES_tGetPressedKey+0x24a>
						*Copy_u8PressedKey=Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    2bde:	88 89       	ldd	r24, Y+16	; 0x10
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be6:	48 2f       	mov	r20, r24
    2be8:	50 e0       	ldi	r21, 0x00	; 0
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	22 0f       	add	r18, r18
    2bf0:	33 1f       	adc	r19, r19
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	82 0f       	add	r24, r18
    2bf8:	93 1f       	adc	r25, r19
    2bfa:	84 0f       	add	r24, r20
    2bfc:	95 1f       	adc	r25, r21
    2bfe:	fc 01       	movw	r30, r24
    2c00:	b2 96       	adiw	r30, 0x22	; 34
    2c02:	80 81       	ld	r24, Z
    2c04:	eb a9       	ldd	r30, Y+51	; 0x33
    2c06:	fc a9       	ldd	r31, Y+52	; 0x34
    2c08:	80 83       	st	Z, r24
						 LOC_ES_tErrorState =ES_OK ;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	89 8b       	std	Y+17, r24	; 0x11
		{
			/*Active Column [i]*/
			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
					Local_u8ColPin[Local_u8ColIter], PIN_LOW);

			for (Local_u8RowIter=0;Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    2c0e:	88 89       	ldd	r24, Y+16	; 0x10
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	88 8b       	std	Y+16, r24	; 0x10
    2c14:	88 89       	ldd	r24, Y+16	; 0x10
    2c16:	84 30       	cpi	r24, 0x04	; 4
    2c18:	08 f4       	brcc	.+2      	; 0x2c1c <KPAD_ES_tGetPressedKey+0x2b4>
    2c1a:	f5 ce       	rjmp	.-534    	; 0x2a06 <KPAD_ES_tGetPressedKey+0x9e>
						 LOC_ES_tErrorState =ES_OK ;
					}
				}
			}

			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
    2c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	ce 01       	movw	r24, r28
    2c24:	43 96       	adiw	r24, 0x13	; 19
    2c26:	fc 01       	movw	r30, r24
    2c28:	e2 0f       	add	r30, r18
    2c2a:	f3 1f       	adc	r31, r19
    2c2c:	40 81       	ld	r20, Z
    2c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	ce 01       	movw	r24, r28
    2c36:	47 96       	adiw	r24, 0x17	; 23
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	90 81       	ld	r25, Z
    2c40:	84 2f       	mov	r24, r20
    2c42:	69 2f       	mov	r22, r25
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_ES_tSetPinValue>
		u8 Local_u8RowPin[ROW_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};

           /*Dummy value*/
		*Copy_u8PressedKey = KEYPAD_NOT_PRESSED;

		for(; Local_u8ColIter < COL_NUM; Local_u8ColIter++)
    2c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c4c:	8f 5f       	subi	r24, 0xFF	; 255
    2c4e:	8f 87       	std	Y+15, r24	; 0x0f
    2c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c52:	84 30       	cpi	r24, 0x04	; 4
    2c54:	08 f4       	brcc	.+2      	; 0x2c58 <KPAD_ES_tGetPressedKey+0x2f0>
    2c56:	be ce       	rjmp	.-644    	; 0x29d4 <KPAD_ES_tGetPressedKey+0x6c>
			}

			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
					Local_u8ColPin[Local_u8ColIter], PIN_HIGH);
		}
	return LOC_ES_tErrorState;
    2c58:	89 89       	ldd	r24, Y+17	; 0x11

}
    2c5a:	e9 96       	adiw	r28, 0x39	; 57
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <main>:
/*Delay Function*/
#include<util/delay.h>


int main(void)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	aa 97       	sbiw	r28, 0x2a	; 42
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61

	MOTOR_293D_ES_tInit();
    2c80:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MOTOR_293D_ES_tInit>
	while(1)
	{
        MOTOR_293D_ES_tStartWithDirection(CW,FULL_SPEED);
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	61 e0       	ldi	r22, 0x01	; 1
    2c88:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <MOTOR_293D_ES_tStartWithDirection>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	aa e7       	ldi	r26, 0x7A	; 122
    2c92:	b4 e4       	ldi	r27, 0x44	; 68
    2c94:	8f a3       	std	Y+39, r24	; 0x27
    2c96:	98 a7       	std	Y+40, r25	; 0x28
    2c98:	a9 a7       	std	Y+41, r26	; 0x29
    2c9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8b a3       	std	Y+35, r24	; 0x23
    2cb6:	9c a3       	std	Y+36, r25	; 0x24
    2cb8:	ad a3       	std	Y+37, r26	; 0x25
    2cba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <main+0x72>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9a a3       	std	Y+34, r25	; 0x22
    2cda:	89 a3       	std	Y+33, r24	; 0x21
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <main+0xf0>
	else if (__tmp > 65535)
    2cde:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9a a3       	std	Y+34, r25	; 0x22
    2d1c:	89 a3       	std	Y+33, r24	; 0x21
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <main+0xd2>
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	98 a3       	std	Y+32, r25	; 0x20
    2d26:	8f 8f       	std	Y+31, r24	; 0x1f
    2d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <main+0xc0>
    2d30:	98 a3       	std	Y+32, r25	; 0x20
    2d32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	89 a1       	ldd	r24, Y+33	; 0x21
    2d36:	9a a1       	ldd	r25, Y+34	; 0x22
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9a a3       	std	Y+34, r25	; 0x22
    2d3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d40:	9a a1       	ldd	r25, Y+34	; 0x22
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <main+0xb4>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
    2d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d60:	9e 8f       	std	Y+30, r25	; 0x1e
    2d62:	8d 8f       	std	Y+29, r24	; 0x1d
    2d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <main+0xfc>
    2d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d6e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		 MOTOR_293D_ES_tStartWithDirection(CCW,FULL_SPEED);
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <MOTOR_293D_ES_tStartWithDirection>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	aa e7       	ldi	r26, 0x7A	; 122
    2d7e:	b4 e4       	ldi	r27, 0x44	; 68
    2d80:	89 8f       	std	Y+25, r24	; 0x19
    2d82:	9a 8f       	std	Y+26, r25	; 0x1a
    2d84:	ab 8f       	std	Y+27, r26	; 0x1b
    2d86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	4a ef       	ldi	r20, 0xFA	; 250
    2d96:	54 e4       	ldi	r21, 0x44	; 68
    2d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	8d 8b       	std	Y+21, r24	; 0x15
    2da2:	9e 8b       	std	Y+22, r25	; 0x16
    2da4:	af 8b       	std	Y+23, r26	; 0x17
    2da6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2da8:	6d 89       	ldd	r22, Y+21	; 0x15
    2daa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dac:	8f 89       	ldd	r24, Y+23	; 0x17
    2dae:	98 8d       	ldd	r25, Y+24	; 0x18
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e8       	ldi	r20, 0x80	; 128
    2db6:	5f e3       	ldi	r21, 0x3F	; 63
    2db8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <main+0x15e>
		__ticks = 1;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9c 8b       	std	Y+20, r25	; 0x14
    2dc6:	8b 8b       	std	Y+19, r24	; 0x13
    2dc8:	3f c0       	rjmp	.+126    	; 0x2e48 <main+0x1dc>
	else if (__tmp > 65535)
    2dca:	6d 89       	ldd	r22, Y+21	; 0x15
    2dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dce:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f e7       	ldi	r20, 0x7F	; 127
    2dd8:	57 e4       	ldi	r21, 0x47	; 71
    2dda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	4c f5       	brge	.+82     	; 0x2e34 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de2:	69 8d       	ldd	r22, Y+25	; 0x19
    2de4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	51 e4       	ldi	r21, 0x41	; 65
    2df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9c 8b       	std	Y+20, r25	; 0x14
    2e08:	8b 8b       	std	Y+19, r24	; 0x13
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <main+0x1be>
    2e0c:	88 ec       	ldi	r24, 0xC8	; 200
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9a 8b       	std	Y+18, r25	; 0x12
    2e12:	89 8b       	std	Y+17, r24	; 0x11
    2e14:	89 89       	ldd	r24, Y+17	; 0x11
    2e16:	9a 89       	ldd	r25, Y+18	; 0x12
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <main+0x1ac>
    2e1c:	9a 8b       	std	Y+18, r25	; 0x12
    2e1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	8b 89       	ldd	r24, Y+19	; 0x13
    2e22:	9c 89       	ldd	r25, Y+20	; 0x14
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	9c 8b       	std	Y+20, r25	; 0x14
    2e28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <main+0x1a0>
    2e32:	14 c0       	rjmp	.+40     	; 0x2e5c <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e34:	6d 89       	ldd	r22, Y+21	; 0x15
    2e36:	7e 89       	ldd	r23, Y+22	; 0x16
    2e38:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
    2e48:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4c:	98 8b       	std	Y+16, r25	; 0x10
    2e4e:	8f 87       	std	Y+15, r24	; 0x0f
    2e50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e52:	98 89       	ldd	r25, Y+16	; 0x10
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <main+0x1e8>
    2e58:	98 8b       	std	Y+16, r25	; 0x10
    2e5a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
        MOTOR_293D_ES_tStop();
    2e5c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <MOTOR_293D_ES_tStop>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	aa ef       	ldi	r26, 0xFA	; 250
    2e66:	b4 e4       	ldi	r27, 0x44	; 68
    2e68:	8b 87       	std	Y+11, r24	; 0x0b
    2e6a:	9c 87       	std	Y+12, r25	; 0x0c
    2e6c:	ad 87       	std	Y+13, r26	; 0x0d
    2e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a ef       	ldi	r20, 0xFA	; 250
    2e7e:	54 e4       	ldi	r21, 0x44	; 68
    2e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	8f 83       	std	Y+7, r24	; 0x07
    2e8a:	98 87       	std	Y+8, r25	; 0x08
    2e8c:	a9 87       	std	Y+9, r26	; 0x09
    2e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e90:	6f 81       	ldd	r22, Y+7	; 0x07
    2e92:	78 85       	ldd	r23, Y+8	; 0x08
    2e94:	89 85       	ldd	r24, Y+9	; 0x09
    2e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e8       	ldi	r20, 0x80	; 128
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <main+0x246>
		__ticks = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
    2eb0:	3f c0       	rjmp	.+126    	; 0x2f30 <main+0x2c4>
	else if (__tmp > 65535)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	57 e4       	ldi	r21, 0x47	; 71
    2ec2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	4c f5       	brge	.+82     	; 0x2f1c <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e2       	ldi	r20, 0x20	; 32
    2ed8:	51 e4       	ldi	r21, 0x41	; 65
    2eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <main+0x2a6>
    2ef4:	88 ec       	ldi	r24, 0xC8	; 200
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	9c 83       	std	Y+4, r25	; 0x04
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <main+0x294>
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	69 f7       	brne	.-38     	; 0x2ef4 <main+0x288>
    2f1a:	b4 ce       	rjmp	.-664    	; 0x2c84 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <main+0x2d0>
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	9f ce       	rjmp	.-706    	; 0x2c84 <main+0x18>

00002f46 <__mulsi3>:
    2f46:	62 9f       	mul	r22, r18
    2f48:	d0 01       	movw	r26, r0
    2f4a:	73 9f       	mul	r23, r19
    2f4c:	f0 01       	movw	r30, r0
    2f4e:	82 9f       	mul	r24, r18
    2f50:	e0 0d       	add	r30, r0
    2f52:	f1 1d       	adc	r31, r1
    2f54:	64 9f       	mul	r22, r20
    2f56:	e0 0d       	add	r30, r0
    2f58:	f1 1d       	adc	r31, r1
    2f5a:	92 9f       	mul	r25, r18
    2f5c:	f0 0d       	add	r31, r0
    2f5e:	83 9f       	mul	r24, r19
    2f60:	f0 0d       	add	r31, r0
    2f62:	74 9f       	mul	r23, r20
    2f64:	f0 0d       	add	r31, r0
    2f66:	65 9f       	mul	r22, r21
    2f68:	f0 0d       	add	r31, r0
    2f6a:	99 27       	eor	r25, r25
    2f6c:	72 9f       	mul	r23, r18
    2f6e:	b0 0d       	add	r27, r0
    2f70:	e1 1d       	adc	r30, r1
    2f72:	f9 1f       	adc	r31, r25
    2f74:	63 9f       	mul	r22, r19
    2f76:	b0 0d       	add	r27, r0
    2f78:	e1 1d       	adc	r30, r1
    2f7a:	f9 1f       	adc	r31, r25
    2f7c:	bd 01       	movw	r22, r26
    2f7e:	cf 01       	movw	r24, r30
    2f80:	11 24       	eor	r1, r1
    2f82:	08 95       	ret

00002f84 <__udivmodsi4>:
    2f84:	a1 e2       	ldi	r26, 0x21	; 33
    2f86:	1a 2e       	mov	r1, r26
    2f88:	aa 1b       	sub	r26, r26
    2f8a:	bb 1b       	sub	r27, r27
    2f8c:	fd 01       	movw	r30, r26
    2f8e:	0d c0       	rjmp	.+26     	; 0x2faa <__udivmodsi4_ep>

00002f90 <__udivmodsi4_loop>:
    2f90:	aa 1f       	adc	r26, r26
    2f92:	bb 1f       	adc	r27, r27
    2f94:	ee 1f       	adc	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	a2 17       	cp	r26, r18
    2f9a:	b3 07       	cpc	r27, r19
    2f9c:	e4 07       	cpc	r30, r20
    2f9e:	f5 07       	cpc	r31, r21
    2fa0:	20 f0       	brcs	.+8      	; 0x2faa <__udivmodsi4_ep>
    2fa2:	a2 1b       	sub	r26, r18
    2fa4:	b3 0b       	sbc	r27, r19
    2fa6:	e4 0b       	sbc	r30, r20
    2fa8:	f5 0b       	sbc	r31, r21

00002faa <__udivmodsi4_ep>:
    2faa:	66 1f       	adc	r22, r22
    2fac:	77 1f       	adc	r23, r23
    2fae:	88 1f       	adc	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	1a 94       	dec	r1
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <__udivmodsi4_loop>
    2fb6:	60 95       	com	r22
    2fb8:	70 95       	com	r23
    2fba:	80 95       	com	r24
    2fbc:	90 95       	com	r25
    2fbe:	9b 01       	movw	r18, r22
    2fc0:	ac 01       	movw	r20, r24
    2fc2:	bd 01       	movw	r22, r26
    2fc4:	cf 01       	movw	r24, r30
    2fc6:	08 95       	ret

00002fc8 <__divmodsi4>:
    2fc8:	97 fb       	bst	r25, 7
    2fca:	09 2e       	mov	r0, r25
    2fcc:	05 26       	eor	r0, r21
    2fce:	0e d0       	rcall	.+28     	; 0x2fec <__divmodsi4_neg1>
    2fd0:	57 fd       	sbrc	r21, 7
    2fd2:	04 d0       	rcall	.+8      	; 0x2fdc <__divmodsi4_neg2>
    2fd4:	d7 df       	rcall	.-82     	; 0x2f84 <__udivmodsi4>
    2fd6:	0a d0       	rcall	.+20     	; 0x2fec <__divmodsi4_neg1>
    2fd8:	00 1c       	adc	r0, r0
    2fda:	38 f4       	brcc	.+14     	; 0x2fea <__divmodsi4_exit>

00002fdc <__divmodsi4_neg2>:
    2fdc:	50 95       	com	r21
    2fde:	40 95       	com	r20
    2fe0:	30 95       	com	r19
    2fe2:	21 95       	neg	r18
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe8:	5f 4f       	sbci	r21, 0xFF	; 255

00002fea <__divmodsi4_exit>:
    2fea:	08 95       	ret

00002fec <__divmodsi4_neg1>:
    2fec:	f6 f7       	brtc	.-4      	; 0x2fea <__divmodsi4_exit>
    2fee:	90 95       	com	r25
    2ff0:	80 95       	com	r24
    2ff2:	70 95       	com	r23
    2ff4:	61 95       	neg	r22
    2ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    2ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffc:	08 95       	ret

00002ffe <__prologue_saves__>:
    2ffe:	2f 92       	push	r2
    3000:	3f 92       	push	r3
    3002:	4f 92       	push	r4
    3004:	5f 92       	push	r5
    3006:	6f 92       	push	r6
    3008:	7f 92       	push	r7
    300a:	8f 92       	push	r8
    300c:	9f 92       	push	r9
    300e:	af 92       	push	r10
    3010:	bf 92       	push	r11
    3012:	cf 92       	push	r12
    3014:	df 92       	push	r13
    3016:	ef 92       	push	r14
    3018:	ff 92       	push	r15
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	ca 1b       	sub	r28, r26
    3028:	db 0b       	sbc	r29, r27
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	09 94       	ijmp

00003036 <__epilogue_restores__>:
    3036:	2a 88       	ldd	r2, Y+18	; 0x12
    3038:	39 88       	ldd	r3, Y+17	; 0x11
    303a:	48 88       	ldd	r4, Y+16	; 0x10
    303c:	5f 84       	ldd	r5, Y+15	; 0x0f
    303e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3040:	7d 84       	ldd	r7, Y+13	; 0x0d
    3042:	8c 84       	ldd	r8, Y+12	; 0x0c
    3044:	9b 84       	ldd	r9, Y+11	; 0x0b
    3046:	aa 84       	ldd	r10, Y+10	; 0x0a
    3048:	b9 84       	ldd	r11, Y+9	; 0x09
    304a:	c8 84       	ldd	r12, Y+8	; 0x08
    304c:	df 80       	ldd	r13, Y+7	; 0x07
    304e:	ee 80       	ldd	r14, Y+6	; 0x06
    3050:	fd 80       	ldd	r15, Y+5	; 0x05
    3052:	0c 81       	ldd	r16, Y+4	; 0x04
    3054:	1b 81       	ldd	r17, Y+3	; 0x03
    3056:	aa 81       	ldd	r26, Y+2	; 0x02
    3058:	b9 81       	ldd	r27, Y+1	; 0x01
    305a:	ce 0f       	add	r28, r30
    305c:	d1 1d       	adc	r29, r1
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	ed 01       	movw	r28, r26
    306a:	08 95       	ret

0000306c <_exit>:
    306c:	f8 94       	cli

0000306e <__stop_program>:
    306e:	ff cf       	rjmp	.-2      	; 0x306e <__stop_program>
