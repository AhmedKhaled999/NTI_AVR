
NTI_AVR_LAB12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000356c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  0000356c  00003600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001b0  008001b0  00003750  2**0
                  ALLOC
  3 .stab         00003e7c  00000000  00000000  00003750  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017c4  00000000  00000000  000075cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000090e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c262  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_1>
       8:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_2>
       c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 19 	call	0x32ca	; 0x32ca <main>
      8a:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 89 1a 	jmp	0x3512	; 0x3512 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e0 59       	subi	r30, 0x90	; 144
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_ES_tInit>:

/*Initialization GIE Module*/

ES_t GIE_ES_tInit(void)

{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	//SREG &=~(1<<7);
    asm("CLI");
     ce2:	f8 94       	cli
	return LOC_ES_tErrorState = ES_OK;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <GIE_ES_tEnable>:

/*Disable GIE */

ES_t GIE_ES_tEnable(void)

{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     cfc:	19 82       	std	Y+1, r1	; 0x01
	//SREG |=(1<<7) ;
    asm("SEI");
     cfe:	78 94       	sei

	return 	LOC_ES_tErrorState = ES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	89 81       	ldd	r24, Y+1	; 0x01
}
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <GIE_ES_tDisable>:


/*Enable GIE*/

ES_t GIE_ES_tDisable(void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62

	       ES_t LOC_ES_tErrorState = ES_NOK;
     d18:	19 82       	std	Y+1, r1	; 0x01
	   	//SREG &=~(1<<7);

	       asm("CLI");
     d1a:	f8 94       	cli
	return LOC_ES_tErrorState = ES_OK;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	89 81       	ldd	r24, Y+1	; 0x01
}
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <EXTI_ES_tInit>:

static  void* EXTI_pvidISRParameter [ 3 ] = {NULL,NULL,NULL};

/*initialization Function*/
ES_t EXTI_ES_tInit(EXTI_t * Copy_PTArrConfiguration)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	2c 97       	sbiw	r28, 0x0c	; 12
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	9c 83       	std	Y+4, r25	; 0x04
     d40:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK;
     d42:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8ExtiIter=0;
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	6b c1       	rjmp	.+726    	; 0x101e <EXTI_ES_tInit+0x2f4>
	for ( ; Local_u8ExtiIter<G_u8EXTI_NUM ; Local_u8ExtiIter++)
	{
		switch(Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Num)
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	c9 01       	movw	r24, r18
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	28 0f       	add	r18, r24
     d56:	39 1f       	adc	r19, r25
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 87       	std	Y+12, r19	; 0x0c
     d6a:	2b 87       	std	Y+11, r18	; 0x0b
     d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <EXTI_ES_tInit+0x4e>
     d76:	81 c0       	rjmp	.+258    	; 0xe7a <EXTI_ES_tInit+0x150>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <EXTI_ES_tInit+0x5a>
     d82:	f1 c0       	rjmp	.+482    	; 0xf66 <EXTI_ES_tInit+0x23c>
     d84:	8b 85       	ldd	r24, Y+11	; 0x0b
     d86:	9c 85       	ldd	r25, Y+12	; 0x0c
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f0       	breq	.+2      	; 0xd8e <EXTI_ES_tInit+0x64>
     d8c:	45 c1       	rjmp	.+650    	; 0x1018 <EXTI_ES_tInit+0x2ee>
		{
		case EXTI0:
			MCUCR &=~(3<<0);
     d8e:	a5 e5       	ldi	r26, 0x55	; 85
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e5       	ldi	r30, 0x55	; 85
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8c 7f       	andi	r24, 0xFC	; 252
     d9a:	8c 93       	st	X, r24
			switch (Copy_PTArrConfiguration[Local_u8ExtiIter].SenseLevel)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	c9 01       	movw	r24, r18
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	28 0f       	add	r18, r24
     daa:	39 1f       	adc	r19, r25
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	fc 01       	movw	r30, r24
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 81       	ld	r24, Z
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3a 87       	std	Y+10, r19	; 0x0a
     dbe:	29 87       	std	Y+9, r18	; 0x09
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	81 f0       	breq	.+32     	; 0xdea <EXTI_ES_tInit+0xc0>
     dca:	29 85       	ldd	r18, Y+9	; 0x09
     dcc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	14 f1       	brlt	.+68     	; 0xe18 <EXTI_ES_tInit+0xee>
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	91 05       	cpc	r25, r1
     ddc:	71 f0       	breq	.+28     	; 0xdfa <EXTI_ES_tInit+0xd0>
     dde:	29 85       	ldd	r18, Y+9	; 0x09
     de0:	3a 85       	ldd	r19, Y+10	; 0x0a
     de2:	23 30       	cpi	r18, 0x03	; 3
     de4:	31 05       	cpc	r19, r1
     de6:	89 f0       	breq	.+34     	; 0xe0a <EXTI_ES_tInit+0xe0>
     de8:	17 c0       	rjmp	.+46     	; 0xe18 <EXTI_ES_tInit+0xee>
			case LOW_LEVEL:

				break;

			case ANY_LOGICAL:
				MCUCR |= (1<<0);
     dea:	a5 e5       	ldi	r26, 0x55	; 85
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e5       	ldi	r30, 0x55	; 85
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	8c 93       	st	X, r24
     df8:	0f c0       	rjmp	.+30     	; 0xe18 <EXTI_ES_tInit+0xee>
				break;

			case FALLING_EDGE:
				MCUCR |= (2<<0);
     dfa:	a5 e5       	ldi	r26, 0x55	; 85
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e5       	ldi	r30, 0x55	; 85
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	8c 93       	st	X, r24
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <EXTI_ES_tInit+0xee>
				break;

			case RISING_EDGE:
				MCUCR |= (3<<0);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	83 60       	ori	r24, 0x03	; 3
     e16:	8c 93       	st	X, r24
				break;
			}
			if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == ENABLE)
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	c9 01       	movw	r24, r18
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	28 0f       	add	r18, r24
     e26:	39 1f       	adc	r19, r25
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	fc 01       	movw	r30, r24
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	81 81       	ldd	r24, Z+1	; 0x01
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	41 f4       	brne	.+16     	; 0xe48 <EXTI_ES_tInit+0x11e>
			{
				GICR |= (1<<6);
     e38:	ab e5       	ldi	r26, 0x5B	; 91
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	eb e5       	ldi	r30, 0x5B	; 91
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 64       	ori	r24, 0x40	; 64
     e44:	8c 93       	st	X, r24
     e46:	e8 c0       	rjmp	.+464    	; 0x1018 <EXTI_ES_tInit+0x2ee>
			}
			else if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == DISABLE)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	c9 01       	movw	r24, r18
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	28 0f       	add	r18, r24
     e56:	39 1f       	adc	r19, r25
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	fc 01       	movw	r30, r24
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	09 f0       	breq	.+2      	; 0xe6a <EXTI_ES_tInit+0x140>
     e68:	d7 c0       	rjmp	.+430    	; 0x1018 <EXTI_ES_tInit+0x2ee>
			{
				GICR &=~(1<<6);
     e6a:	ab e5       	ldi	r26, 0x5B	; 91
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e5       	ldi	r30, 0x5B	; 91
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7b       	andi	r24, 0xBF	; 191
     e76:	8c 93       	st	X, r24
     e78:	cf c0       	rjmp	.+414    	; 0x1018 <EXTI_ES_tInit+0x2ee>
			}
			break;

			case EXTI1:
				MCUCR &=~(3<<2);
     e7a:	a5 e5       	ldi	r26, 0x55	; 85
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e5       	ldi	r30, 0x55	; 85
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	83 7f       	andi	r24, 0xF3	; 243
     e86:	8c 93       	st	X, r24
				switch (Copy_PTArrConfiguration[Local_u8ExtiIter].SenseLevel)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	c9 01       	movw	r24, r18
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	28 0f       	add	r18, r24
     e96:	39 1f       	adc	r19, r25
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	80 81       	ld	r24, Z
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	38 87       	std	Y+8, r19	; 0x08
     eaa:	2f 83       	std	Y+7, r18	; 0x07
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	81 f0       	breq	.+32     	; 0xed6 <EXTI_ES_tInit+0x1ac>
     eb6:	2f 81       	ldd	r18, Y+7	; 0x07
     eb8:	38 85       	ldd	r19, Y+8	; 0x08
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	14 f1       	brlt	.+68     	; 0xf04 <EXTI_ES_tInit+0x1da>
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	91 05       	cpc	r25, r1
     ec8:	71 f0       	breq	.+28     	; 0xee6 <EXTI_ES_tInit+0x1bc>
     eca:	2f 81       	ldd	r18, Y+7	; 0x07
     ecc:	38 85       	ldd	r19, Y+8	; 0x08
     ece:	23 30       	cpi	r18, 0x03	; 3
     ed0:	31 05       	cpc	r19, r1
     ed2:	89 f0       	breq	.+34     	; 0xef6 <EXTI_ES_tInit+0x1cc>
     ed4:	17 c0       	rjmp	.+46     	; 0xf04 <EXTI_ES_tInit+0x1da>
				case LOW_LEVEL:

					break;

				case ANY_LOGICAL:
					MCUCR |= (1<<2);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	84 60       	ori	r24, 0x04	; 4
     ee2:	8c 93       	st	X, r24
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <EXTI_ES_tInit+0x1da>
					break;

				case FALLING_EDGE:
					MCUCR |= (2<<2);
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 60       	ori	r24, 0x08	; 8
     ef2:	8c 93       	st	X, r24
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <EXTI_ES_tInit+0x1da>
					break;

				case RISING_EDGE:
					MCUCR |= (3<<2);
     ef6:	a5 e5       	ldi	r26, 0x55	; 85
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e5 e5       	ldi	r30, 0x55	; 85
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8c 60       	ori	r24, 0x0C	; 12
     f02:	8c 93       	st	X, r24
					break;
				}
				if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == ENABLE)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	c9 01       	movw	r24, r18
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	28 0f       	add	r18, r24
     f12:	39 1f       	adc	r19, r25
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	fc 01       	movw	r30, r24
     f1a:	e2 0f       	add	r30, r18
     f1c:	f3 1f       	adc	r31, r19
     f1e:	81 81       	ldd	r24, Z+1	; 0x01
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	41 f4       	brne	.+16     	; 0xf34 <EXTI_ES_tInit+0x20a>
				{
					GICR |= (1<<7);
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	eb e5       	ldi	r30, 0x5B	; 91
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	8c 93       	st	X, r24
     f32:	72 c0       	rjmp	.+228    	; 0x1018 <EXTI_ES_tInit+0x2ee>
				}
				else if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == DISABLE)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	c9 01       	movw	r24, r18
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	28 0f       	add	r18, r24
     f42:	39 1f       	adc	r19, r25
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	88 23       	and	r24, r24
     f52:	09 f0       	breq	.+2      	; 0xf56 <EXTI_ES_tInit+0x22c>
     f54:	61 c0       	rjmp	.+194    	; 0x1018 <EXTI_ES_tInit+0x2ee>
				{
					GICR &=~(1<<7);
     f56:	ab e5       	ldi	r26, 0x5B	; 91
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	eb e5       	ldi	r30, 0x5B	; 91
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 77       	andi	r24, 0x7F	; 127
     f62:	8c 93       	st	X, r24
     f64:	59 c0       	rjmp	.+178    	; 0x1018 <EXTI_ES_tInit+0x2ee>
				}

				break;

				case EXTI2:
					MCUCSR &=~(1<<6);
     f66:	a4 e5       	ldi	r26, 0x54	; 84
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e5       	ldi	r30, 0x54	; 84
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8f 7b       	andi	r24, 0xBF	; 191
     f72:	8c 93       	st	X, r24
					switch (Copy_PTArrConfiguration[Local_u8ExtiIter].SenseLevel)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	c9 01       	movw	r24, r18
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	28 0f       	add	r18, r24
     f82:	39 1f       	adc	r19, r25
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	fc 01       	movw	r30, r24
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	80 81       	ld	r24, Z
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3e 83       	std	Y+6, r19	; 0x06
     f96:	2d 83       	std	Y+5, r18	; 0x05
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	91 05       	cpc	r25, r1
     fa0:	61 f0       	breq	.+24     	; 0xfba <EXTI_ES_tInit+0x290>
     fa2:	2d 81       	ldd	r18, Y+5	; 0x05
     fa4:	3e 81       	ldd	r19, Y+6	; 0x06
     fa6:	23 30       	cpi	r18, 0x03	; 3
     fa8:	31 05       	cpc	r19, r1
     faa:	39 f4       	brne	.+14     	; 0xfba <EXTI_ES_tInit+0x290>
					case FALLING_EDGE:

						break;

					case RISING_EDGE:
						MCUCSR |= (1<<6);
     fac:	a4 e5       	ldi	r26, 0x54	; 84
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e5       	ldi	r30, 0x54	; 84
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 64       	ori	r24, 0x40	; 64
     fb8:	8c 93       	st	X, r24
						break;
					}
					if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == ENABLE)
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	c9 01       	movw	r24, r18
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	28 0f       	add	r18, r24
     fc8:	39 1f       	adc	r19, r25
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	41 f4       	brne	.+16     	; 0xfea <EXTI_ES_tInit+0x2c0>
					{
						GICR |= (1<<5);
     fda:	ab e5       	ldi	r26, 0x5B	; 91
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e5       	ldi	r30, 0x5B	; 91
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 62       	ori	r24, 0x20	; 32
     fe6:	8c 93       	st	X, r24
     fe8:	17 c0       	rjmp	.+46     	; 0x1018 <EXTI_ES_tInit+0x2ee>
					}
					else if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == DISABLE)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	c9 01       	movw	r24, r18
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	28 0f       	add	r18, r24
     ff8:	39 1f       	adc	r19, r25
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	fc 01       	movw	r30, r24
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	81 81       	ldd	r24, Z+1	; 0x01
    1006:	88 23       	and	r24, r24
    1008:	39 f4       	brne	.+14     	; 0x1018 <EXTI_ES_tInit+0x2ee>
					{
						GICR &=~(1<<5);
    100a:	ab e5       	ldi	r26, 0x5B	; 91
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	eb e5       	ldi	r30, 0x5B	; 91
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 7d       	andi	r24, 0xDF	; 223
    1016:	8c 93       	st	X, r24
ES_t EXTI_ES_tInit(EXTI_t * Copy_PTArrConfiguration)
{
	ES_t LOC_ES_tErrorState = ES_NOK;

	u8 Local_u8ExtiIter=0;
	for ( ; Local_u8ExtiIter<G_u8EXTI_NUM ; Local_u8ExtiIter++)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	90 91 70 01 	lds	r25, 0x0170
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	89 17       	cp	r24, r25
    1026:	08 f4       	brcc	.+2      	; 0x102a <EXTI_ES_tInit+0x300>
    1028:	8f ce       	rjmp	.-738    	; 0xd48 <EXTI_ES_tInit+0x1e>
					break;
		}
	}


	return LOC_ES_tErrorState = ES_OK;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	8a 83       	std	Y+2, r24	; 0x02
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1030:	2c 96       	adiw	r28, 0x0c	; 12
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <EXTI_ES_tSetSenceLevel>:


/*Set Sense Level*/
ES_t EXTI_ES_tSetSenceLevel(EXTI_t * Copy_PTArrInfo,u8 Copy_u8SenceLevel)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	2c 97       	sbiw	r28, 0x0c	; 12
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK;
    105c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_PTArrInfo->INT_Num)
    105e:	ea 81       	ldd	r30, Y+2	; 0x02
    1060:	fb 81       	ldd	r31, Y+3	; 0x03
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3c 87       	std	Y+12, r19	; 0x0c
    106a:	2b 87       	std	Y+11, r18	; 0x0b
    106c:	8b 85       	ldd	r24, Y+11	; 0x0b
    106e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <EXTI_ES_tSetSenceLevel+0x36>
    1076:	47 c0       	rjmp	.+142    	; 0x1106 <EXTI_ES_tSetSenceLevel+0xc4>
    1078:	2b 85       	ldd	r18, Y+11	; 0x0b
    107a:	3c 85       	ldd	r19, Y+12	; 0x0c
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <EXTI_ES_tSetSenceLevel+0x42>
    1082:	7d c0       	rjmp	.+250    	; 0x117e <EXTI_ES_tSetSenceLevel+0x13c>
    1084:	8b 85       	ldd	r24, Y+11	; 0x0b
    1086:	9c 85       	ldd	r25, Y+12	; 0x0c
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	09 f0       	breq	.+2      	; 0x108e <EXTI_ES_tSetSenceLevel+0x4c>
    108c:	97 c0       	rjmp	.+302    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
	{
	case EXTI0:
		MCUCR &=~(3<<0);
    108e:	a5 e5       	ldi	r26, 0x55	; 85
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e5       	ldi	r30, 0x55	; 85
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8c 7f       	andi	r24, 0xFC	; 252
    109a:	8c 93       	st	X, r24
		switch (Copy_PTArrInfo->SenseLevel)
    109c:	ea 81       	ldd	r30, Y+2	; 0x02
    109e:	fb 81       	ldd	r31, Y+3	; 0x03
    10a0:	80 81       	ld	r24, Z
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3a 87       	std	Y+10, r19	; 0x0a
    10a8:	29 87       	std	Y+9, r18	; 0x09
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	89 f0       	breq	.+34     	; 0x10d6 <EXTI_ES_tSetSenceLevel+0x94>
    10b4:	29 85       	ldd	r18, Y+9	; 0x09
    10b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	0c f4       	brge	.+2      	; 0x10c0 <EXTI_ES_tSetSenceLevel+0x7e>
    10be:	7e c0       	rjmp	.+252    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	91 05       	cpc	r25, r1
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <EXTI_ES_tSetSenceLevel+0xa4>
    10ca:	29 85       	ldd	r18, Y+9	; 0x09
    10cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ce:	23 30       	cpi	r18, 0x03	; 3
    10d0:	31 05       	cpc	r19, r1
    10d2:	89 f0       	breq	.+34     	; 0x10f6 <EXTI_ES_tSetSenceLevel+0xb4>
    10d4:	73 c0       	rjmp	.+230    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
		case LOW_LEVEL:

			break;

		case ANY_LOGICAL:
			MCUCR |= (1<<0);
    10d6:	a5 e5       	ldi	r26, 0x55	; 85
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e5       	ldi	r30, 0x55	; 85
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	8c 93       	st	X, r24
    10e4:	6b c0       	rjmp	.+214    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			break;

		case FALLING_EDGE:
			MCUCR |= (2<<0);
    10e6:	a5 e5       	ldi	r26, 0x55	; 85
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e5       	ldi	r30, 0x55	; 85
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	8c 93       	st	X, r24
    10f4:	63 c0       	rjmp	.+198    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			break;

		case RISING_EDGE:
			MCUCR |= (3<<0);
    10f6:	a5 e5       	ldi	r26, 0x55	; 85
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e5       	ldi	r30, 0x55	; 85
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	83 60       	ori	r24, 0x03	; 3
    1102:	8c 93       	st	X, r24
    1104:	5b c0       	rjmp	.+182    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			break;
		}
		break;
		case EXTI1:
			MCUCR &=~(3<<2);
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	83 7f       	andi	r24, 0xF3	; 243
    1112:	8c 93       	st	X, r24
			switch (Copy_PTArrInfo->SenseLevel)
    1114:	ea 81       	ldd	r30, Y+2	; 0x02
    1116:	fb 81       	ldd	r31, Y+3	; 0x03
    1118:	80 81       	ld	r24, Z
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	38 87       	std	Y+8, r19	; 0x08
    1120:	2f 83       	std	Y+7, r18	; 0x07
    1122:	8f 81       	ldd	r24, Y+7	; 0x07
    1124:	98 85       	ldd	r25, Y+8	; 0x08
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	89 f0       	breq	.+34     	; 0x114e <EXTI_ES_tSetSenceLevel+0x10c>
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
    112e:	38 85       	ldd	r19, Y+8	; 0x08
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	0c f4       	brge	.+2      	; 0x1138 <EXTI_ES_tSetSenceLevel+0xf6>
    1136:	42 c0       	rjmp	.+132    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
    1138:	8f 81       	ldd	r24, Y+7	; 0x07
    113a:	98 85       	ldd	r25, Y+8	; 0x08
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	71 f0       	breq	.+28     	; 0x115e <EXTI_ES_tSetSenceLevel+0x11c>
    1142:	2f 81       	ldd	r18, Y+7	; 0x07
    1144:	38 85       	ldd	r19, Y+8	; 0x08
    1146:	23 30       	cpi	r18, 0x03	; 3
    1148:	31 05       	cpc	r19, r1
    114a:	89 f0       	breq	.+34     	; 0x116e <EXTI_ES_tSetSenceLevel+0x12c>
    114c:	37 c0       	rjmp	.+110    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			case LOW_LEVEL:

				break;

			case ANY_LOGICAL:
				MCUCR |= (1<<2);
    114e:	a5 e5       	ldi	r26, 0x55	; 85
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e5       	ldi	r30, 0x55	; 85
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	8c 93       	st	X, r24
    115c:	2f c0       	rjmp	.+94     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				break;

			case FALLING_EDGE:
				MCUCR |= (2<<2);
    115e:	a5 e5       	ldi	r26, 0x55	; 85
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e5       	ldi	r30, 0x55	; 85
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 60       	ori	r24, 0x08	; 8
    116a:	8c 93       	st	X, r24
    116c:	27 c0       	rjmp	.+78     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				break;

			case RISING_EDGE:
				MCUCR |= (3<<2);
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8c 60       	ori	r24, 0x0C	; 12
    117a:	8c 93       	st	X, r24
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				break;
			}
			break;

			case EXTI2:
				MCUCSR &=~(1<<6);
    117e:	a4 e5       	ldi	r26, 0x54	; 84
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e5       	ldi	r30, 0x54	; 84
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7b       	andi	r24, 0xBF	; 191
    118a:	8c 93       	st	X, r24
				switch (Copy_PTArrInfo->SenseLevel)
    118c:	ea 81       	ldd	r30, Y+2	; 0x02
    118e:	fb 81       	ldd	r31, Y+3	; 0x03
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3e 83       	std	Y+6, r19	; 0x06
    1198:	2d 83       	std	Y+5, r18	; 0x05
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	91 05       	cpc	r25, r1
    11a2:	61 f0       	breq	.+24     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	23 30       	cpi	r18, 0x03	; 3
    11aa:	31 05       	cpc	r19, r1
    11ac:	39 f4       	brne	.+14     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				case FALLING_EDGE:

					break;

				case RISING_EDGE:
					MCUCSR |= (1<<6);
    11ae:	a4 e5       	ldi	r26, 0x54	; 84
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e4 e5       	ldi	r30, 0x54	; 84
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	80 64       	ori	r24, 0x40	; 64
    11ba:	8c 93       	st	X, r24
					break;
				}
				break;
	}
	return LOC_ES_tErrorState = ES_OK;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	2c 96       	adiw	r28, 0x0c	; 12
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <EXTI_ES_tEnableEXTI>:

/*EXTIerrupt Enable*/
ES_t EXTI_ES_tEnableEXTI(EXTI_t * Copy_PTArrInfo)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <EXTI_ES_tEnableEXTI+0x6>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK;
    11e4:	19 82       	std	Y+1, r1	; 0x01
	case EXTI2:
		break;
	}


	return LOC_ES_tErrorState = ES_OK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <EXTI_ES_tDisableEXTI>:



/*EXTIerrupt Disable*/
ES_t EXTI_ES_tDisableEXTI(EXTI_t * Copy_PTArrInfo)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <EXTI_ES_tDisableEXTI+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <EXTI_ES_tDisableEXTI+0x8>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9b 83       	std	Y+3, r25	; 0x03
    1208:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK;
    120a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_PTArrInfo->INT_Num)
    120c:	ea 81       	ldd	r30, Y+2	; 0x02
    120e:	fb 81       	ldd	r31, Y+3	; 0x03
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	21 f1       	breq	.+72     	; 0x126c <EXTI_ES_tDisableEXTI+0x74>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	c9 f1       	breq	.+114    	; 0x12a0 <EXTI_ES_tDisableEXTI+0xa8>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	09 f0       	breq	.+2      	; 0x1238 <EXTI_ES_tDisableEXTI+0x40>
    1236:	4d c0       	rjmp	.+154    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
	{
	case EXTI0:
		if (Copy_PTArrInfo->INT_Mode == ENABLE)
    1238:	ea 81       	ldd	r30, Y+2	; 0x02
    123a:	fb 81       	ldd	r31, Y+3	; 0x03
    123c:	81 81       	ldd	r24, Z+1	; 0x01
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	41 f4       	brne	.+16     	; 0x1252 <EXTI_ES_tDisableEXTI+0x5a>
		{
			GICR |= (1<<6);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	8c 93       	st	X, r24
    1250:	40 c0       	rjmp	.+128    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		else if (Copy_PTArrInfo->INT_Mode == DISABLE)
    1252:	ea 81       	ldd	r30, Y+2	; 0x02
    1254:	fb 81       	ldd	r31, Y+3	; 0x03
    1256:	81 81       	ldd	r24, Z+1	; 0x01
    1258:	88 23       	and	r24, r24
    125a:	d9 f5       	brne	.+118    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		{
			GICR &=~(1<<6);
    125c:	ab e5       	ldi	r26, 0x5B	; 91
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	eb e5       	ldi	r30, 0x5B	; 91
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 7b       	andi	r24, 0xBF	; 191
    1268:	8c 93       	st	X, r24
    126a:	33 c0       	rjmp	.+102    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		break;
	case EXTI1:
		if (Copy_PTArrInfo->INT_Mode == ENABLE)
    126c:	ea 81       	ldd	r30, Y+2	; 0x02
    126e:	fb 81       	ldd	r31, Y+3	; 0x03
    1270:	81 81       	ldd	r24, Z+1	; 0x01
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	41 f4       	brne	.+16     	; 0x1286 <EXTI_ES_tDisableEXTI+0x8e>
		{
			GICR |= (1<<7);
    1276:	ab e5       	ldi	r26, 0x5B	; 91
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	eb e5       	ldi	r30, 0x5B	; 91
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 68       	ori	r24, 0x80	; 128
    1282:	8c 93       	st	X, r24
    1284:	26 c0       	rjmp	.+76     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		else if (Copy_PTArrInfo->INT_Mode == DISABLE)
    1286:	ea 81       	ldd	r30, Y+2	; 0x02
    1288:	fb 81       	ldd	r31, Y+3	; 0x03
    128a:	81 81       	ldd	r24, Z+1	; 0x01
    128c:	88 23       	and	r24, r24
    128e:	09 f5       	brne	.+66     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		{
			GICR &=~(1<<7);
    1290:	ab e5       	ldi	r26, 0x5B	; 91
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	eb e5       	ldi	r30, 0x5B	; 91
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 77       	andi	r24, 0x7F	; 127
    129c:	8c 93       	st	X, r24
    129e:	19 c0       	rjmp	.+50     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		break;
	case EXTI2:
		if (Copy_PTArrInfo->INT_Mode == ENABLE)
    12a0:	ea 81       	ldd	r30, Y+2	; 0x02
    12a2:	fb 81       	ldd	r31, Y+3	; 0x03
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	41 f4       	brne	.+16     	; 0x12ba <EXTI_ES_tDisableEXTI+0xc2>
		{
			GICR |= (1<<5);
    12aa:	ab e5       	ldi	r26, 0x5B	; 91
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e5       	ldi	r30, 0x5B	; 91
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 62       	ori	r24, 0x20	; 32
    12b6:	8c 93       	st	X, r24
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		else if (Copy_PTArrInfo->INT_Mode == DISABLE)
    12ba:	ea 81       	ldd	r30, Y+2	; 0x02
    12bc:	fb 81       	ldd	r31, Y+3	; 0x03
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	88 23       	and	r24, r24
    12c2:	39 f4       	brne	.+14     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		{
			GICR &=~(1<<5);
    12c4:	ab e5       	ldi	r26, 0x5B	; 91
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	eb e5       	ldi	r30, 0x5B	; 91
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7d       	andi	r24, 0xDF	; 223
    12d0:	8c 93       	st	X, r24
		}
		break;
	}
	return LOC_ES_tErrorState = ES_OK;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <EXTI_ES_tCallBack>:

ES_t EXTI_ES_tCallBack(EXTI_t * Copy_PTArrInfo,void(*Copy_pfunAppFun)(void*),void * Copy_PtrVidAppParametrer)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	27 97       	sbiw	r28, 0x07	; 7
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	9b 83       	std	Y+3, r25	; 0x03
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	7d 83       	std	Y+5, r23	; 0x05
    1302:	6c 83       	std	Y+4, r22	; 0x04
    1304:	5f 83       	std	Y+7, r21	; 0x07
    1306:	4e 83       	std	Y+6, r20	; 0x06

	ES_t LOC_ES_tErrorState = ES_NOK;
    1308:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PTArrInfo != NULL && Copy_pfunAppFun != NULL)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	9b 81       	ldd	r25, Y+3	; 0x03
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	01 f1       	breq	.+64     	; 0x1352 <EXTI_ES_tCallBack+0x6a>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	e1 f0       	breq	.+56     	; 0x1352 <EXTI_ES_tCallBack+0x6a>
	{

		EXTI_pfunISRFun[Copy_PTArrInfo->INT_Num] = Copy_pfunAppFun ;
    131a:	ea 81       	ldd	r30, Y+2	; 0x02
    131c:	fb 81       	ldd	r31, Y+3	; 0x03
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	fc 01       	movw	r30, r24
    132a:	e0 55       	subi	r30, 0x50	; 80
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
		EXTI_pvidISRParameter[Copy_PTArrInfo->INT_Num] = Copy_PtrVidAppParametrer;
    1336:	ea 81       	ldd	r30, Y+2	; 0x02
    1338:	fb 81       	ldd	r31, Y+3	; 0x03
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	fc 01       	movw	r30, r24
    1346:	ea 54       	subi	r30, 0x4A	; 74
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	8e 81       	ldd	r24, Y+6	; 0x06
    134c:	9f 81       	ldd	r25, Y+7	; 0x07
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
	}

	return LOC_ES_tErrorState = ES_OK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01

}
    1358:	27 96       	adiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <__vector_1>:
void __vector_3 (void)  __attribute__((signal)) ;



void __vector_1 (void)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun[0] != NULL)
    1394:	80 91 b0 01 	lds	r24, 0x01B0
    1398:	90 91 b1 01 	lds	r25, 0x01B1
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	49 f0       	breq	.+18     	; 0x13b2 <__vector_1+0x48>
	{
		EXTI_pfunISRFun[0] (EXTI_pvidISRParameter[0]);
    13a0:	e0 91 b0 01 	lds	r30, 0x01B0
    13a4:	f0 91 b1 01 	lds	r31, 0x01B1
    13a8:	80 91 b6 01 	lds	r24, 0x01B6
    13ac:	90 91 b7 01 	lds	r25, 0x01B7
    13b0:	09 95       	icall


	}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_2>:
void __vector_2 (void)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun[1] != NULL)
    1402:	80 91 b2 01 	lds	r24, 0x01B2
    1406:	90 91 b3 01 	lds	r25, 0x01B3
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	49 f0       	breq	.+18     	; 0x1420 <__vector_2+0x48>
		{
			EXTI_pfunISRFun[1] (EXTI_pvidISRParameter[1]);
    140e:	e0 91 b2 01 	lds	r30, 0x01B2
    1412:	f0 91 b3 01 	lds	r31, 0x01B3
    1416:	80 91 b8 01 	lds	r24, 0x01B8
    141a:	90 91 b9 01 	lds	r25, 0x01B9
    141e:	09 95       	icall
		}
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_3>:
void __vector_3 (void)
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun[2] != NULL)
    1470:	80 91 b4 01 	lds	r24, 0x01B4
    1474:	90 91 b5 01 	lds	r25, 0x01B5
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	49 f0       	breq	.+18     	; 0x148e <__vector_3+0x48>
		{
			EXTI_pfunISRFun[2] (EXTI_pvidISRParameter[2]);
    147c:	e0 91 b4 01 	lds	r30, 0x01B4
    1480:	f0 91 b5 01 	lds	r31, 0x01B5
    1484:	80 91 ba 01 	lds	r24, 0x01BA
    1488:	90 91 bb 01 	lds	r25, 0x01BB
    148c:	09 95       	icall
		}
}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <DIO_ES_tInit>:
#include"DIO_Private.h"


/*DIO Initialization*/
ES_t DIO_ES_tInit(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
    14be:	19 82       	std	Y+1, r1	; 0x01
	/*Pins Direction according to your Configuration */
	DDRA = CONCAT(PA7_DDR,PA6_DDR,PA5_DDR,PA4_DDR,PA3_DDR,PA2_DDR,PA1_DDR,PA0_DDR);
    14c0:	ea e3       	ldi	r30, 0x3A	; 58
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	10 82       	st	Z, r1
	DDRB = CONCAT(PB7_DDR,PB6_DDR,PB5_DDR,PB4_DDR,PB3_DDR,PB2_DDR,PB1_DDR,PB0_DDR);
    14c6:	e7 e3       	ldi	r30, 0x37	; 55
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
	DDRC = CONCAT(PC7_DDR,PC6_DDR,PC5_DDR,PC4_DDR,PC3_DDR,PC2_DDR,PC1_DDR,PC0_DDR);
    14cc:	e4 e3       	ldi	r30, 0x34	; 52
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8f e2       	ldi	r24, 0x2F	; 47
    14d2:	80 83       	st	Z, r24
	DDRD = CONCAT(PD7_DDR,PD6_DDR,PD5_DDR,PD4_DDR,PD3_DDR,PD2_DDR,PD1_DDR,PD0_DDR);
    14d4:	e1 e3       	ldi	r30, 0x31	; 49
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	10 82       	st	Z, r1

	/*Pins Initial Value according to your configuration */
	PORTA = CONCAT(PA7_PORT,PA6_PORT,PA5_PORT,PA4_PORT,PA3_PORT,PA2_PORT,PA1_PORT,PA0_PORT);
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	10 82       	st	Z, r1
	PORTB = CONCAT(PB7_PORT,PB6_PORT,PB5_PORT,PB4_PORT,PB3_PORT,PB2_PORT,PB1_PORT,PB0_PORT);
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	10 82       	st	Z, r1
	PORTC = CONCAT(PC7_PORT,PC6_PORT,PC5_PORT,PC4_PORT,PC3_PORT,PC2_PORT,PC1_PORT,PC0_PORT);
    14e6:	e5 e3       	ldi	r30, 0x35	; 53
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	10 82       	st	Z, r1
	PORTD = CONCAT(PD7_PORT,PD6_PORT,PD5_PORT,PD4_PORT,PD3_PORT,PD2_PORT,PD1_PORT,PD0_PORT);
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	10 82       	st	Z, r1

#elif PA0_DDR == PIN_INPUT

#endif
	 */
	LOC_ES_tErrorState = ES_OK ;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <DIO_ES_tSetPinDirection>:
/*Set Pin Direction*/
ES_t DIO_ES_tSetPinDirection(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinDirection)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_ES_tSetPinDirection+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_ES_tSetPinDirection+0x8>
    1508:	00 d0       	rcall	.+0      	; 0x150a <DIO_ES_tSetPinDirection+0xa>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	8a 83       	std	Y+2, r24	; 0x02
    1510:	6b 83       	std	Y+3, r22	; 0x03
    1512:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1514:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	48 f0       	brcs	.+18     	; 0x152e <DIO_ES_tSetPinDirection+0x2e>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	30 f0       	brcs	.+12     	; 0x152e <DIO_ES_tSetPinDirection+0x2e>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	18 f0       	brcs	.+6      	; 0x152e <DIO_ES_tSetPinDirection+0x2e>
			Copy_u8PinNumber>PIN7 &&
			Copy_PinDirection>PIN_OUTPUT)
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	d1 c0       	rjmp	.+418    	; 0x16d0 <DIO_ES_tSetPinDirection+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3e 83       	std	Y+6, r19	; 0x06
    1536:	2d 83       	std	Y+5, r18	; 0x05
    1538:	6d 81       	ldd	r22, Y+5	; 0x05
    153a:	7e 81       	ldd	r23, Y+6	; 0x06
    153c:	61 30       	cpi	r22, 0x01	; 1
    153e:	71 05       	cpc	r23, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <DIO_ES_tSetPinDirection+0x44>
    1542:	44 c0       	rjmp	.+136    	; 0x15cc <DIO_ES_tSetPinDirection+0xcc>
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	91 05       	cpc	r25, r1
    154c:	34 f4       	brge	.+12     	; 0x155a <DIO_ES_tSetPinDirection+0x5a>
    154e:	2d 81       	ldd	r18, Y+5	; 0x05
    1550:	3e 81       	ldd	r19, Y+6	; 0x06
    1552:	21 15       	cp	r18, r1
    1554:	31 05       	cpc	r19, r1
    1556:	71 f0       	breq	.+28     	; 0x1574 <DIO_ES_tSetPinDirection+0x74>
    1558:	b9 c0       	rjmp	.+370    	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
    155a:	6d 81       	ldd	r22, Y+5	; 0x05
    155c:	7e 81       	ldd	r23, Y+6	; 0x06
    155e:	62 30       	cpi	r22, 0x02	; 2
    1560:	71 05       	cpc	r23, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <DIO_ES_tSetPinDirection+0x66>
    1564:	5c c0       	rjmp	.+184    	; 0x161e <DIO_ES_tSetPinDirection+0x11e>
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <DIO_ES_tSetPinDirection+0x72>
    1570:	82 c0       	rjmp	.+260    	; 0x1676 <DIO_ES_tSetPinDirection+0x176>
    1572:	ac c0       	rjmp	.+344    	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinDirection==PIN_OUTPUT)
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	a1 f4       	brne	.+40     	; 0x15a2 <DIO_ES_tSetPinDirection+0xa2>
				DDRA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    157a:	aa e3       	ldi	r26, 0x3A	; 58
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ea e3       	ldi	r30, 0x3A	; 58
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_ES_tSetPinDirection+0x98>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_ES_tSetPinDirection+0x94>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	95 c0       	rjmp	.+298    	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    15a2:	aa e3       	ldi	r26, 0x3A	; 58
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_ES_tSetPinDirection+0xc0>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_ES_tSetPinDirection+0xbc>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	80 c0       	rjmp	.+256    	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTB:
			DDRB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    15cc:	a7 e3       	ldi	r26, 0x37	; 55
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e7 e3       	ldi	r30, 0x37	; 55
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_ES_tSetPinDirection+0xe8>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	2a 95       	dec	r18
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_ES_tSetPinDirection+0xe4>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
			DDRB |= (Copy_PinDirection<<Copy_u8PinNumber);
    15f2:	a7 e3       	ldi	r26, 0x37	; 55
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e7 e3       	ldi	r30, 0x37	; 55
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b9 01       	movw	r22, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_ES_tSetPinDirection+0x112>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_ES_tSetPinDirection+0x10e>
    1616:	cb 01       	movw	r24, r22
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	57 c0       	rjmp	.+174    	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinDirection==PIN_OUTPUT)
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	a1 f4       	brne	.+40     	; 0x164c <DIO_ES_tSetPinDirection+0x14c>
				DDRC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1624:	a4 e3       	ldi	r26, 0x34	; 52
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e4 e3       	ldi	r30, 0x34	; 52
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_ES_tSetPinDirection+0x142>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_ES_tSetPinDirection+0x13e>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	40 c0       	rjmp	.+128    	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    164c:	a4 e3       	ldi	r26, 0x34	; 52
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e4 e3       	ldi	r30, 0x34	; 52
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_ES_tSetPinDirection+0x16a>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_ES_tSetPinDirection+0x166>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	2b c0       	rjmp	.+86     	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinDirection==PIN_OUTPUT)
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	a1 f4       	brne	.+40     	; 0x16a4 <DIO_ES_tSetPinDirection+0x1a4>
				DDRD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    167c:	a1 e3       	ldi	r26, 0x31	; 49
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e1 e3       	ldi	r30, 0x31	; 49
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_ES_tSetPinDirection+0x19a>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_ES_tSetPinDirection+0x196>
    169e:	84 2b       	or	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    16a4:	a1 e3       	ldi	r26, 0x31	; 49
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e1 e3       	ldi	r30, 0x31	; 49
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_ES_tSetPinDirection+0x1c2>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_ES_tSetPinDirection+0x1be>
    16c6:	80 95       	com	r24
    16c8:	84 23       	and	r24, r20
    16ca:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d2:	26 96       	adiw	r28, 0x06	; 6
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <DIO_ES_tSetPinValue>:
/*Set Pin Value*/
ES_t DIO_ES_tSetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinValue)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_ES_tSetPinValue+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <DIO_ES_tSetPinValue+0x8>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <DIO_ES_tSetPinValue+0xa>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	8a 83       	std	Y+2, r24	; 0x02
    16f4:	6b 83       	std	Y+3, r22	; 0x03
    16f6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    16f8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	48 f0       	brcs	.+18     	; 0x1712 <DIO_ES_tSetPinValue+0x2e>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	88 30       	cpi	r24, 0x08	; 8
    1704:	30 f0       	brcs	.+12     	; 0x1712 <DIO_ES_tSetPinValue+0x2e>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	18 f0       	brcs	.+6      	; 0x1712 <DIO_ES_tSetPinValue+0x2e>
			Copy_u8PinNumber>PIN7 &&
			Copy_PinValue>PIN_HIGH)
	{
		LOC_ES_tErrorState  = ES_OUT_OF_RANGE ;
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	d1 c0       	rjmp	.+418    	; 0x18b4 <DIO_ES_tSetPinValue+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3e 83       	std	Y+6, r19	; 0x06
    171a:	2d 83       	std	Y+5, r18	; 0x05
    171c:	6d 81       	ldd	r22, Y+5	; 0x05
    171e:	7e 81       	ldd	r23, Y+6	; 0x06
    1720:	61 30       	cpi	r22, 0x01	; 1
    1722:	71 05       	cpc	r23, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <DIO_ES_tSetPinValue+0x44>
    1726:	44 c0       	rjmp	.+136    	; 0x17b0 <DIO_ES_tSetPinValue+0xcc>
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	91 05       	cpc	r25, r1
    1730:	34 f4       	brge	.+12     	; 0x173e <DIO_ES_tSetPinValue+0x5a>
    1732:	2d 81       	ldd	r18, Y+5	; 0x05
    1734:	3e 81       	ldd	r19, Y+6	; 0x06
    1736:	21 15       	cp	r18, r1
    1738:	31 05       	cpc	r19, r1
    173a:	71 f0       	breq	.+28     	; 0x1758 <DIO_ES_tSetPinValue+0x74>
    173c:	b9 c0       	rjmp	.+370    	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
    173e:	6d 81       	ldd	r22, Y+5	; 0x05
    1740:	7e 81       	ldd	r23, Y+6	; 0x06
    1742:	62 30       	cpi	r22, 0x02	; 2
    1744:	71 05       	cpc	r23, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <DIO_ES_tSetPinValue+0x66>
    1748:	5c c0       	rjmp	.+184    	; 0x1802 <DIO_ES_tSetPinValue+0x11e>
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <DIO_ES_tSetPinValue+0x72>
    1754:	82 c0       	rjmp	.+260    	; 0x185a <DIO_ES_tSetPinValue+0x176>
    1756:	ac c0       	rjmp	.+344    	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinValue==PIN_HIGH)
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	a1 f4       	brne	.+40     	; 0x1786 <DIO_ES_tSetPinValue+0xa2>
				PORTA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    175e:	ab e3       	ldi	r26, 0x3B	; 59
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	eb e3       	ldi	r30, 0x3B	; 59
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_ES_tSetPinValue+0x98>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_ES_tSetPinValue+0x94>
    1780:	84 2b       	or	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	95 c0       	rjmp	.+298    	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1786:	ab e3       	ldi	r26, 0x3B	; 59
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	eb e3       	ldi	r30, 0x3B	; 59
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <DIO_ES_tSetPinValue+0xc0>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <DIO_ES_tSetPinValue+0xbc>
    17a8:	80 95       	com	r24
    17aa:	84 23       	and	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	80 c0       	rjmp	.+256    	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTB:
			PORTB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    17b0:	a8 e3       	ldi	r26, 0x38	; 56
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e8 e3       	ldi	r30, 0x38	; 56
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_ES_tSetPinValue+0xe8>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	2a 95       	dec	r18
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_ES_tSetPinValue+0xe4>
    17d0:	80 95       	com	r24
    17d2:	84 23       	and	r24, r20
    17d4:	8c 93       	st	X, r24
			PORTB |= (Copy_PinValue<<Copy_u8PinNumber);
    17d6:	a8 e3       	ldi	r26, 0x38	; 56
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e8 e3       	ldi	r30, 0x38	; 56
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	b9 01       	movw	r22, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_ES_tSetPinValue+0x112>
    17f2:	66 0f       	add	r22, r22
    17f4:	77 1f       	adc	r23, r23
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_ES_tSetPinValue+0x10e>
    17fa:	cb 01       	movw	r24, r22
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	57 c0       	rjmp	.+174    	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinValue==PIN_HIGH)
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	a1 f4       	brne	.+40     	; 0x1830 <DIO_ES_tSetPinValue+0x14c>
				PORTC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1808:	a5 e3       	ldi	r26, 0x35	; 53
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e5 e3       	ldi	r30, 0x35	; 53
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_ES_tSetPinValue+0x142>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_ES_tSetPinValue+0x13e>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	40 c0       	rjmp	.+128    	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1830:	a5 e3       	ldi	r26, 0x35	; 53
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_ES_tSetPinValue+0x16a>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_ES_tSetPinValue+0x166>
    1852:	80 95       	com	r24
    1854:	84 23       	and	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	2b c0       	rjmp	.+86     	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinValue==PIN_HIGH)
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	a1 f4       	brne	.+40     	; 0x1888 <DIO_ES_tSetPinValue+0x1a4>
				PORTD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1860:	a2 e3       	ldi	r26, 0x32	; 50
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_ES_tSetPinValue+0x19a>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_ES_tSetPinValue+0x196>
    1882:	84 2b       	or	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1888:	a2 e3       	ldi	r26, 0x32	; 50
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e2 e3       	ldi	r30, 0x32	; 50
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 2e       	mov	r0, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_ES_tSetPinValue+0x1c2>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0a 94       	dec	r0
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_ES_tSetPinValue+0x1be>
    18aa:	80 95       	com	r24
    18ac:	84 23       	and	r24, r20
    18ae:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b6:	26 96       	adiw	r28, 0x06	; 6
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <DIO_ES_tGetPinValue>:
/*Get Pin Value*/
ES_t DIO_ES_tGetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8* Copy_PinValue)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	27 97       	sbiw	r28, 0x07	; 7
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	6b 83       	std	Y+3, r22	; 0x03
    18e0:	5d 83       	std	Y+5, r21	; 0x05
    18e2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    18e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PinValue!=NULL)
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <DIO_ES_tGetPinValue+0x28>
    18ee:	7c c0       	rjmp	.+248    	; 0x19e8 <DIO_ES_tGetPinValue+0x120>
	{
		if(Copy_u8PortNumber> DIO_PORTD &&
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	30 f0       	brcs	.+12     	; 0x1902 <DIO_ES_tGetPinValue+0x3a>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	88 30       	cpi	r24, 0x08	; 8
    18fa:	18 f0       	brcs	.+6      	; 0x1902 <DIO_ES_tGetPinValue+0x3a>
				Copy_u8PinNumber>PIN7 )
		{
			LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	75 c0       	rjmp	.+234    	; 0x19ec <DIO_ES_tGetPinValue+0x124>
		}
		else
		{
			switch(Copy_u8PortNumber)
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	3f 83       	std	Y+7, r19	; 0x07
    190a:	2e 83       	std	Y+6, r18	; 0x06
    190c:	4e 81       	ldd	r20, Y+6	; 0x06
    190e:	5f 81       	ldd	r21, Y+7	; 0x07
    1910:	41 30       	cpi	r20, 0x01	; 1
    1912:	51 05       	cpc	r21, r1
    1914:	59 f1       	breq	.+86     	; 0x196c <DIO_ES_tGetPinValue+0xa4>
    1916:	8e 81       	ldd	r24, Y+6	; 0x06
    1918:	9f 81       	ldd	r25, Y+7	; 0x07
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	91 05       	cpc	r25, r1
    191e:	34 f4       	brge	.+12     	; 0x192c <DIO_ES_tGetPinValue+0x64>
    1920:	2e 81       	ldd	r18, Y+6	; 0x06
    1922:	3f 81       	ldd	r19, Y+7	; 0x07
    1924:	21 15       	cp	r18, r1
    1926:	31 05       	cpc	r19, r1
    1928:	69 f0       	breq	.+26     	; 0x1944 <DIO_ES_tGetPinValue+0x7c>
    192a:	5b c0       	rjmp	.+182    	; 0x19e2 <DIO_ES_tGetPinValue+0x11a>
    192c:	4e 81       	ldd	r20, Y+6	; 0x06
    192e:	5f 81       	ldd	r21, Y+7	; 0x07
    1930:	42 30       	cpi	r20, 0x02	; 2
    1932:	51 05       	cpc	r21, r1
    1934:	79 f1       	breq	.+94     	; 0x1994 <DIO_ES_tGetPinValue+0xcc>
    1936:	8e 81       	ldd	r24, Y+6	; 0x06
    1938:	9f 81       	ldd	r25, Y+7	; 0x07
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <DIO_ES_tGetPinValue+0x7a>
    1940:	3d c0       	rjmp	.+122    	; 0x19bc <DIO_ES_tGetPinValue+0xf4>
    1942:	4f c0       	rjmp	.+158    	; 0x19e2 <DIO_ES_tGetPinValue+0x11a>
			{

			case DIO_PORTA:
				*Copy_PinValue = (PINA>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1944:	e9 e3       	ldi	r30, 0x39	; 57
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a9 01       	movw	r20, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_ES_tGetPinValue+0x94>
    1958:	55 95       	asr	r21
    195a:	47 95       	ror	r20
    195c:	8a 95       	dec	r24
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_ES_tGetPinValue+0x90>
    1960:	ca 01       	movw	r24, r20
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	ec 81       	ldd	r30, Y+4	; 0x04
    1966:	fd 81       	ldd	r31, Y+5	; 0x05
    1968:	80 83       	st	Z, r24
    196a:	3b c0       	rjmp	.+118    	; 0x19e2 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTB:
				*Copy_PinValue = (PINB>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    196c:	e6 e3       	ldi	r30, 0x36	; 54
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a9 01       	movw	r20, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_ES_tGetPinValue+0xbc>
    1980:	55 95       	asr	r21
    1982:	47 95       	ror	r20
    1984:	8a 95       	dec	r24
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_ES_tGetPinValue+0xb8>
    1988:	ca 01       	movw	r24, r20
    198a:	81 70       	andi	r24, 0x01	; 1
    198c:	ec 81       	ldd	r30, Y+4	; 0x04
    198e:	fd 81       	ldd	r31, Y+5	; 0x05
    1990:	80 83       	st	Z, r24
    1992:	27 c0       	rjmp	.+78     	; 0x19e2 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTC:
				*Copy_PinValue = (PINC>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1994:	e3 e3       	ldi	r30, 0x33	; 51
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_ES_tGetPinValue+0xe4>
    19a8:	55 95       	asr	r21
    19aa:	47 95       	ror	r20
    19ac:	8a 95       	dec	r24
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <DIO_ES_tGetPinValue+0xe0>
    19b0:	ca 01       	movw	r24, r20
    19b2:	81 70       	andi	r24, 0x01	; 1
    19b4:	ec 81       	ldd	r30, Y+4	; 0x04
    19b6:	fd 81       	ldd	r31, Y+5	; 0x05
    19b8:	80 83       	st	Z, r24
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTD:
				*Copy_PinValue = (PIND>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    19bc:	e0 e3       	ldi	r30, 0x30	; 48
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <DIO_ES_tGetPinValue+0x10c>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <DIO_ES_tGetPinValue+0x108>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	ec 81       	ldd	r30, Y+4	; 0x04
    19de:	fd 81       	ldd	r31, Y+5	; 0x05
    19e0:	80 83       	st	Z, r24
				break ;
			default:
				break ;
				/*Do Nothing*/
			}
			LOC_ES_tErrorState = ES_OK ;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_ES_tGetPinValue+0x124>
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ES_tErrorState ;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	27 96       	adiw	r28, 0x07	; 7
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <DIO_ES_tTogglePinValue>:
/*Toggle Pin Value*/
ES_t DIO_ES_tTogglePinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber)
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <DIO_ES_tTogglePinValue+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <DIO_ES_tTogglePinValue+0x8>
    1a08:	0f 92       	push	r0
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
    1a10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK;
    1a12:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	30 f0       	brcs	.+12     	; 0x1a26 <DIO_ES_tTogglePinValue+0x26>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 30       	cpi	r24, 0x08	; 8
    1a1e:	18 f0       	brcs	.+6      	; 0x1a26 <DIO_ES_tTogglePinValue+0x26>
			Copy_u8PinNumber>PIN7 )
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	70 c0       	rjmp	.+224    	; 0x1b06 <DIO_ES_tTogglePinValue+0x106>
	}
	else
	{
		switch(Copy_u8PortNumber)
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3d 83       	std	Y+5, r19	; 0x05
    1a2e:	2c 83       	std	Y+4, r18	; 0x04
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	49 f1       	breq	.+82     	; 0x1a8c <DIO_ES_tTogglePinValue+0x8c>
    1a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <DIO_ES_tTogglePinValue+0x4e>
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	61 f0       	breq	.+24     	; 0x1a64 <DIO_ES_tTogglePinValue+0x64>
    1a4c:	5a c0       	rjmp	.+180    	; 0x1b02 <DIO_ES_tTogglePinValue+0x102>
    1a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a50:	3d 81       	ldd	r19, Y+5	; 0x05
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	71 f1       	breq	.+92     	; 0x1ab4 <DIO_ES_tTogglePinValue+0xb4>
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	91 05       	cpc	r25, r1
    1a60:	e9 f1       	breq	.+122    	; 0x1adc <DIO_ES_tTogglePinValue+0xdc>
    1a62:	4f c0       	rjmp	.+158    	; 0x1b02 <DIO_ES_tTogglePinValue+0x102>
		{

		case DIO_PORTA:
			PORTA ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1a64:	ab e3       	ldi	r26, 0x3B	; 59
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	eb e3       	ldi	r30, 0x3B	; 59
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_ES_tTogglePinValue+0x82>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_ES_tTogglePinValue+0x7e>
    1a86:	84 27       	eor	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	3b c0       	rjmp	.+118    	; 0x1b02 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTB:
			PORTB ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1a8c:	a8 e3       	ldi	r26, 0x38	; 56
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e8 e3       	ldi	r30, 0x38	; 56
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_ES_tTogglePinValue+0xaa>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_ES_tTogglePinValue+0xa6>
    1aae:	84 27       	eor	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	27 c0       	rjmp	.+78     	; 0x1b02 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTC:
			PORTC ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1ab4:	a5 e3       	ldi	r26, 0x35	; 53
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e3       	ldi	r30, 0x35	; 53
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_ES_tTogglePinValue+0xd2>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_ES_tTogglePinValue+0xce>
    1ad6:	84 27       	eor	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	13 c0       	rjmp	.+38     	; 0x1b02 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTD:
			PORTD ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1adc:	a2 e3       	ldi	r26, 0x32	; 50
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e2 e3       	ldi	r30, 0x32	; 50
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_ES_tTogglePinValue+0xfa>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_ES_tTogglePinValue+0xf6>
    1afe:	84 27       	eor	r24, r20
    1b00:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <SWITCH_ES_tInit>:
extern u8 G_u8SwitchNum ;


/*Switch Driver Initialization*/
ES_t SWITCH_ES_tInit(SWITCH_t* Copy_PtrSWITCH_tConfig )
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <SWITCH_ES_tInit+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <SWITCH_ES_tInit+0x8>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1b28:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtrSWITCH_tConfig !=NULL)
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <SWITCH_ES_tInit+0x1c>
    1b32:	5c c0       	rjmp	.+184    	; 0x1bec <SWITCH_ES_tInit+0xd4>
	{
		u8 LOC_u8SwitchIter = 0 ;
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	53 c0       	rjmp	.+166    	; 0x1bde <SWITCH_ES_tInit+0xc6>
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	c9 01       	movw	r24, r18
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	28 0f       	add	r18, r24
    1b46:	39 1f       	adc	r19, r25
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	40 81       	ld	r20, Z
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	c9 01       	movw	r24, r18
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	28 0f       	add	r18, r24
    1b62:	39 1f       	adc	r19, r25
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e2 0f       	add	r30, r18
    1b6c:	f3 1f       	adc	r31, r19
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	84 2f       	mov	r24, r20
    1b72:	69 2f       	mov	r22, r25
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
					Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PIN,PIN_INPUT);
			DIO_ES_tSetPinValue(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	c9 01       	movw	r24, r18
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	28 0f       	add	r18, r24
    1b88:	39 1f       	adc	r19, r25
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	50 81       	ld	r21, Z
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	28 0f       	add	r18, r24
    1ba4:	39 1f       	adc	r19, r25
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	fc 01       	movw	r30, r24
    1bac:	e2 0f       	add	r30, r18
    1bae:	f3 1f       	adc	r31, r19
    1bb0:	41 81       	ldd	r20, Z+1	; 0x01
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	c9 01       	movw	r24, r18
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	28 0f       	add	r18, r24
    1bc0:	39 1f       	adc	r19, r25
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	e2 0f       	add	r30, r18
    1bca:	f3 1f       	adc	r31, r19
    1bcc:	92 81       	ldd	r25, Z+2	; 0x02
    1bce:	85 2f       	mov	r24, r21
    1bd0:	64 2f       	mov	r22, r20
    1bd2:	49 2f       	mov	r20, r25
    1bd4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtrSWITCH_tConfig !=NULL)
	{
		u8 LOC_u8SwitchIter = 0 ;
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	90 91 7a 01 	lds	r25, 0x017A
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	89 17       	cp	r24, r25
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <SWITCH_ES_tInit+0xd2>
    1be8:	a7 cf       	rjmp	.-178    	; 0x1b38 <SWITCH_ES_tInit+0x20>
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <SWITCH_ES_tInit+0xd8>
					(Copy_PtrSWITCH_tConfig+LOC_u8SwitchIter)->SWITCH_INTERFACE);
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	8a 83       	std	Y+2, r24	; 0x02
	}

   return LOC_ES_tErrorState ;
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <SWITCH_ES_tGetSwitchState>:
/*Get Switch State*/
ES_t SWITCH_ES_tGetSwitchState(SWITCH_t* Copy_PtrSWITCH_tInfo,u8* Copy_Pu8SwitchState)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <SWITCH_ES_tGetSwitchState+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <SWITCH_ES_tGetSwitchState+0x8>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9b 83       	std	Y+3, r25	; 0x03
    1c10:	8a 83       	std	Y+2, r24	; 0x02
    1c12:	7d 83       	std	Y+5, r23	; 0x05
    1c14:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1c16:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8SwitchState !=NULL &&
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	91 f0       	breq	.+36     	; 0x1c44 <SWITCH_ES_tGetSwitchState+0x44>
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	9d 81       	ldd	r25, Y+5	; 0x05
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	71 f0       	breq	.+28     	; 0x1c44 <SWITCH_ES_tGetSwitchState+0x44>
			Copy_Pu8SwitchState !=NULL)
	{
		LOC_ES_tErrorState = DIO_ES_tGetPinValue(Copy_PtrSWITCH_tInfo->SWITCH_PORT,Copy_PtrSWITCH_tInfo->SWITCH_PIN,Copy_Pu8SwitchState);
    1c28:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2c:	80 81       	ld	r24, Z
    1c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c30:	fb 81       	ldd	r31, Y+3	; 0x03
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	2c 81       	ldd	r18, Y+4	; 0x04
    1c36:	3d 81       	ldd	r19, Y+5	; 0x05
    1c38:	69 2f       	mov	r22, r25
    1c3a:	a9 01       	movw	r20, r18
    1c3c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DIO_ES_tGetPinValue>
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <SWITCH_ES_tGetSwitchState+0x48>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	89 83       	std	Y+1, r24	; 0x01
	}
	   return LOC_ES_tErrorState ;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <STEPPER_ES_tInit>:



/*Stepper_ULN2003 Initialization*/
ES_t STEPPER_ES_tInit(void)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	0f 92       	push	r0
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1c64:	19 82       	std	Y+1, r1	; 0x01
	DIO_ES_tSetPinDirection(BLUE_GRP,BLUE_PIN,PIN_OUTPUT);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(PINK_GRP,PINK_PIN,PIN_OUTPUT);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	67 e0       	ldi	r22, 0x07	; 7
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(YELLOW_GRP,YELLOW_PIN,PIN_OUTPUT);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	65 e0       	ldi	r22, 0x05	; 5
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(ORANGE_GRP,ORANGE_PIN,PIN_OUTPUT);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	63 e0       	ldi	r22, 0x03	; 3
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,PIN_HIGH);
	*/
	LOC_ES_tErrorState = ES_OK ;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <STEPPER_ES_tFullCycle>:

/**/
ES_t STEPPER_ES_tFullCycle(u8 Copy_u8Direction,u8 Copy_u8Speed)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	a2 97       	sbiw	r28, 0x22	; 34
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	89 a3       	std	Y+33, r24	; 0x21
    1cb2:	6a a3       	std	Y+34, r22	; 0x22
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1cb4:	18 a2       	std	Y+32, r1	; 0x20
	u8 State = 15 ;
    1cb6:	8f e0       	ldi	r24, 0x0F	; 15
    1cb8:	8f 8f       	std	Y+31, r24	; 0x1f
	if(Copy_u8Direction == CCW)
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <STEPPER_ES_tFullCycle+0x26>
    1cc0:	b8 c0       	rjmp	.+368    	; 0x1e32 <STEPPER_ES_tFullCycle+0x196>
	{
		for(u8 i = 0 ; i<2048 ; i++)
    1cc2:	1e 8e       	std	Y+30, r1	; 0x1e
		{
			State &=~(1<<(i%4));
    1cc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 01       	movw	r18, r24
    1ccc:	23 70       	andi	r18, 0x03	; 3
    1cce:	30 70       	andi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <STEPPER_ES_tFullCycle+0x3e>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	2a 95       	dec	r18
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <STEPPER_ES_tFullCycle+0x3a>
    1cde:	98 2f       	mov	r25, r24
    1ce0:	90 95       	com	r25
    1ce2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ce4:	89 23       	and	r24, r25
    1ce6:	8f 8f       	std	Y+31, r24	; 0x1f
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    1ce8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cea:	98 2f       	mov	r25, r24
    1cec:	91 70       	andi	r25, 0x01	; 1
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    1cf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cfa:	86 95       	lsr	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	86 95       	lsr	r24
    1d00:	98 2f       	mov	r25, r24
    1d02:	91 70       	andi	r25, 0x01	; 1
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	63 e0       	ldi	r22, 0x03	; 3
    1d08:	49 2f       	mov	r20, r25
    1d0a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    1d0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d10:	86 95       	lsr	r24
    1d12:	86 95       	lsr	r24
    1d14:	98 2f       	mov	r25, r24
    1d16:	91 70       	andi	r25, 0x01	; 1
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	65 e0       	ldi	r22, 0x05	; 5
    1d1c:	49 2f       	mov	r20, r25
    1d1e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    1d22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d24:	86 95       	lsr	r24
    1d26:	98 2f       	mov	r25, r24
    1d28:	91 70       	andi	r25, 0x01	; 1
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	67 e0       	ldi	r22, 0x07	; 7
    1d2e:	49 2f       	mov	r20, r25
    1d30:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			State = 0x0F ;
    1d34:	8f e0       	ldi	r24, 0x0F	; 15
    1d36:	8f 8f       	std	Y+31, r24	; 0x1f
			_delay_ms(Copy_u8Speed);
    1d38:	8a a1       	ldd	r24, Y+34	; 0x22
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e0       	ldi	r26, 0x00	; 0
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	89 8f       	std	Y+25, r24	; 0x19
    1d50:	9a 8f       	std	Y+26, r25	; 0x1a
    1d52:	ab 8f       	std	Y+27, r26	; 0x1b
    1d54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	69 8d       	ldd	r22, Y+25	; 0x19
    1d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a e7       	ldi	r20, 0x7A	; 122
    1d64:	55 e4       	ldi	r21, 0x45	; 69
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8d 8b       	std	Y+21, r24	; 0x15
    1d70:	9e 8b       	std	Y+22, r25	; 0x16
    1d72:	af 8b       	std	Y+23, r26	; 0x17
    1d74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d76:	6d 89       	ldd	r22, Y+21	; 0x15
    1d78:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <STEPPER_ES_tFullCycle+0xfc>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <STEPPER_ES_tFullCycle+0x17a>
	else if (__tmp > 65535)
    1d98:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <STEPPER_ES_tFullCycle+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	69 8d       	ldd	r22, Y+25	; 0x19
    1db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <STEPPER_ES_tFullCycle+0x15c>
    1dda:	80 e9       	ldi	r24, 0x90	; 144
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	9a 8b       	std	Y+18, r25	; 0x12
    1de0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de2:	89 89       	ldd	r24, Y+17	; 0x11
    1de4:	9a 89       	ldd	r25, Y+18	; 0x12
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <STEPPER_ES_tFullCycle+0x14a>
    1dea:	9a 8b       	std	Y+18, r25	; 0x12
    1dec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <STEPPER_ES_tFullCycle+0x13e>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <STEPPER_ES_tFullCycle+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6d 89       	ldd	r22, Y+21	; 0x15
    1e04:	7e 89       	ldd	r23, Y+22	; 0x16
    1e06:	8f 89       	ldd	r24, Y+23	; 0x17
    1e08:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	98 8b       	std	Y+16, r25	; 0x10
    1e1c:	8f 87       	std	Y+15, r24	; 0x0f
    1e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e20:	98 89       	ldd	r25, Y+16	; 0x10
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <STEPPER_ES_tFullCycle+0x186>
    1e26:	98 8b       	std	Y+16, r25	; 0x10
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	u8 State = 15 ;
	if(Copy_u8Direction == CCW)
	{
		for(u8 i = 0 ; i<2048 ; i++)
    1e2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e30:	49 cf       	rjmp	.-366    	; 0x1cc4 <STEPPER_ES_tFullCycle+0x28>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
			State = 0x0F ;
			_delay_ms(Copy_u8Speed);
		}
	}
	if(Copy_u8Direction == CW)
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	88 23       	and	r24, r24
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <STEPPER_ES_tFullCycle+0x19e>
    1e38:	b8 c0       	rjmp	.+368    	; 0x1faa <STEPPER_ES_tFullCycle+0x30e>
	{
		for(u8 i = 0 ; i<2048 ; i++)
    1e3a:	1d 8e       	std	Y+29, r1	; 0x1d
		{
			State &=~(1<<(i%4));
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 01       	movw	r18, r24
    1e44:	23 70       	andi	r18, 0x03	; 3
    1e46:	30 70       	andi	r19, 0x00	; 0
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <STEPPER_ES_tFullCycle+0x1b6>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	2a 95       	dec	r18
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <STEPPER_ES_tFullCycle+0x1b2>
    1e56:	98 2f       	mov	r25, r24
    1e58:	90 95       	com	r25
    1e5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e5c:	89 23       	and	r24, r25
    1e5e:	8f 8f       	std	Y+31, r24	; 0x1f
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    1e60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e62:	98 2f       	mov	r25, r24
    1e64:	91 70       	andi	r25, 0x01	; 1
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	49 2f       	mov	r20, r25
    1e6c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    1e70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e72:	86 95       	lsr	r24
    1e74:	98 2f       	mov	r25, r24
    1e76:	91 70       	andi	r25, 0x01	; 1
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	67 e0       	ldi	r22, 0x07	; 7
    1e7c:	49 2f       	mov	r20, r25
    1e7e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    1e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e84:	86 95       	lsr	r24
    1e86:	86 95       	lsr	r24
    1e88:	98 2f       	mov	r25, r24
    1e8a:	91 70       	andi	r25, 0x01	; 1
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	65 e0       	ldi	r22, 0x05	; 5
    1e90:	49 2f       	mov	r20, r25
    1e92:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    1e96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	91 70       	andi	r25, 0x01	; 1
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	63 e0       	ldi	r22, 0x03	; 3
    1ea6:	49 2f       	mov	r20, r25
    1ea8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			State = 0x0F ;
    1eac:	8f e0       	ldi	r24, 0x0F	; 15
    1eae:	8f 8f       	std	Y+31, r24	; 0x1f
		   _delay_ms(Copy_u8Speed);
    1eb0:	8a a1       	ldd	r24, Y+34	; 0x22
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e0       	ldi	r26, 0x00	; 0
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8b 87       	std	Y+11, r24	; 0x0b
    1ec8:	9c 87       	std	Y+12, r25	; 0x0c
    1eca:	ad 87       	std	Y+13, r26	; 0x0d
    1ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a e7       	ldi	r20, 0x7A	; 122
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
    1ee8:	98 87       	std	Y+8, r25	; 0x08
    1eea:	a9 87       	std	Y+9, r26	; 0x09
    1eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <STEPPER_ES_tFullCycle+0x274>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <STEPPER_ES_tFullCycle+0x2f2>
	else if (__tmp > 65535)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <STEPPER_ES_tFullCycle+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <STEPPER_ES_tFullCycle+0x2d4>
    1f52:	80 e9       	ldi	r24, 0x90	; 144
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <STEPPER_ES_tFullCycle+0x2c2>
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <STEPPER_ES_tFullCycle+0x2b6>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <STEPPER_ES_tFullCycle+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <STEPPER_ES_tFullCycle+0x2fe>
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(Copy_u8Speed);
		}
	}
	if(Copy_u8Direction == CW)
	{
		for(u8 i = 0 ; i<2048 ; i++)
    1fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa8:	49 cf       	rjmp	.-366    	; 0x1e3c <STEPPER_ES_tFullCycle+0x1a0>
			State = 0x0F ;
		   _delay_ms(Copy_u8Speed);
		}

	}
	return LOC_ES_tErrorState ;
    1faa:	88 a1       	ldd	r24, Y+32	; 0x20


}
    1fac:	a2 96       	adiw	r28, 0x22	; 34
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <STEPPER_ES_tRotationAngle>:

/**/
ES_t STEPPER_ES_tRotationAngle(u8 Copy_u8Direction,u8 Copy_u8Speed,u8 Copy_u8Angle)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	a5 97       	sbiw	r28, 0x25	; 37
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	8b a3       	std	Y+35, r24	; 0x23
    1fd4:	6c a3       	std	Y+36, r22	; 0x24
    1fd6:	4d a3       	std	Y+37, r20	; 0x25
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1fd8:	1a a2       	std	Y+34, r1	; 0x22

	u8 State = 15 ;
    1fda:	8f e0       	ldi	r24, 0x0F	; 15
    1fdc:	89 a3       	std	Y+33, r24	; 0x21
	u16 Steps =  (Copy_u8Angle * 2048UL) / 360UL;
    1fde:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	07 2e       	mov	r0, r23
    1fea:	7b e0       	ldi	r23, 0x0B	; 11
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	7a 95       	dec	r23
    1ff6:	d1 f7       	brne	.-12     	; 0x1fec <STEPPER_ES_tRotationAngle+0x2e>
    1ff8:	70 2d       	mov	r23, r0
    1ffa:	28 e6       	ldi	r18, 0x68	; 104
    1ffc:	31 e0       	ldi	r19, 0x01	; 1
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
    200a:	da 01       	movw	r26, r20
    200c:	c9 01       	movw	r24, r18
    200e:	98 a3       	std	Y+32, r25	; 0x20
    2010:	8f 8f       	std	Y+31, r24	; 0x1f
		if(Copy_u8Direction == CCW)
    2012:	8b a1       	ldd	r24, Y+35	; 0x23
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	09 f0       	breq	.+2      	; 0x201a <STEPPER_ES_tRotationAngle+0x5c>
    2018:	c1 c0       	rjmp	.+386    	; 0x219c <STEPPER_ES_tRotationAngle+0x1de>
		{
			for(u8 i = 0 ; i<Steps ; i++)
    201a:	1e 8e       	std	Y+30, r1	; 0x1e
    201c:	b6 c0       	rjmp	.+364    	; 0x218a <STEPPER_ES_tRotationAngle+0x1cc>
			{
				State &=~(1<<(i%4));
    201e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 01       	movw	r18, r24
    2026:	23 70       	andi	r18, 0x03	; 3
    2028:	30 70       	andi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <STEPPER_ES_tRotationAngle+0x76>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	2a 95       	dec	r18
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <STEPPER_ES_tRotationAngle+0x72>
    2038:	98 2f       	mov	r25, r24
    203a:	90 95       	com	r25
    203c:	89 a1       	ldd	r24, Y+33	; 0x21
    203e:	89 23       	and	r24, r25
    2040:	89 a3       	std	Y+33, r24	; 0x21
				DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    2042:	89 a1       	ldd	r24, Y+33	; 0x21
    2044:	98 2f       	mov	r25, r24
    2046:	91 70       	andi	r25, 0x01	; 1
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	49 2f       	mov	r20, r25
    204e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    2052:	89 a1       	ldd	r24, Y+33	; 0x21
    2054:	86 95       	lsr	r24
    2056:	86 95       	lsr	r24
    2058:	86 95       	lsr	r24
    205a:	98 2f       	mov	r25, r24
    205c:	91 70       	andi	r25, 0x01	; 1
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	63 e0       	ldi	r22, 0x03	; 3
    2062:	49 2f       	mov	r20, r25
    2064:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	86 95       	lsr	r24
    206c:	86 95       	lsr	r24
    206e:	98 2f       	mov	r25, r24
    2070:	91 70       	andi	r25, 0x01	; 1
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	65 e0       	ldi	r22, 0x05	; 5
    2076:	49 2f       	mov	r20, r25
    2078:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	86 95       	lsr	r24
    2080:	98 2f       	mov	r25, r24
    2082:	91 70       	andi	r25, 0x01	; 1
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	67 e0       	ldi	r22, 0x07	; 7
    2088:	49 2f       	mov	r20, r25
    208a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				_delay_ms(Copy_u8Speed);
    208e:	8c a1       	ldd	r24, Y+36	; 0x24
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	89 8f       	std	Y+25, r24	; 0x19
    20a6:	9a 8f       	std	Y+26, r25	; 0x1a
    20a8:	ab 8f       	std	Y+27, r26	; 0x1b
    20aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	69 8d       	ldd	r22, Y+25	; 0x19
    20ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	55 e4       	ldi	r21, 0x45	; 69
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8d 8b       	std	Y+21, r24	; 0x15
    20c6:	9e 8b       	std	Y+22, r25	; 0x16
    20c8:	af 8b       	std	Y+23, r26	; 0x17
    20ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <STEPPER_ES_tRotationAngle+0x130>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <STEPPER_ES_tRotationAngle+0x1ae>
	else if (__tmp > 65535)
    20ee:	6d 89       	ldd	r22, Y+21	; 0x15
    20f0:	7e 89       	ldd	r23, Y+22	; 0x16
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <STEPPER_ES_tRotationAngle+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	69 8d       	ldd	r22, Y+25	; 0x19
    2108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9c 8b       	std	Y+20, r25	; 0x14
    212c:	8b 8b       	std	Y+19, r24	; 0x13
    212e:	0f c0       	rjmp	.+30     	; 0x214e <STEPPER_ES_tRotationAngle+0x190>
    2130:	80 e9       	ldi	r24, 0x90	; 144
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
    2138:	89 89       	ldd	r24, Y+17	; 0x11
    213a:	9a 89       	ldd	r25, Y+18	; 0x12
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <STEPPER_ES_tRotationAngle+0x17e>
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <STEPPER_ES_tRotationAngle+0x172>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <STEPPER_ES_tRotationAngle+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6d 89       	ldd	r22, Y+21	; 0x15
    215a:	7e 89       	ldd	r23, Y+22	; 0x16
    215c:	8f 89       	ldd	r24, Y+23	; 0x17
    215e:	98 8d       	ldd	r25, Y+24	; 0x18
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
    216c:	8b 89       	ldd	r24, Y+19	; 0x13
    216e:	9c 89       	ldd	r25, Y+20	; 0x14
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	8f 87       	std	Y+15, r24	; 0x0f
    2174:	8f 85       	ldd	r24, Y+15	; 0x0f
    2176:	98 89       	ldd	r25, Y+16	; 0x10
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <STEPPER_ES_tRotationAngle+0x1ba>
    217c:	98 8b       	std	Y+16, r25	; 0x10
    217e:	8f 87       	std	Y+15, r24	; 0x0f
				State = 0x0F ;
    2180:	8f e0       	ldi	r24, 0x0F	; 15
    2182:	89 a3       	std	Y+33, r24	; 0x21

	u8 State = 15 ;
	u16 Steps =  (Copy_u8Angle * 2048UL) / 360UL;
		if(Copy_u8Direction == CCW)
		{
			for(u8 i = 0 ; i<Steps ; i++)
    2184:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	8e 8f       	std	Y+30, r24	; 0x1e
    218a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2192:	98 a1       	ldd	r25, Y+32	; 0x20
    2194:	28 17       	cp	r18, r24
    2196:	39 07       	cpc	r19, r25
    2198:	08 f4       	brcc	.+2      	; 0x219c <STEPPER_ES_tRotationAngle+0x1de>
    219a:	41 cf       	rjmp	.-382    	; 0x201e <STEPPER_ES_tRotationAngle+0x60>
				DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
				_delay_ms(Copy_u8Speed);
				State = 0x0F ;
			}
		}
		if(Copy_u8Direction == CW)
    219c:	8b a1       	ldd	r24, Y+35	; 0x23
    219e:	88 23       	and	r24, r24
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <STEPPER_ES_tRotationAngle+0x1e6>
    21a2:	c1 c0       	rjmp	.+386    	; 0x2326 <STEPPER_ES_tRotationAngle+0x368>
		{
			for(u8 i = 0 ; i<Steps ; i++)
    21a4:	1d 8e       	std	Y+29, r1	; 0x1d
    21a6:	b6 c0       	rjmp	.+364    	; 0x2314 <STEPPER_ES_tRotationAngle+0x356>
			{
				State &=~(1<<(i%4));
    21a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9c 01       	movw	r18, r24
    21b0:	23 70       	andi	r18, 0x03	; 3
    21b2:	30 70       	andi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <STEPPER_ES_tRotationAngle+0x200>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	2a 95       	dec	r18
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <STEPPER_ES_tRotationAngle+0x1fc>
    21c2:	98 2f       	mov	r25, r24
    21c4:	90 95       	com	r25
    21c6:	89 a1       	ldd	r24, Y+33	; 0x21
    21c8:	89 23       	and	r24, r25
    21ca:	89 a3       	std	Y+33, r24	; 0x21
				DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    21cc:	89 a1       	ldd	r24, Y+33	; 0x21
    21ce:	98 2f       	mov	r25, r24
    21d0:	91 70       	andi	r25, 0x01	; 1
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	49 2f       	mov	r20, r25
    21d8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    21dc:	89 a1       	ldd	r24, Y+33	; 0x21
    21de:	86 95       	lsr	r24
    21e0:	98 2f       	mov	r25, r24
    21e2:	91 70       	andi	r25, 0x01	; 1
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	67 e0       	ldi	r22, 0x07	; 7
    21e8:	49 2f       	mov	r20, r25
    21ea:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    21ee:	89 a1       	ldd	r24, Y+33	; 0x21
    21f0:	86 95       	lsr	r24
    21f2:	86 95       	lsr	r24
    21f4:	98 2f       	mov	r25, r24
    21f6:	91 70       	andi	r25, 0x01	; 1
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	65 e0       	ldi	r22, 0x05	; 5
    21fc:	49 2f       	mov	r20, r25
    21fe:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    2202:	89 a1       	ldd	r24, Y+33	; 0x21
    2204:	86 95       	lsr	r24
    2206:	86 95       	lsr	r24
    2208:	86 95       	lsr	r24
    220a:	98 2f       	mov	r25, r24
    220c:	91 70       	andi	r25, 0x01	; 1
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	63 e0       	ldi	r22, 0x03	; 3
    2212:	49 2f       	mov	r20, r25
    2214:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			   _delay_ms(Copy_u8Speed);
    2218:	8c a1       	ldd	r24, Y+36	; 0x24
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8b 87       	std	Y+11, r24	; 0x0b
    2230:	9c 87       	std	Y+12, r25	; 0x0c
    2232:	ad 87       	std	Y+13, r26	; 0x0d
    2234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a e7       	ldi	r20, 0x7A	; 122
    2244:	55 e4       	ldi	r21, 0x45	; 69
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8f 83       	std	Y+7, r24	; 0x07
    2250:	98 87       	std	Y+8, r25	; 0x08
    2252:	a9 87       	std	Y+9, r26	; 0x09
    2254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <STEPPER_ES_tRotationAngle+0x2ba>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <STEPPER_ES_tRotationAngle+0x338>
	else if (__tmp > 65535)
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <STEPPER_ES_tRotationAngle+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <STEPPER_ES_tRotationAngle+0x31a>
    22ba:	80 e9       	ldi	r24, 0x90	; 144
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <STEPPER_ES_tRotationAngle+0x308>
    22ca:	9c 83       	std	Y+4, r25	; 0x04
    22cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <STEPPER_ES_tRotationAngle+0x2fc>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <STEPPER_ES_tRotationAngle+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	6f 81       	ldd	r22, Y+7	; 0x07
    22e4:	78 85       	ldd	r23, Y+8	; 0x08
    22e6:	89 85       	ldd	r24, Y+9	; 0x09
    22e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <STEPPER_ES_tRotationAngle+0x344>
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
				State = 0x0F ;
    230a:	8f e0       	ldi	r24, 0x0F	; 15
    230c:	89 a3       	std	Y+33, r24	; 0x21
				State = 0x0F ;
			}
		}
		if(Copy_u8Direction == CW)
		{
			for(u8 i = 0 ; i<Steps ; i++)
    230e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	8d 8f       	std	Y+29, r24	; 0x1d
    2314:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    231c:	98 a1       	ldd	r25, Y+32	; 0x20
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	08 f4       	brcc	.+2      	; 0x2326 <STEPPER_ES_tRotationAngle+0x368>
    2324:	41 cf       	rjmp	.-382    	; 0x21a8 <STEPPER_ES_tRotationAngle+0x1ea>
			}

		}


	return LOC_ES_tErrorState ;
    2326:	8a a1       	ldd	r24, Y+34	; 0x22
}
    2328:	a5 96       	adiw	r28, 0x25	; 37
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <LED_ES_tInit>:


extern u8 G_u8LEDsNum ;
/*LED Driver Initialization*/
ES_t LED_ES_tInit(LED_t* Copy_PtoArrLED_tConfig)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <LED_ES_tInit+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <LED_ES_tInit+0x8>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    234a:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtoArrLED_tConfig != NULL)
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	09 f4       	brne	.+2      	; 0x2356 <LED_ES_tInit+0x1c>
    2354:	5e c0       	rjmp	.+188    	; 0x2412 <LED_ES_tInit+0xd8>
	{
		u8 LOC_u8Iter = 0;
    2356:	19 82       	std	Y+1, r1	; 0x01
    2358:	53 c0       	rjmp	.+166    	; 0x2400 <LED_ES_tInit+0xc6>
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	c9 01       	movw	r24, r18
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	28 0f       	add	r18, r24
    2368:	39 1f       	adc	r19, r25
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	40 81       	ld	r20, Z
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	c9 01       	movw	r24, r18
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	28 0f       	add	r18, r24
    2384:	39 1f       	adc	r19, r25
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	fc 01       	movw	r30, r24
    238c:	e2 0f       	add	r30, r18
    238e:	f3 1f       	adc	r31, r19
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	84 2f       	mov	r24, r20
    2394:	69 2f       	mov	r22, r25
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	c9 01       	movw	r24, r18
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	28 0f       	add	r18, r24
    23aa:	39 1f       	adc	r19, r25
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	fc 01       	movw	r30, r24
    23b2:	e2 0f       	add	r30, r18
    23b4:	f3 1f       	adc	r31, r19
    23b6:	50 81       	ld	r21, Z
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	c9 01       	movw	r24, r18
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	28 0f       	add	r18, r24
    23c6:	39 1f       	adc	r19, r25
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	fc 01       	movw	r30, r24
    23ce:	e2 0f       	add	r30, r18
    23d0:	f3 1f       	adc	r31, r19
    23d2:	41 81       	ldd	r20, Z+1	; 0x01
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	c9 01       	movw	r24, r18
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	28 0f       	add	r18, r24
    23e2:	39 1f       	adc	r19, r25
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	92 81       	ldd	r25, Z+2	; 0x02
    23f0:	85 2f       	mov	r24, r21
    23f2:	64 2f       	mov	r22, r20
    23f4:	49 2f       	mov	r20, r25
    23f6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtoArrLED_tConfig != NULL)
	{
		u8 LOC_u8Iter = 0;
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	8f 5f       	subi	r24, 0xFF	; 255
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	90 91 87 01 	lds	r25, 0x0187
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	89 17       	cp	r24, r25
    2408:	08 f4       	brcc	.+2      	; 0x240c <LED_ES_tInit+0xd2>
    240a:	a7 cf       	rjmp	.-178    	; 0x235a <LED_ES_tInit+0x20>
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
		}


		 LOC_ES_tErrorState = ES_OK ;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <LED_ES_tInit+0xdc>

	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	8a 83       	std	Y+2, r24	; 0x02
	}


	return LOC_ES_tErrorState ;
    2416:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <LED_ES_tSetState>:

/*Set LED State*/

ES_t LED_ES_tSetState(LED_t* Copy_PtoArrLED_tInfo,u8 Copy_u8State)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <LED_ES_tSetState+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <LED_ES_tSetState+0x8>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	9b 83       	std	Y+3, r25	; 0x03
    2434:	8a 83       	std	Y+2, r24	; 0x02
    2436:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK ;
    2438:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PtoArrLED_tInfo != NULL)
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f0       	breq	.+26     	; 0x245c <LED_ES_tSetState+0x36>
	{
		DIO_ES_tSetPinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN,Copy_u8State);
    2442:	ea 81       	ldd	r30, Y+2	; 0x02
    2444:	fb 81       	ldd	r31, Y+3	; 0x03
    2446:	80 81       	ld	r24, Z
    2448:	ea 81       	ldd	r30, Y+2	; 0x02
    244a:	fb 81       	ldd	r31, Y+3	; 0x03
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	69 2f       	mov	r22, r25
    2450:	4c 81       	ldd	r20, Y+4	; 0x04
    2452:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
		LOC_ES_tErrorState = ES_OK;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <LED_ES_tSetState+0x3a>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    245c:	83 e0       	ldi	r24, 0x03	; 3
    245e:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    2460:	89 81       	ldd	r24, Y+1	; 0x01

}
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <LED_ES_tToggleState>:

/*Toggle LED State*/
ES_t LED_ES_tToggleState(LED_t* Copy_PtoArrLED_tInfo)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LED_ES_tToggleState+0x6>
    2476:	0f 92       	push	r0
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2480:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_PtoArrLED_tInfo != NULL)
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	61 f0       	breq	.+24     	; 0x24a2 <LED_ES_tToggleState+0x32>
		{
			DIO_ES_tTogglePinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN);
    248a:	ea 81       	ldd	r30, Y+2	; 0x02
    248c:	fb 81       	ldd	r31, Y+3	; 0x03
    248e:	80 81       	ld	r24, Z
    2490:	ea 81       	ldd	r30, Y+2	; 0x02
    2492:	fb 81       	ldd	r31, Y+3	; 0x03
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	69 2f       	mov	r22, r25
    2498:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_ES_tTogglePinValue>
			LOC_ES_tErrorState = ES_OK;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <LED_ES_tToggleState+0x36>
		}
		else
		{
			LOC_ES_tErrorState = ES_NULL_POINTER;
    24a2:	83 e0       	ldi	r24, 0x03	; 3
    24a4:	89 83       	std	Y+1, r24	; 0x01
		}

		return LOC_ES_tErrorState ;
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <LCD_ES_tInit>:
#include<util/delay.h>


/*LCD Driver Initialization*/
ES_t  LCD_ES_tInit(void)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	6d 97       	sbiw	r28, 0x1d	; 29
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
	ES_t LOC_ES_tErrorState = ES_NOK ;
    24c8:	1d 8e       	std	Y+29, r1	; 0x1d

	DIO_ES_tSetPinDirection(RS_GRP, RS_PIN, PIN_OUTPUT );
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	61 e0       	ldi	r22, 0x01	; 1
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(RW_GRP, RW_PIN, PIN_OUTPUT );
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(EN_GRP, EN_PIN, PIN_OUTPUT );
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>

	DIO_ES_tSetPinDirection(D7_GRP, D7_PIN, PIN_OUTPUT );
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	66 e0       	ldi	r22, 0x06	; 6
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D6_GRP, D6_PIN, PIN_OUTPUT );
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	65 e0       	ldi	r22, 0x05	; 5
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D5_GRP, D5_PIN, PIN_OUTPUT );
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	64 e0       	ldi	r22, 0x04	; 4
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D4_GRP, D4_PIN, PIN_OUTPUT );
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	63 e0       	ldi	r22, 0x03	; 3
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
	LCD_ES_tWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	62 e0       	ldi	r22, 0x02	; 2
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, 0 );
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	66 e0       	ldi	r22, 0x06	; 6
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, 0 );
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	65 e0       	ldi	r22, 0x05	; 5
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, 1 );
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	64 e0       	ldi	r22, 0x04	; 4
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, 0 );
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	63 e0       	ldi	r22, 0x03	; 3
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	62 e0       	ldi	r22, 0x02	; 2
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e8       	ldi	r26, 0x80	; 128
    2566:	bf e3       	ldi	r27, 0x3F	; 63
    2568:	89 8f       	std	Y+25, r24	; 0x19
    256a:	9a 8f       	std	Y+26, r25	; 0x1a
    256c:	ab 8f       	std	Y+27, r26	; 0x1b
    256e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	69 8d       	ldd	r22, Y+25	; 0x19
    2572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	55 e4       	ldi	r21, 0x45	; 69
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8d 8b       	std	Y+21, r24	; 0x15
    258a:	9e 8b       	std	Y+22, r25	; 0x16
    258c:	af 8b       	std	Y+23, r26	; 0x17
    258e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCD_ES_tInit+0xfe>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 8b       	std	Y+20, r25	; 0x14
    25ae:	8b 8b       	std	Y+19, r24	; 0x13
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCD_ES_tInit+0x17c>
	else if (__tmp > 65535)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCD_ES_tInit+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	69 8d       	ldd	r22, Y+25	; 0x19
    25cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_ES_tInit+0x15e>
    25f4:	80 e9       	ldi	r24, 0x90	; 144
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_ES_tInit+0x14c>
    2604:	9a 8b       	std	Y+18, r25	; 0x12
    2606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCD_ES_tInit+0x140>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <LCD_ES_tInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	6d 89       	ldd	r22, Y+21	; 0x15
    261e:	7e 89       	ldd	r23, Y+22	; 0x16
    2620:	8f 89       	ldd	r24, Y+23	; 0x17
    2622:	98 8d       	ldd	r25, Y+24	; 0x18
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_ES_tInit+0x188>
    2640:	98 8b       	std	Y+16, r25	; 0x10
    2642:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 ef       	ldi	r26, 0xF0	; 240
    2654:	b1 e4       	ldi	r27, 0x41	; 65
    2656:	8b 87       	std	Y+11, r24	; 0x0b
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ad 87       	std	Y+13, r26	; 0x0d
    265c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	55 e4       	ldi	r21, 0x45	; 69
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8f 83       	std	Y+7, r24	; 0x07
    2678:	98 87       	std	Y+8, r25	; 0x08
    267a:	a9 87       	std	Y+9, r26	; 0x09
    267c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_ES_tInit+0x1ec>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_ES_tInit+0x26a>
	else if (__tmp > 65535)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_ES_tInit+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_ES_tInit+0x24c>
    26e2:	80 e9       	ldi	r24, 0x90	; 144
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_ES_tInit+0x23a>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_ES_tInit+0x22e>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_ES_tInit+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_ES_tInit+0x276>
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	LCD_ES_tWriteNLatch(0x28);
    2732:	88 e2       	ldi	r24, 0x28	; 40
    2734:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
#else
#error "LCD mode configuration is wrong"
#endif

	//Display Control
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x0F);
    2742:	8f e0       	ldi	r24, 0x0F	; 15
    2744:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	//Display Clear
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x01);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
	//_delay_ms(2);

	//Entry Mode
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x06);
    2762:	86 e0       	ldi	r24, 0x06	; 6
    2764:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	return LOC_ES_tErrorState ;
    2768:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    276a:	6d 96       	adiw	r28, 0x1d	; 29
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <LCD_ES_tWriteData>:
/**************************************************************************************************************************************/
/*LCD write Data*/
ES_t   LCD_ES_tWriteData(u8 Copy_u8Data)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <LCD_ES_tWriteData+0x6>
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2788:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Data);
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    279e:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_ES_tWriteCommand>:
/****************************************************************************************************************************************/
/*LCD write command*/
ES_t   LCD_ES_tWriteCommand(u8 Copy_u8Command)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_ES_tWriteCommand+0x6>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    27b6:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Command);
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <LCD_ES_tWriteNLatch>:

/******************************************************************************************************************************************/
static ES_t LCD_ES_tWriteNLatch(u8 Copy_u8Byte)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	ea 97       	sbiw	r28, 0x3a	; 58
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	8a af       	std	Y+58, r24	; 0x3a
	ES_t LOC_ES_tErrorState = ES_NOK;
    27ee:	19 ae       	std	Y+57, r1	; 0x39
	_delay_ms(30);


#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	62 e0       	ldi	r22, 0x02	; 2
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>7)&1) );
    2804:	8a ad       	ldd	r24, Y+58	; 0x3a
    2806:	98 2f       	mov	r25, r24
    2808:	99 1f       	adc	r25, r25
    280a:	99 27       	eor	r25, r25
    280c:	99 1f       	adc	r25, r25
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	66 e0       	ldi	r22, 0x06	; 6
    2812:	49 2f       	mov	r20, r25
    2814:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>6)&1) );
    2818:	8a ad       	ldd	r24, Y+58	; 0x3a
    281a:	82 95       	swap	r24
    281c:	86 95       	lsr	r24
    281e:	86 95       	lsr	r24
    2820:	83 70       	andi	r24, 0x03	; 3
    2822:	98 2f       	mov	r25, r24
    2824:	91 70       	andi	r25, 0x01	; 1
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	65 e0       	ldi	r22, 0x05	; 5
    282a:	49 2f       	mov	r20, r25
    282c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>5)&1) );
    2830:	8a ad       	ldd	r24, Y+58	; 0x3a
    2832:	82 95       	swap	r24
    2834:	86 95       	lsr	r24
    2836:	87 70       	andi	r24, 0x07	; 7
    2838:	98 2f       	mov	r25, r24
    283a:	91 70       	andi	r25, 0x01	; 1
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	64 e0       	ldi	r22, 0x04	; 4
    2840:	49 2f       	mov	r20, r25
    2842:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>4)&1) );
    2846:	8a ad       	ldd	r24, Y+58	; 0x3a
    2848:	82 95       	swap	r24
    284a:	8f 70       	andi	r24, 0x0F	; 15
    284c:	98 2f       	mov	r25, r24
    284e:	91 70       	andi	r25, 0x01	; 1
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	49 2f       	mov	r20, r25
    2856:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	62 e0       	ldi	r22, 0x02	; 2
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 e8       	ldi	r26, 0x80	; 128
    286a:	bf e3       	ldi	r27, 0x3F	; 63
    286c:	8d ab       	std	Y+53, r24	; 0x35
    286e:	9e ab       	std	Y+54, r25	; 0x36
    2870:	af ab       	std	Y+55, r26	; 0x37
    2872:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	6d a9       	ldd	r22, Y+53	; 0x35
    2876:	7e a9       	ldd	r23, Y+54	; 0x36
    2878:	8f a9       	ldd	r24, Y+55	; 0x37
    287a:	98 ad       	ldd	r25, Y+56	; 0x38
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a e7       	ldi	r20, 0x7A	; 122
    2882:	55 e4       	ldi	r21, 0x45	; 69
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	89 ab       	std	Y+49, r24	; 0x31
    288e:	9a ab       	std	Y+50, r25	; 0x32
    2890:	ab ab       	std	Y+51, r26	; 0x33
    2892:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2894:	69 a9       	ldd	r22, Y+49	; 0x31
    2896:	7a a9       	ldd	r23, Y+50	; 0x32
    2898:	8b a9       	ldd	r24, Y+51	; 0x33
    289a:	9c a9       	ldd	r25, Y+52	; 0x34
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <LCD_ES_tWriteNLatch+0xde>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	98 ab       	std	Y+48, r25	; 0x30
    28b2:	8f a7       	std	Y+47, r24	; 0x2f
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <LCD_ES_tWriteNLatch+0x15c>
	else if (__tmp > 65535)
    28b6:	69 a9       	ldd	r22, Y+49	; 0x31
    28b8:	7a a9       	ldd	r23, Y+50	; 0x32
    28ba:	8b a9       	ldd	r24, Y+51	; 0x33
    28bc:	9c a9       	ldd	r25, Y+52	; 0x34
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <LCD_ES_tWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	6d a9       	ldd	r22, Y+53	; 0x35
    28d0:	7e a9       	ldd	r23, Y+54	; 0x36
    28d2:	8f a9       	ldd	r24, Y+55	; 0x37
    28d4:	98 ad       	ldd	r25, Y+56	; 0x38
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	98 ab       	std	Y+48, r25	; 0x30
    28f4:	8f a7       	std	Y+47, r24	; 0x2f
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <LCD_ES_tWriteNLatch+0x13e>
    28f8:	80 e9       	ldi	r24, 0x90	; 144
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	9e a7       	std	Y+46, r25	; 0x2e
    28fe:	8d a7       	std	Y+45, r24	; 0x2d
    2900:	8d a5       	ldd	r24, Y+45	; 0x2d
    2902:	9e a5       	ldd	r25, Y+46	; 0x2e
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_ES_tWriteNLatch+0x12c>
    2908:	9e a7       	std	Y+46, r25	; 0x2e
    290a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	8f a5       	ldd	r24, Y+47	; 0x2f
    290e:	98 a9       	ldd	r25, Y+48	; 0x30
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	98 ab       	std	Y+48, r25	; 0x30
    2914:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	8f a5       	ldd	r24, Y+47	; 0x2f
    2918:	98 a9       	ldd	r25, Y+48	; 0x30
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <LCD_ES_tWriteNLatch+0x120>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <LCD_ES_tWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	69 a9       	ldd	r22, Y+49	; 0x31
    2922:	7a a9       	ldd	r23, Y+50	; 0x32
    2924:	8b a9       	ldd	r24, Y+51	; 0x33
    2926:	9c a9       	ldd	r25, Y+52	; 0x34
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	98 ab       	std	Y+48, r25	; 0x30
    2932:	8f a7       	std	Y+47, r24	; 0x2f
    2934:	8f a5       	ldd	r24, Y+47	; 0x2f
    2936:	98 a9       	ldd	r25, Y+48	; 0x30
    2938:	9c a7       	std	Y+44, r25	; 0x2c
    293a:	8b a7       	std	Y+43, r24	; 0x2b
    293c:	8b a5       	ldd	r24, Y+43	; 0x2b
    293e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_ES_tWriteNLatch+0x168>
    2944:	9c a7       	std	Y+44, r25	; 0x2c
    2946:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	62 e0       	ldi	r22, 0x02	; 2
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 ef       	ldi	r26, 0xF0	; 240
    2958:	b1 e4       	ldi	r27, 0x41	; 65
    295a:	8f a3       	std	Y+39, r24	; 0x27
    295c:	98 a7       	std	Y+40, r25	; 0x28
    295e:	a9 a7       	std	Y+41, r26	; 0x29
    2960:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	6f a1       	ldd	r22, Y+39	; 0x27
    2964:	78 a5       	ldd	r23, Y+40	; 0x28
    2966:	89 a5       	ldd	r24, Y+41	; 0x29
    2968:	9a a5       	ldd	r25, Y+42	; 0x2a
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a e7       	ldi	r20, 0x7A	; 122
    2970:	55 e4       	ldi	r21, 0x45	; 69
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8b a3       	std	Y+35, r24	; 0x23
    297c:	9c a3       	std	Y+36, r25	; 0x24
    297e:	ad a3       	std	Y+37, r26	; 0x25
    2980:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2982:	6b a1       	ldd	r22, Y+35	; 0x23
    2984:	7c a1       	ldd	r23, Y+36	; 0x24
    2986:	8d a1       	ldd	r24, Y+37	; 0x25
    2988:	9e a1       	ldd	r25, Y+38	; 0x26
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <LCD_ES_tWriteNLatch+0x1cc>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9a a3       	std	Y+34, r25	; 0x22
    29a0:	89 a3       	std	Y+33, r24	; 0x21
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <LCD_ES_tWriteNLatch+0x24a>
	else if (__tmp > 65535)
    29a4:	6b a1       	ldd	r22, Y+35	; 0x23
    29a6:	7c a1       	ldd	r23, Y+36	; 0x24
    29a8:	8d a1       	ldd	r24, Y+37	; 0x25
    29aa:	9e a1       	ldd	r25, Y+38	; 0x26
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <LCD_ES_tWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	6f a1       	ldd	r22, Y+39	; 0x27
    29be:	78 a5       	ldd	r23, Y+40	; 0x28
    29c0:	89 a5       	ldd	r24, Y+41	; 0x29
    29c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9a a3       	std	Y+34, r25	; 0x22
    29e2:	89 a3       	std	Y+33, r24	; 0x21
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <LCD_ES_tWriteNLatch+0x22c>
    29e6:	80 e9       	ldi	r24, 0x90	; 144
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	98 a3       	std	Y+32, r25	; 0x20
    29ec:	8f 8f       	std	Y+31, r24	; 0x1f
    29ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29f0:	98 a1       	ldd	r25, Y+32	; 0x20
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_ES_tWriteNLatch+0x21a>
    29f6:	98 a3       	std	Y+32, r25	; 0x20
    29f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	89 a1       	ldd	r24, Y+33	; 0x21
    29fc:	9a a1       	ldd	r25, Y+34	; 0x22
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	9a a3       	std	Y+34, r25	; 0x22
    2a02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	89 a1       	ldd	r24, Y+33	; 0x21
    2a06:	9a a1       	ldd	r25, Y+34	; 0x22
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <LCD_ES_tWriteNLatch+0x20e>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <LCD_ES_tWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a10:	7c a1       	ldd	r23, Y+36	; 0x24
    2a12:	8d a1       	ldd	r24, Y+37	; 0x25
    2a14:	9e a1       	ldd	r25, Y+38	; 0x26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9a a3       	std	Y+34, r25	; 0x22
    2a20:	89 a3       	std	Y+33, r24	; 0x21
    2a22:	89 a1       	ldd	r24, Y+33	; 0x21
    2a24:	9a a1       	ldd	r25, Y+34	; 0x22
    2a26:	9e 8f       	std	Y+30, r25	; 0x1e
    2a28:	8d 8f       	std	Y+29, r24	; 0x1d
    2a2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_ES_tWriteNLatch+0x256>
    2a32:	9e 8f       	std	Y+30, r25	; 0x1e
    2a34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>3)&1) );
    2a36:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a38:	86 95       	lsr	r24
    2a3a:	86 95       	lsr	r24
    2a3c:	86 95       	lsr	r24
    2a3e:	98 2f       	mov	r25, r24
    2a40:	91 70       	andi	r25, 0x01	; 1
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	66 e0       	ldi	r22, 0x06	; 6
    2a46:	49 2f       	mov	r20, r25
    2a48:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>2)&1) );
    2a4c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a4e:	86 95       	lsr	r24
    2a50:	86 95       	lsr	r24
    2a52:	98 2f       	mov	r25, r24
    2a54:	91 70       	andi	r25, 0x01	; 1
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	65 e0       	ldi	r22, 0x05	; 5
    2a5a:	49 2f       	mov	r20, r25
    2a5c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>1)&1) );
    2a60:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a62:	86 95       	lsr	r24
    2a64:	98 2f       	mov	r25, r24
    2a66:	91 70       	andi	r25, 0x01	; 1
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	64 e0       	ldi	r22, 0x04	; 4
    2a6c:	49 2f       	mov	r20, r25
    2a6e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>0)&1) );
    2a72:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a74:	98 2f       	mov	r25, r24
    2a76:	91 70       	andi	r25, 0x01	; 1
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	63 e0       	ldi	r22, 0x03	; 3
    2a7c:	49 2f       	mov	r20, r25
    2a7e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	62 e0       	ldi	r22, 0x02	; 2
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	89 8f       	std	Y+25, r24	; 0x19
    2a96:	9a 8f       	std	Y+26, r25	; 0x1a
    2a98:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8d 8b       	std	Y+21, r24	; 0x15
    2ab6:	9e 8b       	std	Y+22, r25	; 0x16
    2ab8:	af 8b       	std	Y+23, r26	; 0x17
    2aba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <LCD_ES_tWriteNLatch+0x306>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <LCD_ES_tWriteNLatch+0x384>
	else if (__tmp > 65535)
    2ade:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <LCD_ES_tWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	69 8d       	ldd	r22, Y+25	; 0x19
    2af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_ES_tWriteNLatch+0x366>
    2b20:	80 e9       	ldi	r24, 0x90	; 144
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	9a 8b       	std	Y+18, r25	; 0x12
    2b26:	89 8b       	std	Y+17, r24	; 0x11
    2b28:	89 89       	ldd	r24, Y+17	; 0x11
    2b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_ES_tWriteNLatch+0x354>
    2b30:	9a 8b       	std	Y+18, r25	; 0x12
    2b32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8b 89       	ldd	r24, Y+19	; 0x13
    2b36:	9c 89       	ldd	r25, Y+20	; 0x14
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <LCD_ES_tWriteNLatch+0x348>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <LCD_ES_tWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	98 8b       	std	Y+16, r25	; 0x10
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 89       	ldd	r25, Y+16	; 0x10
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_ES_tWriteNLatch+0x390>
    2b6c:	98 8b       	std	Y+16, r25	; 0x10
    2b6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	62 e0       	ldi	r22, 0x02	; 2
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 ef       	ldi	r26, 0xF0	; 240
    2b80:	b1 e4       	ldi	r27, 0x41	; 65
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a e7       	ldi	r20, 0x7A	; 122
    2b98:	55 e4       	ldi	r21, 0x45	; 69
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <LCD_ES_tWriteNLatch+0x3f4>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <LCD_ES_tWriteNLatch+0x472>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <LCD_ES_tWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <LCD_ES_tWriteNLatch+0x454>
    2c0e:	80 e9       	ldi	r24, 0x90	; 144
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_ES_tWriteNLatch+0x442>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <LCD_ES_tWriteNLatch+0x436>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <LCD_ES_tWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_ES_tWriteNLatch+0x47e>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01

#else
#error "LCD mode configuration is wrong"
#endif

	return LOC_ES_tErrorState;
    2c5e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2c60:	ea 96       	adiw	r28, 0x3a	; 58
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	08 95       	ret

00002c72 <LCD_ES_tWriteString>:
/***********************************************************************************************************************/
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <LCD_ES_tWriteString+0x6>
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <LCD_ES_tWriteString+0x8>
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03

	ES_t LOC_ES_tErrorState = ES_NOK;
    2c82:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8Iterator = 0 ;
    2c84:	19 82       	std	Y+1, r1	; 0x01
    2c86:	13 c0       	rjmp	.+38     	; 0x2cae <LCD_ES_tWriteString+0x3c>
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
	{
		//LCD_enuWriteData(Copy_u8Data[LOC_u8Iterator]);
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	e2 0f       	add	r30, r18
    2ca0:	f3 1f       	adc	r31, r19
    2ca2:	80 81       	ld	r24, Z
    2ca4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
		LOC_u8Iterator++;
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{

	ES_t LOC_ES_tErrorState = ES_NOK;
	u8 LOC_u8Iterator = 0 ;
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e2 0f       	add	r30, r18
    2cbc:	f3 1f       	adc	r31, r19
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 23       	and	r24, r24
    2cc2:	11 f7       	brne	.-60     	; 0x2c88 <LCD_ES_tWriteString+0x16>
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}

	return LOC_ES_tErrorState;
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <LCD_ES_tSendIntgerNum>:
/***********************************************************************************************************************/
ES_t LCD_ES_tSendIntgerNum(s32 Copy_s32Num)
{
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	62 97       	sbiw	r28, 0x12	; 18
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	6f 87       	std	Y+15, r22	; 0x0f
    2cee:	78 8b       	std	Y+16, r23	; 0x10
    2cf0:	89 8b       	std	Y+17, r24	; 0x11
    2cf2:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t LOC_ES_tErrorState = ES_NOK;
    2cf4:	1c 82       	std	Y+4, r1	; 0x04

	s8 LOC_s8Sign = -1;
    2cf6:	8f ef       	ldi	r24, 0xFF	; 255
    2cf8:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_u8ArrIndex = 0;
    2cfa:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8ArrNmber[10];
	/*Check Sign*/
	if(Copy_s32Num < 0)
    2cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfe:	98 89       	ldd	r25, Y+16	; 0x10
    2d00:	a9 89       	ldd	r26, Y+17	; 0x11
    2d02:	ba 89       	ldd	r27, Y+18	; 0x12
    2d04:	bb 23       	and	r27, r27
    2d06:	0c f0       	brlt	.+2      	; 0x2d0a <LCD_ES_tSendIntgerNum+0x36>
    2d08:	4b c0       	rjmp	.+150    	; 0x2da0 <LCD_ES_tSendIntgerNum+0xcc>
	{
		/*display Sign*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch('-');
    2d14:	8d e2       	ldi	r24, 0x2D	; 45
    2d16:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
		/*make The number Positive*/
		Copy_s32Num *=LOC_s8Sign ;
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	33 27       	eor	r19, r19
    2d20:	27 fd       	sbrc	r18, 7
    2d22:	30 95       	com	r19
    2d24:	43 2f       	mov	r20, r19
    2d26:	53 2f       	mov	r21, r19
    2d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2a:	98 89       	ldd	r25, Y+16	; 0x10
    2d2c:	a9 89       	ldd	r26, Y+17	; 0x11
    2d2e:	ba 89       	ldd	r27, Y+18	; 0x12
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8f 87       	std	Y+15, r24	; 0x0f
    2d3e:	98 8b       	std	Y+16, r25	; 0x10
    2d40:	a9 8b       	std	Y+17, r26	; 0x11
    2d42:	ba 8b       	std	Y+18, r27	; 0x12
    2d44:	52 c0       	rjmp	.+164    	; 0x2dea <LCD_ES_tSendIntgerNum+0x116>
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	08 2f       	mov	r16, r24
    2d4a:	10 e0       	ldi	r17, 0x00	; 0
    2d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d4e:	98 89       	ldd	r25, Y+16	; 0x10
    2d50:	a9 89       	ldd	r26, Y+17	; 0x11
    2d52:	ba 89       	ldd	r27, Y+18	; 0x12
    2d54:	2a e0       	ldi	r18, 0x0A	; 10
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__divmodsi4>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	28 2f       	mov	r18, r24
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	05 96       	adiw	r24, 0x05	; 5
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e0 0f       	add	r30, r16
    2d72:	f1 1f       	adc	r31, r17
    2d74:	20 83       	st	Z, r18
			Copy_s32Num/=10;
    2d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d78:	98 89       	ldd	r25, Y+16	; 0x10
    2d7a:	a9 89       	ldd	r26, Y+17	; 0x11
    2d7c:	ba 89       	ldd	r27, Y+18	; 0x12
    2d7e:	2a e0       	ldi	r18, 0x0A	; 10
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__divmodsi4>
    2d8e:	da 01       	movw	r26, r20
    2d90:	c9 01       	movw	r24, r18
    2d92:	8f 87       	std	Y+15, r24	; 0x0f
    2d94:	98 8b       	std	Y+16, r25	; 0x10
    2d96:	a9 8b       	std	Y+17, r26	; 0x11
    2d98:	ba 8b       	std	Y+18, r27	; 0x12
			LOC_u8ArrIndex++;
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Num *=LOC_s8Sign ;
	}
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
    2da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da2:	98 89       	ldd	r25, Y+16	; 0x10
    2da4:	a9 89       	ldd	r26, Y+17	; 0x11
    2da6:	ba 89       	ldd	r27, Y+18	; 0x12
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	a1 05       	cpc	r26, r1
    2dac:	b1 05       	cpc	r27, r1
    2dae:	59 f6       	brne	.-106    	; 0x2d46 <LCD_ES_tSendIntgerNum+0x72>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	81 50       	subi	r24, 0x01	; 1
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	16 c0       	rjmp	.+44     	; 0x2de4 <LCD_ES_tSendIntgerNum+0x110>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	33 27       	eor	r19, r19
    2dc8:	27 fd       	sbrc	r18, 7
    2dca:	30 95       	com	r19
    2dcc:	ce 01       	movw	r24, r28
    2dce:	05 96       	adiw	r24, 0x05	; 5
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e2 0f       	add	r30, r18
    2dd4:	f3 1f       	adc	r31, r19
    2dd6:	80 81       	ld	r24, Z
    2dd8:	80 5d       	subi	r24, 0xD0	; 208
    2dda:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	81 50       	subi	r24, 0x01	; 1
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	88 23       	and	r24, r24
    2de8:	3c f7       	brge	.-50     	; 0x2db8 <LCD_ES_tSendIntgerNum+0xe4>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');

		}
	}

	return LOC_ES_tErrorState;
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2dec:	62 96       	adiw	r28, 0x12	; 18
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <LCD_ES_tCustomAlphChar>:

/************************************************************************************************************************/
/*LCD Create SpecialCharacter 8 Bits*/
ES_t  LCD_ES_tCustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <LCD_ES_tCustomAlphChar+0x6>
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <LCD_ES_tCustomAlphChar+0x8>
    2e0a:	0f 92       	push	r0
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	7d 83       	std	Y+5, r23	; 0x05
    2e14:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    2e16:	1a 82       	std	Y+2, r1	; 0x02
	/*you have only 8 patterns to be customized */

	if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	88 30       	cpi	r24, 0x08	; 8
    2e1c:	70 f5       	brcc	.+92     	; 0x2e7a <LCD_ES_tCustomAlphChar+0x78>
	{
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	61 e0       	ldi	r22, 0x01	; 1
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	88 2f       	mov	r24, r24
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	08 96       	adiw	r24, 0x08	; 8
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	8a 83       	std	Y+2, r24	; 0x02
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    2e44:	19 82       	std	Y+1, r1	; 0x01
    2e46:	13 c0       	rjmp	.+38     	; 0x2e6e <LCD_ES_tCustomAlphChar+0x6c>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
    2e4c:	41 e0       	ldi	r20, 0x01	; 1
    2e4e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e2 0f       	add	r30, r18
    2e60:	f3 1f       	adc	r31, r19
    2e62:	80 81       	ld	r24, Z
    2e64:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
		LOC_ES_tErrorState = ES_OK ;
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	8f 5f       	subi	r24, 0xFF	; 255
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	88 30       	cpi	r24, 0x08	; 8
    2e72:	50 f3       	brcs	.-44     	; 0x2e48 <LCD_ES_tCustomAlphChar+0x46>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
		}
		LOC_ES_tErrorState = ES_OK;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	8a 83       	std	Y+2, r24	; 0x02
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <LCD_ES_tCustomAlphChar+0x7c>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return LOC_ES_tErrorState;
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <LCD_ES_tGoToPosition>:
/********************************************************************************************************************************************************/

/*LCD Go To Position*/

ES_t   LCD_ES_tGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col)
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <LCD_ES_tGoToPosition+0x6>
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <LCD_ES_tGoToPosition+0x8>
    2e98:	0f 92       	push	r0
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	8c 83       	std	Y+4, r24	; 0x04
    2ea0:	6d 83       	std	Y+5, r22	; 0x05
	ES_t LOC_ES_tErrorState = ES_NOK;
    2ea2:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8ArrRow[2] = {0x80,0xC0};
    2ea4:	80 e8       	ldi	r24, 0x80	; 128
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	80 ec       	ldi	r24, 0xC0	; 192
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
	if( (1<=Copy_u8Row && Copy_u8Row<=2 ) &&
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	88 23       	and	r24, r24
    2eb0:	11 f1       	breq	.+68     	; 0x2ef6 <LCD_ES_tGoToPosition+0x66>
    2eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	f8 f4       	brcc	.+62     	; 0x2ef6 <LCD_ES_tGoToPosition+0x66>
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	88 23       	and	r24, r24
    2ebc:	e1 f0       	breq	.+56     	; 0x2ef6 <LCD_ES_tGoToPosition+0x66>
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	81 31       	cpi	r24, 0x11	; 17
    2ec2:	c8 f4       	brcc	.+50     	; 0x2ef6 <LCD_ES_tGoToPosition+0x66>
			(1<=Copy_u8Col && Copy_u8Col<=16))
	{
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	61 e0       	ldi	r22, 0x01	; 1
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(LOC_u8ArrRow[Copy_u8Row-1]+ Copy_u8Col-1);
    2ece:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9c 01       	movw	r18, r24
    2ed6:	21 50       	subi	r18, 0x01	; 1
    2ed8:	30 40       	sbci	r19, 0x00	; 0
    2eda:	ce 01       	movw	r24, r28
    2edc:	02 96       	adiw	r24, 0x02	; 2
    2ede:	fc 01       	movw	r30, r24
    2ee0:	e2 0f       	add	r30, r18
    2ee2:	f3 1f       	adc	r31, r19
    2ee4:	90 81       	ld	r25, Z
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	89 0f       	add	r24, r25
    2eea:	81 50       	subi	r24, 0x01	; 1
    2eec:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <LCD_ES_tGoToPosition+0x6a>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState;
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <KPAD_ES_tInit>:
#include<util/delay.h>


/*KeyPad Initialization*/
ES_t KPAD_ES_tInit(void)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	0f 92       	push	r0
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState =ES_NOK ;
    2f16:	19 82       	std	Y+1, r1	; 0x01
	/*Set Row Input Direction */
	DIO_ES_tSetPinDirection(R1_GRP,R1_PIN,PIN_INPUT);
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	64 e0       	ldi	r22, 0x04	; 4
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R2_GRP,R2_PIN,PIN_INPUT);
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	65 e0       	ldi	r22, 0x05	; 5
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R3_GRP,R3_PIN,PIN_INPUT);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	66 e0       	ldi	r22, 0x06	; 6
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R4_GRP,R4_PIN,PIN_INPUT);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	67 e0       	ldi	r22, 0x07	; 7
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	/*Active internal Pull up in Row*/
	DIO_ES_tSetPinValue(R1_GRP,R1_PIN,DIO_PULLUP);
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R2_GRP,R2_PIN,DIO_PULLUP);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	65 e0       	ldi	r22, 0x05	; 5
    2f4e:	41 e0       	ldi	r20, 0x01	; 1
    2f50:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R3_GRP,R3_PIN,DIO_PULLUP);
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	66 e0       	ldi	r22, 0x06	; 6
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R4_GRP,R4_PIN,DIO_PULLUP);
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	67 e0       	ldi	r22, 0x07	; 7
    2f62:	41 e0       	ldi	r20, 0x01	; 1
    2f64:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>

	/*Set COL Output Direction */
	DIO_ES_tSetPinDirection(C1_GRP,C1_PIN,PIN_OUTPUT);
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	62 e0       	ldi	r22, 0x02	; 2
    2f6c:	41 e0       	ldi	r20, 0x01	; 1
    2f6e:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C2_GRP,C2_PIN,PIN_OUTPUT);
    2f72:	83 e0       	ldi	r24, 0x03	; 3
    2f74:	63 e0       	ldi	r22, 0x03	; 3
    2f76:	41 e0       	ldi	r20, 0x01	; 1
    2f78:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C3_GRP,C3_PIN,PIN_OUTPUT);
    2f7c:	83 e0       	ldi	r24, 0x03	; 3
    2f7e:	64 e0       	ldi	r22, 0x04	; 4
    2f80:	41 e0       	ldi	r20, 0x01	; 1
    2f82:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C4_GRP,C4_PIN,PIN_OUTPUT);
    2f86:	83 e0       	ldi	r24, 0x03	; 3
    2f88:	65 e0       	ldi	r22, 0x05	; 5
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>

	/*Cols Initial Vales High*/
	DIO_ES_tSetPinValue(C1_GRP,C1_PIN,PIN_HIGH);
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	62 e0       	ldi	r22, 0x02	; 2
    2f94:	41 e0       	ldi	r20, 0x01	; 1
    2f96:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C2_GRP,C2_PIN,PIN_HIGH);
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	63 e0       	ldi	r22, 0x03	; 3
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C3_GRP,C3_PIN,PIN_HIGH);
    2fa4:	83 e0       	ldi	r24, 0x03	; 3
    2fa6:	64 e0       	ldi	r22, 0x04	; 4
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C4_GRP,C4_PIN,PIN_HIGH);
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	65 e0       	ldi	r22, 0x05	; 5
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
	 LOC_ES_tErrorState =ES_OK ;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState;
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <KPAD_ES_tGetPressedKey>:


/*Get Pressed Key*/
ES_t KPAD_ES_tGetPressedKey(u8* Copy_u8PressedKey)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	e9 97       	sbiw	r28, 0x39	; 57
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	9c ab       	std	Y+52, r25	; 0x34
    2fdc:	8b ab       	std	Y+51, r24	; 0x33

	ES_t LOC_ES_tErrorState =ES_NOK ;
    2fde:	19 8a       	std	Y+17, r1	; 0x11
	    u8 Local_u8RowIter =0;
    2fe0:	18 8a       	std	Y+16, r1	; 0x10
		u8 Local_u8ColIter =0;
    2fe2:	1f 86       	std	Y+15, r1	; 0x0f
		u8 Local_u8Value=0xff;
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	8a 8b       	std	Y+18, r24	; 0x12

		u8 Local_u8ColGrp[COL_NUM]={C1_GRP,C2_GRP,C3_GRP,C4_GRP};
    2fe8:	83 e0       	ldi	r24, 0x03	; 3
    2fea:	8b 8b       	std	Y+19, r24	; 0x13
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	8c 8b       	std	Y+20, r24	; 0x14
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	8d 8b       	std	Y+21, r24	; 0x15
    2ff4:	83 e0       	ldi	r24, 0x03	; 3
    2ff6:	8e 8b       	std	Y+22, r24	; 0x16
		u8 Local_u8ColPin[COL_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	8f 8b       	std	Y+23, r24	; 0x17
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	88 8f       	std	Y+24, r24	; 0x18
    3000:	84 e0       	ldi	r24, 0x04	; 4
    3002:	89 8f       	std	Y+25, r24	; 0x19
    3004:	85 e0       	ldi	r24, 0x05	; 5
    3006:	8a 8f       	std	Y+26, r24	; 0x1a

		u8 Local_u8RowGrp[ROW_NUM]={R1_GRP,R2_GRP,R3_GRP,R4_GRP};
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	8b 8f       	std	Y+27, r24	; 0x1b
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	8c 8f       	std	Y+28, r24	; 0x1c
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	8d 8f       	std	Y+29, r24	; 0x1d
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 Local_u8RowPin[ROW_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    3018:	84 e0       	ldi	r24, 0x04	; 4
    301a:	8f 8f       	std	Y+31, r24	; 0x1f
    301c:	85 e0       	ldi	r24, 0x05	; 5
    301e:	88 a3       	std	Y+32, r24	; 0x20
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	89 a3       	std	Y+33, r24	; 0x21
    3024:	87 e0       	ldi	r24, 0x07	; 7
    3026:	8a a3       	std	Y+34, r24	; 0x22

           /*Dummy value*/
		*Copy_u8PressedKey = KEYPAD_NOT_PRESSED;
    3028:	eb a9       	ldd	r30, Y+51	; 0x33
    302a:	fc a9       	ldd	r31, Y+52	; 0x34
    302c:	8f ef       	ldi	r24, 0xFF	; 255
    302e:	80 83       	st	Z, r24
    3030:	3e c1       	rjmp	.+636    	; 0x32ae <KPAD_ES_tGetPressedKey+0x2e8>

		for(; Local_u8ColIter < COL_NUM; Local_u8ColIter++)
		{
			/*Active Column [i]*/
			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
    3032:	8f 85       	ldd	r24, Y+15	; 0x0f
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	ce 01       	movw	r24, r28
    303a:	43 96       	adiw	r24, 0x13	; 19
    303c:	fc 01       	movw	r30, r24
    303e:	e2 0f       	add	r30, r18
    3040:	f3 1f       	adc	r31, r19
    3042:	40 81       	ld	r20, Z
    3044:	8f 85       	ldd	r24, Y+15	; 0x0f
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	ce 01       	movw	r24, r28
    304c:	47 96       	adiw	r24, 0x17	; 23
    304e:	fc 01       	movw	r30, r24
    3050:	e2 0f       	add	r30, r18
    3052:	f3 1f       	adc	r31, r19
    3054:	90 81       	ld	r25, Z
    3056:	84 2f       	mov	r24, r20
    3058:	69 2f       	mov	r22, r25
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
					Local_u8ColPin[Local_u8ColIter], PIN_LOW);

			for (Local_u8RowIter=0;Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    3060:	18 8a       	std	Y+16, r1	; 0x10
    3062:	07 c1       	rjmp	.+526    	; 0x3272 <KPAD_ES_tGetPressedKey+0x2ac>
			{
				DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    3064:	88 89       	ldd	r24, Y+16	; 0x10
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	ce 01       	movw	r24, r28
    306c:	4b 96       	adiw	r24, 0x1b	; 27
    306e:	fc 01       	movw	r30, r24
    3070:	e2 0f       	add	r30, r18
    3072:	f3 1f       	adc	r31, r19
    3074:	40 81       	ld	r20, Z
    3076:	88 89       	ldd	r24, Y+16	; 0x10
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	ce 01       	movw	r24, r28
    307e:	4f 96       	adiw	r24, 0x1f	; 31
    3080:	fc 01       	movw	r30, r24
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	90 81       	ld	r25, Z
    3088:	9e 01       	movw	r18, r28
    308a:	2e 5e       	subi	r18, 0xEE	; 238
    308c:	3f 4f       	sbci	r19, 0xFF	; 255
    308e:	84 2f       	mov	r24, r20
    3090:	69 2f       	mov	r22, r25
    3092:	a9 01       	movw	r20, r18
    3094:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DIO_ES_tGetPinValue>
						Local_u8RowPin[Local_u8RowIter], &Local_u8Value);

				if ( ! Local_u8Value)
    3098:	8a 89       	ldd	r24, Y+18	; 0x12
    309a:	88 23       	and	r24, r24
    309c:	09 f0       	breq	.+2      	; 0x30a0 <KPAD_ES_tGetPressedKey+0xda>
    309e:	e6 c0       	rjmp	.+460    	; 0x326c <KPAD_ES_tGetPressedKey+0x2a6>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a0 e2       	ldi	r26, 0x20	; 32
    30a6:	b1 e4       	ldi	r27, 0x41	; 65
    30a8:	8b 87       	std	Y+11, r24	; 0x0b
    30aa:	9c 87       	std	Y+12, r25	; 0x0c
    30ac:	ad 87       	std	Y+13, r26	; 0x0d
    30ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	4a e7       	ldi	r20, 0x7A	; 122
    30be:	55 e4       	ldi	r21, 0x45	; 69
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	8f 83       	std	Y+7, r24	; 0x07
    30ca:	98 87       	std	Y+8, r25	; 0x08
    30cc:	a9 87       	std	Y+9, r26	; 0x09
    30ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d0:	6f 81       	ldd	r22, Y+7	; 0x07
    30d2:	78 85       	ldd	r23, Y+8	; 0x08
    30d4:	89 85       	ldd	r24, Y+9	; 0x09
    30d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e8       	ldi	r20, 0x80	; 128
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e4:	88 23       	and	r24, r24
    30e6:	2c f4       	brge	.+10     	; 0x30f2 <KPAD_ES_tGetPressedKey+0x12c>
		__ticks = 1;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	3f c0       	rjmp	.+126    	; 0x3170 <KPAD_ES_tGetPressedKey+0x1aa>
	else if (__tmp > 65535)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	4c f5       	brge	.+82     	; 0x315c <KPAD_ES_tGetPressedKey+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310a:	6b 85       	ldd	r22, Y+11	; 0x0b
    310c:	7c 85       	ldd	r23, Y+12	; 0x0c
    310e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3110:	9e 85       	ldd	r25, Y+14	; 0x0e
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9e 83       	std	Y+6, r25	; 0x06
    3130:	8d 83       	std	Y+5, r24	; 0x05
    3132:	0f c0       	rjmp	.+30     	; 0x3152 <KPAD_ES_tGetPressedKey+0x18c>
    3134:	80 e9       	ldi	r24, 0x90	; 144
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <KPAD_ES_tGetPressedKey+0x17a>
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3152:	8d 81       	ldd	r24, Y+5	; 0x05
    3154:	9e 81       	ldd	r25, Y+6	; 0x06
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	69 f7       	brne	.-38     	; 0x3134 <KPAD_ES_tGetPressedKey+0x16e>
    315a:	14 c0       	rjmp	.+40     	; 0x3184 <KPAD_ES_tGetPressedKey+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <KPAD_ES_tGetPressedKey+0x1b6>
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);// to avoid bouncing
					DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    3184:	88 89       	ldd	r24, Y+16	; 0x10
    3186:	28 2f       	mov	r18, r24
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	ce 01       	movw	r24, r28
    318c:	4b 96       	adiw	r24, 0x1b	; 27
    318e:	fc 01       	movw	r30, r24
    3190:	e2 0f       	add	r30, r18
    3192:	f3 1f       	adc	r31, r19
    3194:	40 81       	ld	r20, Z
    3196:	88 89       	ldd	r24, Y+16	; 0x10
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	ce 01       	movw	r24, r28
    319e:	4f 96       	adiw	r24, 0x1f	; 31
    31a0:	fc 01       	movw	r30, r24
    31a2:	e2 0f       	add	r30, r18
    31a4:	f3 1f       	adc	r31, r19
    31a6:	90 81       	ld	r25, Z
    31a8:	9e 01       	movw	r18, r28
    31aa:	2e 5e       	subi	r18, 0xEE	; 238
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	84 2f       	mov	r24, r20
    31b0:	69 2f       	mov	r22, r25
    31b2:	a9 01       	movw	r20, r18
    31b4:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DIO_ES_tGetPinValue>
										Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
					if ( ! Local_u8Value)
    31b8:	8a 89       	ldd	r24, Y+18	; 0x12
    31ba:	88 23       	and	r24, r24
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <KPAD_ES_tGetPressedKey+0x1fa>
    31be:	56 c0       	rjmp	.+172    	; 0x326c <KPAD_ES_tGetPressedKey+0x2a6>
    31c0:	1a c0       	rjmp	.+52     	; 0x31f6 <KPAD_ES_tGetPressedKey+0x230>
					{
						//prevent holding press
						while ( ! Local_u8Value)
							DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    31c2:	88 89       	ldd	r24, Y+16	; 0x10
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	ce 01       	movw	r24, r28
    31ca:	4b 96       	adiw	r24, 0x1b	; 27
    31cc:	fc 01       	movw	r30, r24
    31ce:	e2 0f       	add	r30, r18
    31d0:	f3 1f       	adc	r31, r19
    31d2:	40 81       	ld	r20, Z
    31d4:	88 89       	ldd	r24, Y+16	; 0x10
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	ce 01       	movw	r24, r28
    31dc:	4f 96       	adiw	r24, 0x1f	; 31
    31de:	fc 01       	movw	r30, r24
    31e0:	e2 0f       	add	r30, r18
    31e2:	f3 1f       	adc	r31, r19
    31e4:	90 81       	ld	r25, Z
    31e6:	9e 01       	movw	r18, r28
    31e8:	2e 5e       	subi	r18, 0xEE	; 238
    31ea:	3f 4f       	sbci	r19, 0xFF	; 255
    31ec:	84 2f       	mov	r24, r20
    31ee:	69 2f       	mov	r22, r25
    31f0:	a9 01       	movw	r20, r18
    31f2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <DIO_ES_tGetPinValue>
					DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
										Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
					if ( ! Local_u8Value)
					{
						//prevent holding press
						while ( ! Local_u8Value)
    31f6:	8a 89       	ldd	r24, Y+18	; 0x12
    31f8:	88 23       	and	r24, r24
    31fa:	19 f3       	breq	.-58     	; 0x31c2 <KPAD_ES_tGetPressedKey+0x1fc>
							DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
									Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
						//return switch value
						u8 Local_Au8KeyValues[ROW_NUM][COL_NUM]=KEY_VALUES;
    31fc:	ce 01       	movw	r24, r28
    31fe:	83 96       	adiw	r24, 0x23	; 35
    3200:	9e ab       	std	Y+54, r25	; 0x36
    3202:	8d ab       	std	Y+53, r24	; 0x35
    3204:	e0 ea       	ldi	r30, 0xA0	; 160
    3206:	f1 e0       	ldi	r31, 0x01	; 1
    3208:	f8 af       	std	Y+56, r31	; 0x38
    320a:	ef ab       	std	Y+55, r30	; 0x37
    320c:	f0 e1       	ldi	r31, 0x10	; 16
    320e:	f9 af       	std	Y+57, r31	; 0x39
    3210:	ef a9       	ldd	r30, Y+55	; 0x37
    3212:	f8 ad       	ldd	r31, Y+56	; 0x38
    3214:	00 80       	ld	r0, Z
    3216:	8f a9       	ldd	r24, Y+55	; 0x37
    3218:	98 ad       	ldd	r25, Y+56	; 0x38
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	98 af       	std	Y+56, r25	; 0x38
    321e:	8f ab       	std	Y+55, r24	; 0x37
    3220:	ed a9       	ldd	r30, Y+53	; 0x35
    3222:	fe a9       	ldd	r31, Y+54	; 0x36
    3224:	00 82       	st	Z, r0
    3226:	8d a9       	ldd	r24, Y+53	; 0x35
    3228:	9e a9       	ldd	r25, Y+54	; 0x36
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	9e ab       	std	Y+54, r25	; 0x36
    322e:	8d ab       	std	Y+53, r24	; 0x35
    3230:	99 ad       	ldd	r25, Y+57	; 0x39
    3232:	91 50       	subi	r25, 0x01	; 1
    3234:	99 af       	std	Y+57, r25	; 0x39
    3236:	e9 ad       	ldd	r30, Y+57	; 0x39
    3238:	ee 23       	and	r30, r30
    323a:	51 f7       	brne	.-44     	; 0x3210 <KPAD_ES_tGetPressedKey+0x24a>
						*Copy_u8PressedKey=Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    323c:	88 89       	ldd	r24, Y+16	; 0x10
    323e:	28 2f       	mov	r18, r24
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	8f 85       	ldd	r24, Y+15	; 0x0f
    3244:	48 2f       	mov	r20, r24
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	22 0f       	add	r18, r18
    324a:	33 1f       	adc	r19, r19
    324c:	22 0f       	add	r18, r18
    324e:	33 1f       	adc	r19, r19
    3250:	ce 01       	movw	r24, r28
    3252:	01 96       	adiw	r24, 0x01	; 1
    3254:	82 0f       	add	r24, r18
    3256:	93 1f       	adc	r25, r19
    3258:	84 0f       	add	r24, r20
    325a:	95 1f       	adc	r25, r21
    325c:	fc 01       	movw	r30, r24
    325e:	b2 96       	adiw	r30, 0x22	; 34
    3260:	80 81       	ld	r24, Z
    3262:	eb a9       	ldd	r30, Y+51	; 0x33
    3264:	fc a9       	ldd	r31, Y+52	; 0x34
    3266:	80 83       	st	Z, r24
						 LOC_ES_tErrorState =ES_OK ;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	89 8b       	std	Y+17, r24	; 0x11
		{
			/*Active Column [i]*/
			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
					Local_u8ColPin[Local_u8ColIter], PIN_LOW);

			for (Local_u8RowIter=0;Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    326c:	88 89       	ldd	r24, Y+16	; 0x10
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	88 8b       	std	Y+16, r24	; 0x10
    3272:	88 89       	ldd	r24, Y+16	; 0x10
    3274:	84 30       	cpi	r24, 0x04	; 4
    3276:	08 f4       	brcc	.+2      	; 0x327a <KPAD_ES_tGetPressedKey+0x2b4>
    3278:	f5 ce       	rjmp	.-534    	; 0x3064 <KPAD_ES_tGetPressedKey+0x9e>
						 LOC_ES_tErrorState =ES_OK ;
					}
				}
			}

			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
    327a:	8f 85       	ldd	r24, Y+15	; 0x0f
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	ce 01       	movw	r24, r28
    3282:	43 96       	adiw	r24, 0x13	; 19
    3284:	fc 01       	movw	r30, r24
    3286:	e2 0f       	add	r30, r18
    3288:	f3 1f       	adc	r31, r19
    328a:	40 81       	ld	r20, Z
    328c:	8f 85       	ldd	r24, Y+15	; 0x0f
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	ce 01       	movw	r24, r28
    3294:	47 96       	adiw	r24, 0x17	; 23
    3296:	fc 01       	movw	r30, r24
    3298:	e2 0f       	add	r30, r18
    329a:	f3 1f       	adc	r31, r19
    329c:	90 81       	ld	r25, Z
    329e:	84 2f       	mov	r24, r20
    32a0:	69 2f       	mov	r22, r25
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_ES_tSetPinValue>
		u8 Local_u8RowPin[ROW_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};

           /*Dummy value*/
		*Copy_u8PressedKey = KEYPAD_NOT_PRESSED;

		for(; Local_u8ColIter < COL_NUM; Local_u8ColIter++)
    32a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32aa:	8f 5f       	subi	r24, 0xFF	; 255
    32ac:	8f 87       	std	Y+15, r24	; 0x0f
    32ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b0:	84 30       	cpi	r24, 0x04	; 4
    32b2:	08 f4       	brcc	.+2      	; 0x32b6 <KPAD_ES_tGetPressedKey+0x2f0>
    32b4:	be ce       	rjmp	.-644    	; 0x3032 <KPAD_ES_tGetPressedKey+0x6c>
			}

			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
					Local_u8ColPin[Local_u8ColIter], PIN_HIGH);
		}
	return LOC_ES_tErrorState;
    32b6:	89 89       	ldd	r24, Y+17	; 0x11

}
    32b8:	e9 96       	adiw	r28, 0x39	; 57
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <main>:
	u8 pin ;
	u8 flag ;
}ISR_t ;

int main(void)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	28 97       	sbiw	r28, 0x08	; 8
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61

	ISR_t up = {0, DIO_PORTC ,PIN2, 0 };
    32de:	19 82       	std	Y+1, r1	; 0x01
    32e0:	82 e0       	ldi	r24, 0x02	; 2
    32e2:	8a 83       	std	Y+2, r24	; 0x02
    32e4:	82 e0       	ldi	r24, 0x02	; 2
    32e6:	8b 83       	std	Y+3, r24	; 0x03
    32e8:	1c 82       	std	Y+4, r1	; 0x04
	ISR_t up2 = {0, DIO_PORTC ,PIN1, 0 };
    32ea:	1d 82       	std	Y+5, r1	; 0x05
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	8e 83       	std	Y+6, r24	; 0x06
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	8f 83       	std	Y+7, r24	; 0x07
    32f4:	18 86       	std	Y+8, r1	; 0x08

	GIE_ES_tInit();
    32f6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_ES_tInit>
	LCD_ES_tInit();
    32fa:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_ES_tInit>
	/*Interrupt Direction INT0,INT1 */
	DIO_ES_tSetPinDirection(DIO_PORTD,PIN2,PIN_INPUT);
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	62 e0       	ldi	r22, 0x02	; 2
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_PORTD,PIN3,PIN_INPUT);
    3308:	83 e0       	ldi	r24, 0x03	; 3
    330a:	63 e0       	ldi	r22, 0x03	; 3
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>

	/*PIN_OUTPUT*/

	DIO_ES_tSetPinDirection(DIO_PORTC,PIN2,PIN_OUTPUT);
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	62 e0       	ldi	r22, 0x02	; 2
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_PORTC,PIN1,PIN_OUTPUT);
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	61 e0       	ldi	r22, 0x01	; 1
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 80 0a 	call	0x1500	; 0x1500 <DIO_ES_tSetPinDirection>
	/*Initialize EXTI*/
	EXTI_ES_tInit(G_AstrEXTI_tConfig);
    3326:	81 e7       	ldi	r24, 0x71	; 113
    3328:	91 e0       	ldi	r25, 0x01	; 1
    332a:	0e 94 95 06 	call	0xd2a	; 0xd2a <EXTI_ES_tInit>
	/*Initialize SWITCH*/
	SWITCH_ES_tInit(G_SWITCH_tSwitchArrConfig);
    332e:	8b e7       	ldi	r24, 0x7B	; 123
    3330:	91 e0       	ldi	r25, 0x01	; 1
    3332:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <SWITCH_ES_tInit>
	EXTI_ES_tCallBack(G_AstrEXTI_tConfig,BUZZER,&up);
    3336:	81 e7       	ldi	r24, 0x71	; 113
    3338:	91 e0       	ldi	r25, 0x01	; 1
    333a:	25 ee       	ldi	r18, 0xE5	; 229
    333c:	39 e1       	ldi	r19, 0x19	; 25
    333e:	b9 01       	movw	r22, r18
    3340:	9e 01       	movw	r18, r28
    3342:	2f 5f       	subi	r18, 0xFF	; 255
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	a9 01       	movw	r20, r18
    3348:	0e 94 74 09 	call	0x12e8	; 0x12e8 <EXTI_ES_tCallBack>
	EXTI_ES_tCallBack(&(G_AstrEXTI_tConfig[1]),RELAY,&up2) ;
    334c:	84 e7       	ldi	r24, 0x74	; 116
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	23 e0       	ldi	r18, 0x03	; 3
    3352:	3a e1       	ldi	r19, 0x1A	; 26
    3354:	ae 01       	movw	r20, r28
    3356:	4b 5f       	subi	r20, 0xFB	; 251
    3358:	5f 4f       	sbci	r21, 0xFF	; 255
    335a:	b9 01       	movw	r22, r18
    335c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <EXTI_ES_tCallBack>
	GIE_ES_tEnable();
    3360:	0e 94 79 06 	call	0xcf2	; 0xcf2 <GIE_ES_tEnable>
	while(1)
	{
		if(up.flag == 1)
    3364:	8c 81       	ldd	r24, Y+4	; 0x04
    3366:	81 30       	cpi	r24, 0x01	; 1
    3368:	b1 f4       	brne	.+44     	; 0x3396 <main+0xcc>
		{
			LCD_ES_tGoToPosition(1,8);
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	68 e0       	ldi	r22, 0x08	; 8
    336e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_ES_tGoToPosition>
			LCD_ES_tWriteString("       ");
    3372:	80 e6       	ldi	r24, 0x60	; 96
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 39 16 	call	0x2c72	; 0x2c72 <LCD_ES_tWriteString>
			LCD_ES_tGoToPosition(1,8);
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	68 e0       	ldi	r22, 0x08	; 8
    337e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_ES_tGoToPosition>
			LCD_ES_tSendIntgerNum(up.count);
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	88 2f       	mov	r24, r24
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e0       	ldi	r26, 0x00	; 0
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	bc 01       	movw	r22, r24
    338e:	cd 01       	movw	r24, r26
    3390:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_ES_tSendIntgerNum>
			up.flag = 0;
    3394:	1c 82       	std	Y+4, r1	; 0x04
		}
		if(up2.flag == 1)
    3396:	88 85       	ldd	r24, Y+8	; 0x08
    3398:	81 30       	cpi	r24, 0x01	; 1
    339a:	21 f7       	brne	.-56     	; 0x3364 <main+0x9a>
		{
			LCD_ES_tGoToPosition(2,8);
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	68 e0       	ldi	r22, 0x08	; 8
    33a0:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_ES_tGoToPosition>
			LCD_ES_tWriteString("       ");
    33a4:	80 e6       	ldi	r24, 0x60	; 96
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 39 16 	call	0x2c72	; 0x2c72 <LCD_ES_tWriteString>
			LCD_ES_tGoToPosition(2,8);
    33ac:	82 e0       	ldi	r24, 0x02	; 2
    33ae:	68 e0       	ldi	r22, 0x08	; 8
    33b0:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_ES_tGoToPosition>
			LCD_ES_tSendIntgerNum(up2.count);
    33b4:	8d 81       	ldd	r24, Y+5	; 0x05
    33b6:	88 2f       	mov	r24, r24
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	a0 e0       	ldi	r26, 0x00	; 0
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_ES_tSendIntgerNum>
			up2.flag = 0;
    33c6:	18 86       	std	Y+8, r1	; 0x08
    33c8:	cd cf       	rjmp	.-102    	; 0x3364 <main+0x9a>

000033ca <BUZZER>:
	}
	return 0 ;
}

void BUZZER(void* para)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <BUZZER+0x6>
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
	//DIO_ES_tTogglePinValue(DIO_PORTC,PIN5);
	DIO_ES_tTogglePinValue(((ISR_t*)para)->group,((ISR_t*)para)->pin);
    33d8:	e9 81       	ldd	r30, Y+1	; 0x01
    33da:	fa 81       	ldd	r31, Y+2	; 0x02
    33dc:	81 81       	ldd	r24, Z+1	; 0x01
    33de:	e9 81       	ldd	r30, Y+1	; 0x01
    33e0:	fa 81       	ldd	r31, Y+2	; 0x02
    33e2:	92 81       	ldd	r25, Z+2	; 0x02
    33e4:	69 2f       	mov	r22, r25
    33e6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_ES_tTogglePinValue>
	((ISR_t*)para)->count++;
    33ea:	e9 81       	ldd	r30, Y+1	; 0x01
    33ec:	fa 81       	ldd	r31, Y+2	; 0x02
    33ee:	80 81       	ld	r24, Z
    33f0:	8f 5f       	subi	r24, 0xFF	; 255
    33f2:	80 83       	st	Z, r24
	((ISR_t*)para)->flag=1;
    33f4:	e9 81       	ldd	r30, Y+1	; 0x01
    33f6:	fa 81       	ldd	r31, Y+2	; 0x02
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	83 83       	std	Z+3, r24	; 0x03
}
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <RELAY>:

void RELAY(void*para)
{
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	00 d0       	rcall	.+0      	; 0x340c <RELAY+0x6>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
	//DIO_ES_tTogglePinValue(DIO_PORTC,PIN4);
	DIO_ES_tTogglePinValue(((ISR_t*)para)->group,((ISR_t*)para)->pin);
    3414:	e9 81       	ldd	r30, Y+1	; 0x01
    3416:	fa 81       	ldd	r31, Y+2	; 0x02
    3418:	81 81       	ldd	r24, Z+1	; 0x01
    341a:	e9 81       	ldd	r30, Y+1	; 0x01
    341c:	fa 81       	ldd	r31, Y+2	; 0x02
    341e:	92 81       	ldd	r25, Z+2	; 0x02
    3420:	69 2f       	mov	r22, r25
    3422:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_ES_tTogglePinValue>
	((ISR_t*)para)->count++;
    3426:	e9 81       	ldd	r30, Y+1	; 0x01
    3428:	fa 81       	ldd	r31, Y+2	; 0x02
    342a:	80 81       	ld	r24, Z
    342c:	8f 5f       	subi	r24, 0xFF	; 255
    342e:	80 83       	st	Z, r24
	((ISR_t*)para)->flag=1;
    3430:	e9 81       	ldd	r30, Y+1	; 0x01
    3432:	fa 81       	ldd	r31, Y+2	; 0x02
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	83 83       	std	Z+3, r24	; 0x03
}
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <__mulsi3>:
    3442:	62 9f       	mul	r22, r18
    3444:	d0 01       	movw	r26, r0
    3446:	73 9f       	mul	r23, r19
    3448:	f0 01       	movw	r30, r0
    344a:	82 9f       	mul	r24, r18
    344c:	e0 0d       	add	r30, r0
    344e:	f1 1d       	adc	r31, r1
    3450:	64 9f       	mul	r22, r20
    3452:	e0 0d       	add	r30, r0
    3454:	f1 1d       	adc	r31, r1
    3456:	92 9f       	mul	r25, r18
    3458:	f0 0d       	add	r31, r0
    345a:	83 9f       	mul	r24, r19
    345c:	f0 0d       	add	r31, r0
    345e:	74 9f       	mul	r23, r20
    3460:	f0 0d       	add	r31, r0
    3462:	65 9f       	mul	r22, r21
    3464:	f0 0d       	add	r31, r0
    3466:	99 27       	eor	r25, r25
    3468:	72 9f       	mul	r23, r18
    346a:	b0 0d       	add	r27, r0
    346c:	e1 1d       	adc	r30, r1
    346e:	f9 1f       	adc	r31, r25
    3470:	63 9f       	mul	r22, r19
    3472:	b0 0d       	add	r27, r0
    3474:	e1 1d       	adc	r30, r1
    3476:	f9 1f       	adc	r31, r25
    3478:	bd 01       	movw	r22, r26
    347a:	cf 01       	movw	r24, r30
    347c:	11 24       	eor	r1, r1
    347e:	08 95       	ret

00003480 <__udivmodsi4>:
    3480:	a1 e2       	ldi	r26, 0x21	; 33
    3482:	1a 2e       	mov	r1, r26
    3484:	aa 1b       	sub	r26, r26
    3486:	bb 1b       	sub	r27, r27
    3488:	fd 01       	movw	r30, r26
    348a:	0d c0       	rjmp	.+26     	; 0x34a6 <__udivmodsi4_ep>

0000348c <__udivmodsi4_loop>:
    348c:	aa 1f       	adc	r26, r26
    348e:	bb 1f       	adc	r27, r27
    3490:	ee 1f       	adc	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	a2 17       	cp	r26, r18
    3496:	b3 07       	cpc	r27, r19
    3498:	e4 07       	cpc	r30, r20
    349a:	f5 07       	cpc	r31, r21
    349c:	20 f0       	brcs	.+8      	; 0x34a6 <__udivmodsi4_ep>
    349e:	a2 1b       	sub	r26, r18
    34a0:	b3 0b       	sbc	r27, r19
    34a2:	e4 0b       	sbc	r30, r20
    34a4:	f5 0b       	sbc	r31, r21

000034a6 <__udivmodsi4_ep>:
    34a6:	66 1f       	adc	r22, r22
    34a8:	77 1f       	adc	r23, r23
    34aa:	88 1f       	adc	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	1a 94       	dec	r1
    34b0:	69 f7       	brne	.-38     	; 0x348c <__udivmodsi4_loop>
    34b2:	60 95       	com	r22
    34b4:	70 95       	com	r23
    34b6:	80 95       	com	r24
    34b8:	90 95       	com	r25
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	bd 01       	movw	r22, r26
    34c0:	cf 01       	movw	r24, r30
    34c2:	08 95       	ret

000034c4 <__divmodsi4>:
    34c4:	97 fb       	bst	r25, 7
    34c6:	09 2e       	mov	r0, r25
    34c8:	05 26       	eor	r0, r21
    34ca:	0e d0       	rcall	.+28     	; 0x34e8 <__divmodsi4_neg1>
    34cc:	57 fd       	sbrc	r21, 7
    34ce:	04 d0       	rcall	.+8      	; 0x34d8 <__divmodsi4_neg2>
    34d0:	d7 df       	rcall	.-82     	; 0x3480 <__udivmodsi4>
    34d2:	0a d0       	rcall	.+20     	; 0x34e8 <__divmodsi4_neg1>
    34d4:	00 1c       	adc	r0, r0
    34d6:	38 f4       	brcc	.+14     	; 0x34e6 <__divmodsi4_exit>

000034d8 <__divmodsi4_neg2>:
    34d8:	50 95       	com	r21
    34da:	40 95       	com	r20
    34dc:	30 95       	com	r19
    34de:	21 95       	neg	r18
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	4f 4f       	sbci	r20, 0xFF	; 255
    34e4:	5f 4f       	sbci	r21, 0xFF	; 255

000034e6 <__divmodsi4_exit>:
    34e6:	08 95       	ret

000034e8 <__divmodsi4_neg1>:
    34e8:	f6 f7       	brtc	.-4      	; 0x34e6 <__divmodsi4_exit>
    34ea:	90 95       	com	r25
    34ec:	80 95       	com	r24
    34ee:	70 95       	com	r23
    34f0:	61 95       	neg	r22
    34f2:	7f 4f       	sbci	r23, 0xFF	; 255
    34f4:	8f 4f       	sbci	r24, 0xFF	; 255
    34f6:	9f 4f       	sbci	r25, 0xFF	; 255
    34f8:	08 95       	ret

000034fa <__prologue_saves__>:
    34fa:	2f 92       	push	r2
    34fc:	3f 92       	push	r3
    34fe:	4f 92       	push	r4
    3500:	5f 92       	push	r5
    3502:	6f 92       	push	r6
    3504:	7f 92       	push	r7
    3506:	8f 92       	push	r8
    3508:	9f 92       	push	r9
    350a:	af 92       	push	r10
    350c:	bf 92       	push	r11
    350e:	cf 92       	push	r12
    3510:	df 92       	push	r13
    3512:	ef 92       	push	r14
    3514:	ff 92       	push	r15
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	ca 1b       	sub	r28, r26
    3524:	db 0b       	sbc	r29, r27
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	09 94       	ijmp

00003532 <__epilogue_restores__>:
    3532:	2a 88       	ldd	r2, Y+18	; 0x12
    3534:	39 88       	ldd	r3, Y+17	; 0x11
    3536:	48 88       	ldd	r4, Y+16	; 0x10
    3538:	5f 84       	ldd	r5, Y+15	; 0x0f
    353a:	6e 84       	ldd	r6, Y+14	; 0x0e
    353c:	7d 84       	ldd	r7, Y+13	; 0x0d
    353e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3540:	9b 84       	ldd	r9, Y+11	; 0x0b
    3542:	aa 84       	ldd	r10, Y+10	; 0x0a
    3544:	b9 84       	ldd	r11, Y+9	; 0x09
    3546:	c8 84       	ldd	r12, Y+8	; 0x08
    3548:	df 80       	ldd	r13, Y+7	; 0x07
    354a:	ee 80       	ldd	r14, Y+6	; 0x06
    354c:	fd 80       	ldd	r15, Y+5	; 0x05
    354e:	0c 81       	ldd	r16, Y+4	; 0x04
    3550:	1b 81       	ldd	r17, Y+3	; 0x03
    3552:	aa 81       	ldd	r26, Y+2	; 0x02
    3554:	b9 81       	ldd	r27, Y+1	; 0x01
    3556:	ce 0f       	add	r28, r30
    3558:	d1 1d       	adc	r29, r1
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	ed 01       	movw	r28, r26
    3566:	08 95       	ret

00003568 <_exit>:
    3568:	f8 94       	cli

0000356a <__stop_program>:
    356a:	ff cf       	rjmp	.-2      	; 0x356a <__stop_program>
