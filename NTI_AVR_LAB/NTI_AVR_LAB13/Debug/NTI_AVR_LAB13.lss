
NTI_AVR_LAB13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  00003b52  00003be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001be  008001be  00003d44  2**0
                  ALLOC
  3 .stab         000049b0  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001aa9  00000000  00000000  000086f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a19d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000a31d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000c4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000d66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e670  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000e810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000ead1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f37f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_1>
       8:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_2>
       c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3c       	cpi	r26, 0xCF	; 207
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 1b 	call	0x36ae	; 0x36ae <main>
      8a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 94 1d 	jmp	0x3b28	; 0x3b28 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ea 57       	subi	r30, 0x7A	; 122
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_ES_tInit>:

/*Initialization GIE Module*/

ES_t GIE_ES_tInit(void)

{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	//SREG &=~(1<<7);
    asm("CLI");
     ce2:	f8 94       	cli
	return LOC_ES_tErrorState = ES_OK;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <GIE_ES_tEnable>:

/*Disable GIE */

ES_t GIE_ES_tEnable(void)

{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     cfc:	19 82       	std	Y+1, r1	; 0x01
	//SREG |=(1<<7) ;
    asm("SEI");
     cfe:	78 94       	sei

	return 	LOC_ES_tErrorState = ES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	89 81       	ldd	r24, Y+1	; 0x01
}
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <GIE_ES_tDisable>:


/*Enable GIE*/

ES_t GIE_ES_tDisable(void)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0f 92       	push	r0
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62

	       ES_t LOC_ES_tErrorState = ES_NOK;
     d18:	19 82       	std	Y+1, r1	; 0x01
	   	//SREG &=~(1<<7);

	       asm("CLI");
     d1a:	f8 94       	cli
	return LOC_ES_tErrorState = ES_OK;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	89 81       	ldd	r24, Y+1	; 0x01
}
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <EXTI_ES_tInit>:

static  void* EXTI_pvidISRParameter [ 3 ] = {NULL,NULL,NULL};

/*initialization Function*/
ES_t EXTI_ES_tInit(EXTI_t * Copy_PTArrConfiguration)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	2c 97       	sbiw	r28, 0x0c	; 12
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	9c 83       	std	Y+4, r25	; 0x04
     d40:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK;
     d42:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8ExtiIter=0;
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	6b c1       	rjmp	.+726    	; 0x101e <EXTI_ES_tInit+0x2f4>
	for ( ; Local_u8ExtiIter<G_u8EXTI_NUM ; Local_u8ExtiIter++)
	{
		switch(Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Num)
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	c9 01       	movw	r24, r18
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	28 0f       	add	r18, r24
     d56:	39 1f       	adc	r19, r25
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 87       	std	Y+12, r19	; 0x0c
     d6a:	2b 87       	std	Y+11, r18	; 0x0b
     d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <EXTI_ES_tInit+0x4e>
     d76:	81 c0       	rjmp	.+258    	; 0xe7a <EXTI_ES_tInit+0x150>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <EXTI_ES_tInit+0x5a>
     d82:	f1 c0       	rjmp	.+482    	; 0xf66 <EXTI_ES_tInit+0x23c>
     d84:	8b 85       	ldd	r24, Y+11	; 0x0b
     d86:	9c 85       	ldd	r25, Y+12	; 0x0c
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f0       	breq	.+2      	; 0xd8e <EXTI_ES_tInit+0x64>
     d8c:	45 c1       	rjmp	.+650    	; 0x1018 <EXTI_ES_tInit+0x2ee>
		{
		case EXTI0:
			MCUCR &=~(3<<0);
     d8e:	a5 e5       	ldi	r26, 0x55	; 85
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e5       	ldi	r30, 0x55	; 85
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8c 7f       	andi	r24, 0xFC	; 252
     d9a:	8c 93       	st	X, r24
			switch (Copy_PTArrConfiguration[Local_u8ExtiIter].SenseLevel)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	c9 01       	movw	r24, r18
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	28 0f       	add	r18, r24
     daa:	39 1f       	adc	r19, r25
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	fc 01       	movw	r30, r24
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 81       	ld	r24, Z
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3a 87       	std	Y+10, r19	; 0x0a
     dbe:	29 87       	std	Y+9, r18	; 0x09
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	81 f0       	breq	.+32     	; 0xdea <EXTI_ES_tInit+0xc0>
     dca:	29 85       	ldd	r18, Y+9	; 0x09
     dcc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	14 f1       	brlt	.+68     	; 0xe18 <EXTI_ES_tInit+0xee>
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	91 05       	cpc	r25, r1
     ddc:	71 f0       	breq	.+28     	; 0xdfa <EXTI_ES_tInit+0xd0>
     dde:	29 85       	ldd	r18, Y+9	; 0x09
     de0:	3a 85       	ldd	r19, Y+10	; 0x0a
     de2:	23 30       	cpi	r18, 0x03	; 3
     de4:	31 05       	cpc	r19, r1
     de6:	89 f0       	breq	.+34     	; 0xe0a <EXTI_ES_tInit+0xe0>
     de8:	17 c0       	rjmp	.+46     	; 0xe18 <EXTI_ES_tInit+0xee>
			case LOW_LEVEL:

				break;

			case ANY_LOGICAL:
				MCUCR |= (1<<0);
     dea:	a5 e5       	ldi	r26, 0x55	; 85
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e5       	ldi	r30, 0x55	; 85
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	8c 93       	st	X, r24
     df8:	0f c0       	rjmp	.+30     	; 0xe18 <EXTI_ES_tInit+0xee>
				break;

			case FALLING_EDGE:
				MCUCR |= (2<<0);
     dfa:	a5 e5       	ldi	r26, 0x55	; 85
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e5       	ldi	r30, 0x55	; 85
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	8c 93       	st	X, r24
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <EXTI_ES_tInit+0xee>
				break;

			case RISING_EDGE:
				MCUCR |= (3<<0);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	83 60       	ori	r24, 0x03	; 3
     e16:	8c 93       	st	X, r24
				break;
			}
			if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == ENABLE)
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	c9 01       	movw	r24, r18
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	28 0f       	add	r18, r24
     e26:	39 1f       	adc	r19, r25
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	fc 01       	movw	r30, r24
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	81 81       	ldd	r24, Z+1	; 0x01
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	41 f4       	brne	.+16     	; 0xe48 <EXTI_ES_tInit+0x11e>
			{
				GICR |= (1<<6);
     e38:	ab e5       	ldi	r26, 0x5B	; 91
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	eb e5       	ldi	r30, 0x5B	; 91
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 64       	ori	r24, 0x40	; 64
     e44:	8c 93       	st	X, r24
     e46:	e8 c0       	rjmp	.+464    	; 0x1018 <EXTI_ES_tInit+0x2ee>
			}
			else if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == DISABLE)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	c9 01       	movw	r24, r18
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	28 0f       	add	r18, r24
     e56:	39 1f       	adc	r19, r25
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	fc 01       	movw	r30, r24
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	09 f0       	breq	.+2      	; 0xe6a <EXTI_ES_tInit+0x140>
     e68:	d7 c0       	rjmp	.+430    	; 0x1018 <EXTI_ES_tInit+0x2ee>
			{
				GICR &=~(1<<6);
     e6a:	ab e5       	ldi	r26, 0x5B	; 91
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e5       	ldi	r30, 0x5B	; 91
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7b       	andi	r24, 0xBF	; 191
     e76:	8c 93       	st	X, r24
     e78:	cf c0       	rjmp	.+414    	; 0x1018 <EXTI_ES_tInit+0x2ee>
			}
			break;

			case EXTI1:
				MCUCR &=~(3<<2);
     e7a:	a5 e5       	ldi	r26, 0x55	; 85
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e5       	ldi	r30, 0x55	; 85
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	83 7f       	andi	r24, 0xF3	; 243
     e86:	8c 93       	st	X, r24
				switch (Copy_PTArrConfiguration[Local_u8ExtiIter].SenseLevel)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	c9 01       	movw	r24, r18
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	28 0f       	add	r18, r24
     e96:	39 1f       	adc	r19, r25
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	80 81       	ld	r24, Z
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	38 87       	std	Y+8, r19	; 0x08
     eaa:	2f 83       	std	Y+7, r18	; 0x07
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	81 f0       	breq	.+32     	; 0xed6 <EXTI_ES_tInit+0x1ac>
     eb6:	2f 81       	ldd	r18, Y+7	; 0x07
     eb8:	38 85       	ldd	r19, Y+8	; 0x08
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	14 f1       	brlt	.+68     	; 0xf04 <EXTI_ES_tInit+0x1da>
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	91 05       	cpc	r25, r1
     ec8:	71 f0       	breq	.+28     	; 0xee6 <EXTI_ES_tInit+0x1bc>
     eca:	2f 81       	ldd	r18, Y+7	; 0x07
     ecc:	38 85       	ldd	r19, Y+8	; 0x08
     ece:	23 30       	cpi	r18, 0x03	; 3
     ed0:	31 05       	cpc	r19, r1
     ed2:	89 f0       	breq	.+34     	; 0xef6 <EXTI_ES_tInit+0x1cc>
     ed4:	17 c0       	rjmp	.+46     	; 0xf04 <EXTI_ES_tInit+0x1da>
				case LOW_LEVEL:

					break;

				case ANY_LOGICAL:
					MCUCR |= (1<<2);
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	84 60       	ori	r24, 0x04	; 4
     ee2:	8c 93       	st	X, r24
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <EXTI_ES_tInit+0x1da>
					break;

				case FALLING_EDGE:
					MCUCR |= (2<<2);
     ee6:	a5 e5       	ldi	r26, 0x55	; 85
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e5       	ldi	r30, 0x55	; 85
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 60       	ori	r24, 0x08	; 8
     ef2:	8c 93       	st	X, r24
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <EXTI_ES_tInit+0x1da>
					break;

				case RISING_EDGE:
					MCUCR |= (3<<2);
     ef6:	a5 e5       	ldi	r26, 0x55	; 85
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e5 e5       	ldi	r30, 0x55	; 85
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8c 60       	ori	r24, 0x0C	; 12
     f02:	8c 93       	st	X, r24
					break;
				}
				if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == ENABLE)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	c9 01       	movw	r24, r18
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	28 0f       	add	r18, r24
     f12:	39 1f       	adc	r19, r25
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	fc 01       	movw	r30, r24
     f1a:	e2 0f       	add	r30, r18
     f1c:	f3 1f       	adc	r31, r19
     f1e:	81 81       	ldd	r24, Z+1	; 0x01
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	41 f4       	brne	.+16     	; 0xf34 <EXTI_ES_tInit+0x20a>
				{
					GICR |= (1<<7);
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	eb e5       	ldi	r30, 0x5B	; 91
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	8c 93       	st	X, r24
     f32:	72 c0       	rjmp	.+228    	; 0x1018 <EXTI_ES_tInit+0x2ee>
				}
				else if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == DISABLE)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	c9 01       	movw	r24, r18
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	28 0f       	add	r18, r24
     f42:	39 1f       	adc	r19, r25
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	88 23       	and	r24, r24
     f52:	09 f0       	breq	.+2      	; 0xf56 <EXTI_ES_tInit+0x22c>
     f54:	61 c0       	rjmp	.+194    	; 0x1018 <EXTI_ES_tInit+0x2ee>
				{
					GICR &=~(1<<7);
     f56:	ab e5       	ldi	r26, 0x5B	; 91
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	eb e5       	ldi	r30, 0x5B	; 91
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 77       	andi	r24, 0x7F	; 127
     f62:	8c 93       	st	X, r24
     f64:	59 c0       	rjmp	.+178    	; 0x1018 <EXTI_ES_tInit+0x2ee>
				}

				break;

				case EXTI2:
					MCUCSR &=~(1<<6);
     f66:	a4 e5       	ldi	r26, 0x54	; 84
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e5       	ldi	r30, 0x54	; 84
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8f 7b       	andi	r24, 0xBF	; 191
     f72:	8c 93       	st	X, r24
					switch (Copy_PTArrConfiguration[Local_u8ExtiIter].SenseLevel)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	c9 01       	movw	r24, r18
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	28 0f       	add	r18, r24
     f82:	39 1f       	adc	r19, r25
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	fc 01       	movw	r30, r24
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	80 81       	ld	r24, Z
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3e 83       	std	Y+6, r19	; 0x06
     f96:	2d 83       	std	Y+5, r18	; 0x05
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	91 05       	cpc	r25, r1
     fa0:	61 f0       	breq	.+24     	; 0xfba <EXTI_ES_tInit+0x290>
     fa2:	2d 81       	ldd	r18, Y+5	; 0x05
     fa4:	3e 81       	ldd	r19, Y+6	; 0x06
     fa6:	23 30       	cpi	r18, 0x03	; 3
     fa8:	31 05       	cpc	r19, r1
     faa:	39 f4       	brne	.+14     	; 0xfba <EXTI_ES_tInit+0x290>
					case FALLING_EDGE:

						break;

					case RISING_EDGE:
						MCUCSR |= (1<<6);
     fac:	a4 e5       	ldi	r26, 0x54	; 84
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e5       	ldi	r30, 0x54	; 84
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 64       	ori	r24, 0x40	; 64
     fb8:	8c 93       	st	X, r24
						break;
					}
					if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == ENABLE)
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	c9 01       	movw	r24, r18
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	28 0f       	add	r18, r24
     fc8:	39 1f       	adc	r19, r25
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	41 f4       	brne	.+16     	; 0xfea <EXTI_ES_tInit+0x2c0>
					{
						GICR |= (1<<5);
     fda:	ab e5       	ldi	r26, 0x5B	; 91
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e5       	ldi	r30, 0x5B	; 91
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 62       	ori	r24, 0x20	; 32
     fe6:	8c 93       	st	X, r24
     fe8:	17 c0       	rjmp	.+46     	; 0x1018 <EXTI_ES_tInit+0x2ee>
					}
					else if (Copy_PTArrConfiguration[Local_u8ExtiIter].INT_Mode == DISABLE)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	c9 01       	movw	r24, r18
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	28 0f       	add	r18, r24
     ff8:	39 1f       	adc	r19, r25
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	fc 01       	movw	r30, r24
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	81 81       	ldd	r24, Z+1	; 0x01
    1006:	88 23       	and	r24, r24
    1008:	39 f4       	brne	.+14     	; 0x1018 <EXTI_ES_tInit+0x2ee>
					{
						GICR &=~(1<<5);
    100a:	ab e5       	ldi	r26, 0x5B	; 91
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	eb e5       	ldi	r30, 0x5B	; 91
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 7d       	andi	r24, 0xDF	; 223
    1016:	8c 93       	st	X, r24
ES_t EXTI_ES_tInit(EXTI_t * Copy_PTArrConfiguration)
{
	ES_t LOC_ES_tErrorState = ES_NOK;

	u8 Local_u8ExtiIter=0;
	for ( ; Local_u8ExtiIter<G_u8EXTI_NUM ; Local_u8ExtiIter++)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	90 91 86 01 	lds	r25, 0x0186
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	89 17       	cp	r24, r25
    1026:	08 f4       	brcc	.+2      	; 0x102a <EXTI_ES_tInit+0x300>
    1028:	8f ce       	rjmp	.-738    	; 0xd48 <EXTI_ES_tInit+0x1e>
					break;
		}
	}


	return LOC_ES_tErrorState = ES_OK;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	8a 83       	std	Y+2, r24	; 0x02
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1030:	2c 96       	adiw	r28, 0x0c	; 12
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <EXTI_ES_tSetSenceLevel>:


/*Set Sense Level*/
ES_t EXTI_ES_tSetSenceLevel(EXTI_t * Copy_PTArrInfo,u8 Copy_u8SenceLevel)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	2c 97       	sbiw	r28, 0x0c	; 12
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK;
    105c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_PTArrInfo->INT_Num)
    105e:	ea 81       	ldd	r30, Y+2	; 0x02
    1060:	fb 81       	ldd	r31, Y+3	; 0x03
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3c 87       	std	Y+12, r19	; 0x0c
    106a:	2b 87       	std	Y+11, r18	; 0x0b
    106c:	8b 85       	ldd	r24, Y+11	; 0x0b
    106e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <EXTI_ES_tSetSenceLevel+0x36>
    1076:	47 c0       	rjmp	.+142    	; 0x1106 <EXTI_ES_tSetSenceLevel+0xc4>
    1078:	2b 85       	ldd	r18, Y+11	; 0x0b
    107a:	3c 85       	ldd	r19, Y+12	; 0x0c
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <EXTI_ES_tSetSenceLevel+0x42>
    1082:	7d c0       	rjmp	.+250    	; 0x117e <EXTI_ES_tSetSenceLevel+0x13c>
    1084:	8b 85       	ldd	r24, Y+11	; 0x0b
    1086:	9c 85       	ldd	r25, Y+12	; 0x0c
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	09 f0       	breq	.+2      	; 0x108e <EXTI_ES_tSetSenceLevel+0x4c>
    108c:	97 c0       	rjmp	.+302    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
	{
	case EXTI0:
		MCUCR &=~(3<<0);
    108e:	a5 e5       	ldi	r26, 0x55	; 85
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e5       	ldi	r30, 0x55	; 85
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8c 7f       	andi	r24, 0xFC	; 252
    109a:	8c 93       	st	X, r24
		switch (Copy_PTArrInfo->SenseLevel)
    109c:	ea 81       	ldd	r30, Y+2	; 0x02
    109e:	fb 81       	ldd	r31, Y+3	; 0x03
    10a0:	80 81       	ld	r24, Z
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3a 87       	std	Y+10, r19	; 0x0a
    10a8:	29 87       	std	Y+9, r18	; 0x09
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	89 f0       	breq	.+34     	; 0x10d6 <EXTI_ES_tSetSenceLevel+0x94>
    10b4:	29 85       	ldd	r18, Y+9	; 0x09
    10b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	0c f4       	brge	.+2      	; 0x10c0 <EXTI_ES_tSetSenceLevel+0x7e>
    10be:	7e c0       	rjmp	.+252    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	91 05       	cpc	r25, r1
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <EXTI_ES_tSetSenceLevel+0xa4>
    10ca:	29 85       	ldd	r18, Y+9	; 0x09
    10cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ce:	23 30       	cpi	r18, 0x03	; 3
    10d0:	31 05       	cpc	r19, r1
    10d2:	89 f0       	breq	.+34     	; 0x10f6 <EXTI_ES_tSetSenceLevel+0xb4>
    10d4:	73 c0       	rjmp	.+230    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
		case LOW_LEVEL:

			break;

		case ANY_LOGICAL:
			MCUCR |= (1<<0);
    10d6:	a5 e5       	ldi	r26, 0x55	; 85
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e5       	ldi	r30, 0x55	; 85
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	8c 93       	st	X, r24
    10e4:	6b c0       	rjmp	.+214    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			break;

		case FALLING_EDGE:
			MCUCR |= (2<<0);
    10e6:	a5 e5       	ldi	r26, 0x55	; 85
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e5       	ldi	r30, 0x55	; 85
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	8c 93       	st	X, r24
    10f4:	63 c0       	rjmp	.+198    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			break;

		case RISING_EDGE:
			MCUCR |= (3<<0);
    10f6:	a5 e5       	ldi	r26, 0x55	; 85
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e5       	ldi	r30, 0x55	; 85
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	83 60       	ori	r24, 0x03	; 3
    1102:	8c 93       	st	X, r24
    1104:	5b c0       	rjmp	.+182    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			break;
		}
		break;
		case EXTI1:
			MCUCR &=~(3<<2);
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	83 7f       	andi	r24, 0xF3	; 243
    1112:	8c 93       	st	X, r24
			switch (Copy_PTArrInfo->SenseLevel)
    1114:	ea 81       	ldd	r30, Y+2	; 0x02
    1116:	fb 81       	ldd	r31, Y+3	; 0x03
    1118:	80 81       	ld	r24, Z
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	38 87       	std	Y+8, r19	; 0x08
    1120:	2f 83       	std	Y+7, r18	; 0x07
    1122:	8f 81       	ldd	r24, Y+7	; 0x07
    1124:	98 85       	ldd	r25, Y+8	; 0x08
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	89 f0       	breq	.+34     	; 0x114e <EXTI_ES_tSetSenceLevel+0x10c>
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
    112e:	38 85       	ldd	r19, Y+8	; 0x08
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	0c f4       	brge	.+2      	; 0x1138 <EXTI_ES_tSetSenceLevel+0xf6>
    1136:	42 c0       	rjmp	.+132    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
    1138:	8f 81       	ldd	r24, Y+7	; 0x07
    113a:	98 85       	ldd	r25, Y+8	; 0x08
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	71 f0       	breq	.+28     	; 0x115e <EXTI_ES_tSetSenceLevel+0x11c>
    1142:	2f 81       	ldd	r18, Y+7	; 0x07
    1144:	38 85       	ldd	r19, Y+8	; 0x08
    1146:	23 30       	cpi	r18, 0x03	; 3
    1148:	31 05       	cpc	r19, r1
    114a:	89 f0       	breq	.+34     	; 0x116e <EXTI_ES_tSetSenceLevel+0x12c>
    114c:	37 c0       	rjmp	.+110    	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
			case LOW_LEVEL:

				break;

			case ANY_LOGICAL:
				MCUCR |= (1<<2);
    114e:	a5 e5       	ldi	r26, 0x55	; 85
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e5       	ldi	r30, 0x55	; 85
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	8c 93       	st	X, r24
    115c:	2f c0       	rjmp	.+94     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				break;

			case FALLING_EDGE:
				MCUCR |= (2<<2);
    115e:	a5 e5       	ldi	r26, 0x55	; 85
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e5       	ldi	r30, 0x55	; 85
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 60       	ori	r24, 0x08	; 8
    116a:	8c 93       	st	X, r24
    116c:	27 c0       	rjmp	.+78     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				break;

			case RISING_EDGE:
				MCUCR |= (3<<2);
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8c 60       	ori	r24, 0x0C	; 12
    117a:	8c 93       	st	X, r24
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				break;
			}
			break;

			case EXTI2:
				MCUCSR &=~(1<<6);
    117e:	a4 e5       	ldi	r26, 0x54	; 84
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e5       	ldi	r30, 0x54	; 84
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7b       	andi	r24, 0xBF	; 191
    118a:	8c 93       	st	X, r24
				switch (Copy_PTArrInfo->SenseLevel)
    118c:	ea 81       	ldd	r30, Y+2	; 0x02
    118e:	fb 81       	ldd	r31, Y+3	; 0x03
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3e 83       	std	Y+6, r19	; 0x06
    1198:	2d 83       	std	Y+5, r18	; 0x05
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	91 05       	cpc	r25, r1
    11a2:	61 f0       	breq	.+24     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	23 30       	cpi	r18, 0x03	; 3
    11aa:	31 05       	cpc	r19, r1
    11ac:	39 f4       	brne	.+14     	; 0x11bc <EXTI_ES_tSetSenceLevel+0x17a>
				case FALLING_EDGE:

					break;

				case RISING_EDGE:
					MCUCSR |= (1<<6);
    11ae:	a4 e5       	ldi	r26, 0x54	; 84
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e4 e5       	ldi	r30, 0x54	; 84
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	80 64       	ori	r24, 0x40	; 64
    11ba:	8c 93       	st	X, r24
					break;
				}
				break;
	}
	return LOC_ES_tErrorState = ES_OK;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	2c 96       	adiw	r28, 0x0c	; 12
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <EXTI_ES_tEnableEXTI>:

/*EXTIerrupt Enable*/
ES_t EXTI_ES_tEnableEXTI(EXTI_t * Copy_PTArrInfo)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <EXTI_ES_tEnableEXTI+0x6>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK;
    11e4:	19 82       	std	Y+1, r1	; 0x01
	case EXTI2:
		break;
	}


	return LOC_ES_tErrorState = ES_OK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <EXTI_ES_tDisableEXTI>:



/*EXTIerrupt Disable*/
ES_t EXTI_ES_tDisableEXTI(EXTI_t * Copy_PTArrInfo)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <EXTI_ES_tDisableEXTI+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <EXTI_ES_tDisableEXTI+0x8>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9b 83       	std	Y+3, r25	; 0x03
    1208:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK;
    120a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_PTArrInfo->INT_Num)
    120c:	ea 81       	ldd	r30, Y+2	; 0x02
    120e:	fb 81       	ldd	r31, Y+3	; 0x03
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	21 f1       	breq	.+72     	; 0x126c <EXTI_ES_tDisableEXTI+0x74>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	c9 f1       	breq	.+114    	; 0x12a0 <EXTI_ES_tDisableEXTI+0xa8>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	09 f0       	breq	.+2      	; 0x1238 <EXTI_ES_tDisableEXTI+0x40>
    1236:	4d c0       	rjmp	.+154    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
	{
	case EXTI0:
		if (Copy_PTArrInfo->INT_Mode == ENABLE)
    1238:	ea 81       	ldd	r30, Y+2	; 0x02
    123a:	fb 81       	ldd	r31, Y+3	; 0x03
    123c:	81 81       	ldd	r24, Z+1	; 0x01
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	41 f4       	brne	.+16     	; 0x1252 <EXTI_ES_tDisableEXTI+0x5a>
		{
			GICR |= (1<<6);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	8c 93       	st	X, r24
    1250:	40 c0       	rjmp	.+128    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		else if (Copy_PTArrInfo->INT_Mode == DISABLE)
    1252:	ea 81       	ldd	r30, Y+2	; 0x02
    1254:	fb 81       	ldd	r31, Y+3	; 0x03
    1256:	81 81       	ldd	r24, Z+1	; 0x01
    1258:	88 23       	and	r24, r24
    125a:	d9 f5       	brne	.+118    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		{
			GICR &=~(1<<6);
    125c:	ab e5       	ldi	r26, 0x5B	; 91
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	eb e5       	ldi	r30, 0x5B	; 91
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 7b       	andi	r24, 0xBF	; 191
    1268:	8c 93       	st	X, r24
    126a:	33 c0       	rjmp	.+102    	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		break;
	case EXTI1:
		if (Copy_PTArrInfo->INT_Mode == ENABLE)
    126c:	ea 81       	ldd	r30, Y+2	; 0x02
    126e:	fb 81       	ldd	r31, Y+3	; 0x03
    1270:	81 81       	ldd	r24, Z+1	; 0x01
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	41 f4       	brne	.+16     	; 0x1286 <EXTI_ES_tDisableEXTI+0x8e>
		{
			GICR |= (1<<7);
    1276:	ab e5       	ldi	r26, 0x5B	; 91
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	eb e5       	ldi	r30, 0x5B	; 91
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 68       	ori	r24, 0x80	; 128
    1282:	8c 93       	st	X, r24
    1284:	26 c0       	rjmp	.+76     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		else if (Copy_PTArrInfo->INT_Mode == DISABLE)
    1286:	ea 81       	ldd	r30, Y+2	; 0x02
    1288:	fb 81       	ldd	r31, Y+3	; 0x03
    128a:	81 81       	ldd	r24, Z+1	; 0x01
    128c:	88 23       	and	r24, r24
    128e:	09 f5       	brne	.+66     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		{
			GICR &=~(1<<7);
    1290:	ab e5       	ldi	r26, 0x5B	; 91
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	eb e5       	ldi	r30, 0x5B	; 91
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 77       	andi	r24, 0x7F	; 127
    129c:	8c 93       	st	X, r24
    129e:	19 c0       	rjmp	.+50     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		break;
	case EXTI2:
		if (Copy_PTArrInfo->INT_Mode == ENABLE)
    12a0:	ea 81       	ldd	r30, Y+2	; 0x02
    12a2:	fb 81       	ldd	r31, Y+3	; 0x03
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	41 f4       	brne	.+16     	; 0x12ba <EXTI_ES_tDisableEXTI+0xc2>
		{
			GICR |= (1<<5);
    12aa:	ab e5       	ldi	r26, 0x5B	; 91
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e5       	ldi	r30, 0x5B	; 91
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 62       	ori	r24, 0x20	; 32
    12b6:	8c 93       	st	X, r24
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		}
		else if (Copy_PTArrInfo->INT_Mode == DISABLE)
    12ba:	ea 81       	ldd	r30, Y+2	; 0x02
    12bc:	fb 81       	ldd	r31, Y+3	; 0x03
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	88 23       	and	r24, r24
    12c2:	39 f4       	brne	.+14     	; 0x12d2 <EXTI_ES_tDisableEXTI+0xda>
		{
			GICR &=~(1<<5);
    12c4:	ab e5       	ldi	r26, 0x5B	; 91
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	eb e5       	ldi	r30, 0x5B	; 91
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7d       	andi	r24, 0xDF	; 223
    12d0:	8c 93       	st	X, r24
		}
		break;
	}
	return LOC_ES_tErrorState = ES_OK;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <EXTI_ES_tCallBack>:

ES_t EXTI_ES_tCallBack(EXTI_t * Copy_PTArrInfo,void(*Copy_pfunAppFun)(void*),void * Copy_PtrVidAppParametrer)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	27 97       	sbiw	r28, 0x07	; 7
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	9b 83       	std	Y+3, r25	; 0x03
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	7d 83       	std	Y+5, r23	; 0x05
    1302:	6c 83       	std	Y+4, r22	; 0x04
    1304:	5f 83       	std	Y+7, r21	; 0x07
    1306:	4e 83       	std	Y+6, r20	; 0x06

	ES_t LOC_ES_tErrorState = ES_NOK;
    1308:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PTArrInfo != NULL && Copy_pfunAppFun != NULL)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	9b 81       	ldd	r25, Y+3	; 0x03
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	01 f1       	breq	.+64     	; 0x1352 <EXTI_ES_tCallBack+0x6a>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	e1 f0       	breq	.+56     	; 0x1352 <EXTI_ES_tCallBack+0x6a>
	{

		EXTI_pfunISRFun[Copy_PTArrInfo->INT_Num] = Copy_pfunAppFun ;
    131a:	ea 81       	ldd	r30, Y+2	; 0x02
    131c:	fb 81       	ldd	r31, Y+3	; 0x03
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	fc 01       	movw	r30, r24
    132a:	e2 54       	subi	r30, 0x42	; 66
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
		EXTI_pvidISRParameter[Copy_PTArrInfo->INT_Num] = Copy_PtrVidAppParametrer;
    1336:	ea 81       	ldd	r30, Y+2	; 0x02
    1338:	fb 81       	ldd	r31, Y+3	; 0x03
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	88 2f       	mov	r24, r24
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	fc 01       	movw	r30, r24
    1346:	ec 53       	subi	r30, 0x3C	; 60
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	8e 81       	ldd	r24, Y+6	; 0x06
    134c:	9f 81       	ldd	r25, Y+7	; 0x07
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
	}

	return LOC_ES_tErrorState = ES_OK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01

}
    1358:	27 96       	adiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <__vector_1>:
void __vector_3 (void)  __attribute__((signal)) ;



void __vector_1 (void)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun[0] != NULL)
    1394:	80 91 be 01 	lds	r24, 0x01BE
    1398:	90 91 bf 01 	lds	r25, 0x01BF
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	49 f0       	breq	.+18     	; 0x13b2 <__vector_1+0x48>
	{
		EXTI_pfunISRFun[0] (EXTI_pvidISRParameter[0]);
    13a0:	e0 91 be 01 	lds	r30, 0x01BE
    13a4:	f0 91 bf 01 	lds	r31, 0x01BF
    13a8:	80 91 c4 01 	lds	r24, 0x01C4
    13ac:	90 91 c5 01 	lds	r25, 0x01C5
    13b0:	09 95       	icall


	}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_2>:
void __vector_2 (void)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun[1] != NULL)
    1402:	80 91 c0 01 	lds	r24, 0x01C0
    1406:	90 91 c1 01 	lds	r25, 0x01C1
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	49 f0       	breq	.+18     	; 0x1420 <__vector_2+0x48>
		{
			EXTI_pfunISRFun[1] (EXTI_pvidISRParameter[1]);
    140e:	e0 91 c0 01 	lds	r30, 0x01C0
    1412:	f0 91 c1 01 	lds	r31, 0x01C1
    1416:	80 91 c6 01 	lds	r24, 0x01C6
    141a:	90 91 c7 01 	lds	r25, 0x01C7
    141e:	09 95       	icall
		}
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_3>:
void __vector_3 (void)
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunISRFun[2] != NULL)
    1470:	80 91 c2 01 	lds	r24, 0x01C2
    1474:	90 91 c3 01 	lds	r25, 0x01C3
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	49 f0       	breq	.+18     	; 0x148e <__vector_3+0x48>
		{
			EXTI_pfunISRFun[2] (EXTI_pvidISRParameter[2]);
    147c:	e0 91 c2 01 	lds	r30, 0x01C2
    1480:	f0 91 c3 01 	lds	r31, 0x01C3
    1484:	80 91 c8 01 	lds	r24, 0x01C8
    1488:	90 91 c9 01 	lds	r25, 0x01C9
    148c:	09 95       	icall
		}
}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <ADC_ES_tInit>:
static  void (* ADC_pfunISRFun)(void*) =NULL;
static void * ADC_pvidISRParameter= NULL;

/**/
ES_t  ADC_ES_tInit(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    14be:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (4);
#elif ADC_PRES == PRES_32
	ADCSRA &= MADC_BIT_MASKING_PRESCALER ;
	ADCSRA |= (5);
#elif ADC_PRES == PRES_64
	ADCSRA &= MADC_BIT_MASKING_PRESCALER ;
    14c0:	a6 e2       	ldi	r26, 0x26	; 38
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e6 e2       	ldi	r30, 0x26	; 38
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	88 7f       	andi	r24, 0xF8	; 248
    14cc:	8c 93       	st	X, r24
	ADCSRA |= (6);
    14ce:	a6 e2       	ldi	r26, 0x26	; 38
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e6 e2       	ldi	r30, 0x26	; 38
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	86 60       	ori	r24, 0x06	; 6
    14da:	8c 93       	st	X, r24
#endif

#if ADC_VREF == AREF_REF
	ADMUX &= MADC_BIT_MASKING_VREF;
#elif ADC_VREF == AVCC_REF
	ADMUX &= MADC_BIT_MASKING_VREF;
    14dc:	a7 e2       	ldi	r26, 0x27	; 39
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e7 e2       	ldi	r30, 0x27	; 39
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 73       	andi	r24, 0x3F	; 63
    14e8:	8c 93       	st	X, r24
	ADMUX |= (1<<6);
    14ea:	a7 e2       	ldi	r26, 0x27	; 39
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e7 e2       	ldi	r30, 0x27	; 39
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 64       	ori	r24, 0x40	; 64
    14f6:	8c 93       	st	X, r24
#else
#error"ADC Vref selection is wrong"
#endif

#if ADC_ADJ == LEFT_ADJ
	ADMUX |= (1<<5);
    14f8:	a7 e2       	ldi	r26, 0x27	; 39
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e7 e2       	ldi	r30, 0x27	; 39
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	80 62       	ori	r24, 0x20	; 32
    1504:	8c 93       	st	X, r24
#else
#error"ADC ADJ selection is wrong"
#endif

#if INIT_CHNL < 32 && INIT_CHNL >= 0
	ADMUX &= MADC_BIT_MASKING_REG_CHANNEL;
    1506:	a7 e2       	ldi	r26, 0x27	; 39
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e7 e2       	ldi	r30, 0x27	; 39
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 7e       	andi	r24, 0xE0	; 224
    1512:	8c 93       	st	X, r24
	ADMUX |= (INIT_CHNL);
    1514:	a7 e2       	ldi	r26, 0x27	; 39
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e2       	ldi	r30, 0x27	; 39
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8c 93       	st	X, r24
#else
#error "ADC Channel has a wrong choice"
#endif

#if INIT_INT_MODE == POLLING
	ADCSRA &= ~ (1<<3);
    1520:	a6 e2       	ldi	r26, 0x26	; 38
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e6 e2       	ldi	r30, 0x26	; 38
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	87 7f       	andi	r24, 0xF7	; 247
    152c:	8c 93       	st	X, r24
#else
#error "ADC Channel has a wrong choice"
#endif

#if INIT_MODE == NORMAL
	ADCSRA &=~ (1<<5);
    152e:	a6 e2       	ldi	r26, 0x26	; 38
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e6 e2       	ldi	r30, 0x26	; 38
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	8c 93       	st	X, r24
#endif
#else
#error  "Invalid Choice ..."
#endif

	LOC_ES_tErrorState = ES_OK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
}
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <ADC_ES_tStartConversion>:
/**/
ES_t  ADC_ES_tStartConversion(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62

	ES_t LOC_ES_tErrorState = ES_NOK ;
    1554:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |=(1<<6);
    1556:	a6 e2       	ldi	r26, 0x26	; 38
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e6 e2       	ldi	r30, 0x26	; 38
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <ADC_ES_tReadHighRegister>:
/**/
ES_t  ADC_ES_tReadHighRegister(u8 * Copy_pu8ReadValue)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <ADC_ES_tReadHighRegister+0x6>
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9b 83       	std	Y+3, r25	; 0x03
    1580:	8a 83       	std	Y+2, r24	; 0x02

	ES_t LOC_ES_tErrorState = ES_NOK ;
    1582:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ == LEFT_ADJ
	*Copy_pu8ReadValue = ADCH;
    1584:	e5 e2       	ldi	r30, 0x25	; 37
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	ea 81       	ldd	r30, Y+2	; 0x02
    158c:	fb 81       	ldd	r31, Y+3	; 0x03
    158e:	80 83       	st	Z, r24
	*Copy_pu8ReadValue |= (ADCH<<6);
#else
#error"ADC ADJ selection is wrong"
#endif

	LOC_ES_tErrorState = ES_OK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1594:	89 81       	ldd	r24, Y+1	; 0x01

}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <ADC_ES_tRead>:
/**/
ES_t ADC_ES_tRead(u16 * Copy_pu16ReadValue)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <ADC_ES_tRead+0x6>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9b 83       	std	Y+3, r25	; 0x03
    15b0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    15b2:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ == LEFT_ADJ
	*Copy_pu16ReadValue  = (ADCL>>6);
    15b4:	e4 e2       	ldi	r30, 0x24	; 36
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	82 95       	swap	r24
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	83 70       	andi	r24, 0x03	; 3
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	ea 81       	ldd	r30, Y+2	; 0x02
    15c8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH<<2);
    15ce:	ea 81       	ldd	r30, Y+2	; 0x02
    15d0:	fb 81       	ldd	r31, Y+3	; 0x03
    15d2:	20 81       	ld	r18, Z
    15d4:	31 81       	ldd	r19, Z+1	; 0x01
    15d6:	e5 e2       	ldi	r30, 0x25	; 37
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	82 2b       	or	r24, r18
    15ea:	93 2b       	or	r25, r19
    15ec:	ea 81       	ldd	r30, Y+2	; 0x02
    15ee:	fb 81       	ldd	r31, Y+3	; 0x03
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH<<8);
#else
#error"ADC ADJ selection is wrong"
#endif

	LOC_ES_tErrorState = ES_OK;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <ADC_ES_tCallBack>:
/**/
ES_t ADC_ES_tCallBack(void (*Copy_pfunAppFun)(void*) , void * Copy_pvidAppParameter)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <ADC_ES_tCallBack+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <ADC_ES_tCallBack+0x8>
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9b 83       	std	Y+3, r25	; 0x03
    1616:	8a 83       	std	Y+2, r24	; 0x02
    1618:	7d 83       	std	Y+5, r23	; 0x05
    161a:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK ;
    161c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pfunAppFun != NULL)
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	61 f0       	breq	.+24     	; 0x163e <ADC_ES_tCallBack+0x38>
	{
		ADC_pfunISRFun = Copy_pfunAppFun;
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	90 93 cb 01 	sts	0x01CB, r25
    162e:	80 93 ca 01 	sts	0x01CA, r24
		ADC_pvidISRParameter = Copy_pvidAppParameter;
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	90 93 cd 01 	sts	0x01CD, r25
    163a:	80 93 cc 01 	sts	0x01CC, r24
	}

	LOC_ES_tErrorState = ES_OK;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1642:	89 81       	ldd	r24, Y+1	; 0x01

}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <ADC_ES_tSelectChannel>:
/**/
ES_t ADC_ES_tSelectChannel(u8 Copy_u8ChannelID)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <ADC_ES_tSelectChannel+0x6>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1660:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8ChannelID <= 31 )
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	80 32       	cpi	r24, 0x20	; 32
    1666:	78 f4       	brcc	.+30     	; 0x1686 <ADC_ES_tSelectChannel+0x32>
	{
		ADMUX &= MADC_BIT_MASKING_REG_CHANNEL; //~0x1F // 0b11100000
    1668:	a7 e2       	ldi	r26, 0x27	; 39
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e7 e2       	ldi	r30, 0x27	; 39
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 7e       	andi	r24, 0xE0	; 224
    1674:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelID;
    1676:	a7 e2       	ldi	r26, 0x27	; 39
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e7 e2       	ldi	r30, 0x27	; 39
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	90 81       	ld	r25, Z
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	89 2b       	or	r24, r25
    1684:	8c 93       	st	X, r24
	else
	{
		/*Do Nothing*/
	}

	LOC_ES_tErrorState = ES_OK;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    168a:	89 81       	ldd	r24, Y+1	; 0x01

}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <ADC_ES_tEnableAutoTrigger>:
/**/
ES_t ADC_ES_tEnableAutoTrigger(u8 Copy_u8IntSource)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <ADC_ES_tEnableAutoTrigger+0x6>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	8a 83       	std	Y+2, r24	; 0x02

	ES_t LOC_ES_tErrorState = ES_NOK ;
    16a2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8IntSource <= 7)
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	40 f5       	brcc	.+80     	; 0x16fa <ADC_ES_tEnableAutoTrigger+0x64>
	{
		ADCSRA &=~(1<<5);
    16aa:	a6 e2       	ldi	r26, 0x26	; 38
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e6 e2       	ldi	r30, 0x26	; 38
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7d       	andi	r24, 0xDF	; 223
    16b6:	8c 93       	st	X, r24
		SFIOR  &= MADC_BIT_MASKING_TRIGERSOURCE;
    16b8:	a0 e5       	ldi	r26, 0x50	; 80
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e0 e5       	ldi	r30, 0x50	; 80
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 71       	andi	r24, 0x1F	; 31
    16c4:	8c 93       	st	X, r24

		SFIOR  |= (Copy_u8IntSource <<5);
    16c6:	a0 e5       	ldi	r26, 0x50	; 80
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e0 e5       	ldi	r30, 0x50	; 80
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	82 95       	swap	r24
    16de:	92 95       	swap	r25
    16e0:	90 7f       	andi	r25, 0xF0	; 240
    16e2:	98 27       	eor	r25, r24
    16e4:	80 7f       	andi	r24, 0xF0	; 240
    16e6:	98 27       	eor	r25, r24
    16e8:	82 2b       	or	r24, r18
    16ea:	8c 93       	st	X, r24
		ADCSRA |= (1<<5);
    16ec:	a6 e2       	ldi	r26, 0x26	; 38
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e6 e2       	ldi	r30, 0x26	; 38
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 62       	ori	r24, 0x20	; 32
    16f8:	8c 93       	st	X, r24
	else
	{
		/*Do Nothing*/
	}

	LOC_ES_tErrorState = ES_OK;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01


}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <ADC_ES_tDisableAutoTrigger>:
/**/
ES_t ADC_ES_tDisableAutoTrigger(void)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1714:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &=~(1<<5);
    1716:	a6 e2       	ldi	r26, 0x26	; 38
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e6 e2       	ldi	r30, 0x26	; 38
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7d       	andi	r24, 0xDF	; 223
    1722:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1728:	89 81       	ldd	r24, Y+1	; 0x01

}
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <ADC_ES_tPolling>:
/**/
ES_t ADC_ES_tPolling(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62

	ES_t LOC_ES_tErrorState = ES_NOK ;
    173c:	19 82       	std	Y+1, r1	; 0x01

	while (! ((ADCSRA>>4)&1) );
    173e:	e6 e2       	ldi	r30, 0x26	; 38
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	82 95       	swap	r24
    1746:	8f 70       	andi	r24, 0x0F	; 15
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	90 70       	andi	r25, 0x00	; 0
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	a9 f3       	breq	.-22     	; 0x173e <ADC_ES_tPolling+0xc>

	LOC_ES_tErrorState = ES_OK;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1758:	89 81       	ldd	r24, Y+1	; 0x01
}
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <ADC_ES_tClearFlag>:
/**/
ES_t ADC_ES_tClearFlag(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    176c:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |=(1<<4);
    176e:	a6 e2       	ldi	r26, 0x26	; 38
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e6 e2       	ldi	r30, 0x26	; 38
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 61       	ori	r24, 0x10	; 16
    177a:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <ADC_ES_tEnableADC>:
/**/

ES_t ADC_ES_tEnableADC(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	0f 92       	push	r0
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1794:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<7);
    1796:	a6 e2       	ldi	r26, 0x26	; 38
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e6 e2       	ldi	r30, 0x26	; 38
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 68       	ori	r24, 0x80	; 128
    17a2:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <ADC_ES_tDisableADC>:
/**/

ES_t ADC_ES_tDisableADC(void)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62

	ES_t LOC_ES_tErrorState = ES_NOK ;
    17bc:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &=~(1<<7);
    17be:	a6 e2       	ldi	r26, 0x26	; 38
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e6 e2       	ldi	r30, 0x26	; 38
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 77       	andi	r24, 0x7F	; 127
    17ca:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <ADC_ES_tEnableADC_INT>:
/**/
ES_t ADC_ES_tEnableADC_INT(void)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    17e4:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<3);
    17e6:	a6 e2       	ldi	r26, 0x26	; 38
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e6 e2       	ldi	r30, 0x26	; 38
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	88 60       	ori	r24, 0x08	; 8
    17f2:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <ADC_ES_tDisableADC_INT>:
/**/
ES_t ADC_ES_tDisableADC_INT(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	0f 92       	push	r0
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62

	ES_t LOC_ES_tErrorState = ES_NOK ;
    180c:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &=~(1<<3);
    180e:	a6 e2       	ldi	r26, 0x26	; 38
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e6 e2       	ldi	r30, 0x26	; 38
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	87 7f       	andi	r24, 0xF7	; 247
    181a:	8c 93       	st	X, r24

	LOC_ES_tErrorState = ES_OK;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    1820:	89 81       	ldd	r24, Y+1	; 0x01

}
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <__vector_16>:

ISR(VECT_ADC)
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfunISRFun != NULL)
    1854:	80 91 ca 01 	lds	r24, 0x01CA
    1858:	90 91 cb 01 	lds	r25, 0x01CB
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	49 f0       	breq	.+18     	; 0x1872 <__vector_16+0x48>
	{
		ADC_pfunISRFun( ADC_pvidISRParameter );
    1860:	e0 91 ca 01 	lds	r30, 0x01CA
    1864:	f0 91 cb 01 	lds	r31, 0x01CB
    1868:	80 91 cc 01 	lds	r24, 0x01CC
    186c:	90 91 cd 01 	lds	r25, 0x01CD
    1870:	09 95       	icall
	}
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <DIO_ES_tInit>:
#include"DIO_Private.h"


/*DIO Initialization*/
ES_t DIO_ES_tInit(void)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
	/*Pins Direction according to your Configuration */
	DDRA = CONCAT(PA7_DDR,PA6_DDR,PA5_DDR,PA4_DDR,PA3_DDR,PA2_DDR,PA1_DDR,PA0_DDR);
    18a4:	ea e3       	ldi	r30, 0x3A	; 58
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	10 82       	st	Z, r1
	DDRB = CONCAT(PB7_DDR,PB6_DDR,PB5_DDR,PB4_DDR,PB3_DDR,PB2_DDR,PB1_DDR,PB0_DDR);
    18aa:	e7 e3       	ldi	r30, 0x37	; 55
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	10 82       	st	Z, r1
	DDRC = CONCAT(PC7_DDR,PC6_DDR,PC5_DDR,PC4_DDR,PC3_DDR,PC2_DDR,PC1_DDR,PC0_DDR);
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8f e2       	ldi	r24, 0x2F	; 47
    18b6:	80 83       	st	Z, r24
	DDRD = CONCAT(PD7_DDR,PD6_DDR,PD5_DDR,PD4_DDR,PD3_DDR,PD2_DDR,PD1_DDR,PD0_DDR);
    18b8:	e1 e3       	ldi	r30, 0x31	; 49
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	10 82       	st	Z, r1

	/*Pins Initial Value according to your configuration */
	PORTA = CONCAT(PA7_PORT,PA6_PORT,PA5_PORT,PA4_PORT,PA3_PORT,PA2_PORT,PA1_PORT,PA0_PORT);
    18be:	eb e3       	ldi	r30, 0x3B	; 59
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	10 82       	st	Z, r1
	PORTB = CONCAT(PB7_PORT,PB6_PORT,PB5_PORT,PB4_PORT,PB3_PORT,PB2_PORT,PB1_PORT,PB0_PORT);
    18c4:	e8 e3       	ldi	r30, 0x38	; 56
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	10 82       	st	Z, r1
	PORTC = CONCAT(PC7_PORT,PC6_PORT,PC5_PORT,PC4_PORT,PC3_PORT,PC2_PORT,PC1_PORT,PC0_PORT);
    18ca:	e5 e3       	ldi	r30, 0x35	; 53
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
	PORTD = CONCAT(PD7_PORT,PD6_PORT,PD5_PORT,PD4_PORT,PD3_PORT,PD2_PORT,PD1_PORT,PD0_PORT);
    18d0:	e2 e3       	ldi	r30, 0x32	; 50
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	10 82       	st	Z, r1

#elif PA0_DDR == PIN_INPUT

#endif
	 */
	LOC_ES_tErrorState = ES_OK ;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    18da:	89 81       	ldd	r24, Y+1	; 0x01
}
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <DIO_ES_tSetPinDirection>:
/*Set Pin Direction*/
ES_t DIO_ES_tSetPinDirection(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinDirection)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <DIO_ES_tSetPinDirection+0x6>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <DIO_ES_tSetPinDirection+0x8>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <DIO_ES_tSetPinDirection+0xa>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	8a 83       	std	Y+2, r24	; 0x02
    18f4:	6b 83       	std	Y+3, r22	; 0x03
    18f6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    18f8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	48 f0       	brcs	.+18     	; 0x1912 <DIO_ES_tSetPinDirection+0x2e>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 30       	cpi	r24, 0x08	; 8
    1904:	30 f0       	brcs	.+12     	; 0x1912 <DIO_ES_tSetPinDirection+0x2e>
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	18 f0       	brcs	.+6      	; 0x1912 <DIO_ES_tSetPinDirection+0x2e>
			Copy_u8PinNumber>PIN7 &&
			Copy_PinDirection>PIN_OUTPUT)
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	d1 c0       	rjmp	.+418    	; 0x1ab4 <DIO_ES_tSetPinDirection+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	3e 83       	std	Y+6, r19	; 0x06
    191a:	2d 83       	std	Y+5, r18	; 0x05
    191c:	6d 81       	ldd	r22, Y+5	; 0x05
    191e:	7e 81       	ldd	r23, Y+6	; 0x06
    1920:	61 30       	cpi	r22, 0x01	; 1
    1922:	71 05       	cpc	r23, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <DIO_ES_tSetPinDirection+0x44>
    1926:	44 c0       	rjmp	.+136    	; 0x19b0 <DIO_ES_tSetPinDirection+0xcc>
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	91 05       	cpc	r25, r1
    1930:	34 f4       	brge	.+12     	; 0x193e <DIO_ES_tSetPinDirection+0x5a>
    1932:	2d 81       	ldd	r18, Y+5	; 0x05
    1934:	3e 81       	ldd	r19, Y+6	; 0x06
    1936:	21 15       	cp	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	71 f0       	breq	.+28     	; 0x1958 <DIO_ES_tSetPinDirection+0x74>
    193c:	b9 c0       	rjmp	.+370    	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
    193e:	6d 81       	ldd	r22, Y+5	; 0x05
    1940:	7e 81       	ldd	r23, Y+6	; 0x06
    1942:	62 30       	cpi	r22, 0x02	; 2
    1944:	71 05       	cpc	r23, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <DIO_ES_tSetPinDirection+0x66>
    1948:	5c c0       	rjmp	.+184    	; 0x1a02 <DIO_ES_tSetPinDirection+0x11e>
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <DIO_ES_tSetPinDirection+0x72>
    1954:	82 c0       	rjmp	.+260    	; 0x1a5a <DIO_ES_tSetPinDirection+0x176>
    1956:	ac c0       	rjmp	.+344    	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinDirection==PIN_OUTPUT)
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	a1 f4       	brne	.+40     	; 0x1986 <DIO_ES_tSetPinDirection+0xa2>
				DDRA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    195e:	aa e3       	ldi	r26, 0x3A	; 58
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ea e3       	ldi	r30, 0x3A	; 58
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_ES_tSetPinDirection+0x98>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_ES_tSetPinDirection+0x94>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	95 c0       	rjmp	.+298    	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1986:	aa e3       	ldi	r26, 0x3A	; 58
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ea e3       	ldi	r30, 0x3A	; 58
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <DIO_ES_tSetPinDirection+0xc0>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <DIO_ES_tSetPinDirection+0xbc>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	80 c0       	rjmp	.+256    	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTB:
			DDRB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    19b0:	a7 e3       	ldi	r26, 0x37	; 55
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_ES_tSetPinDirection+0xe8>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	2a 95       	dec	r18
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_ES_tSetPinDirection+0xe4>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
			DDRB |= (Copy_PinDirection<<Copy_u8PinNumber);
    19d6:	a7 e3       	ldi	r26, 0x37	; 55
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e7 e3       	ldi	r30, 0x37	; 55
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	b9 01       	movw	r22, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_ES_tSetPinDirection+0x112>
    19f2:	66 0f       	add	r22, r22
    19f4:	77 1f       	adc	r23, r23
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_ES_tSetPinDirection+0x10e>
    19fa:	cb 01       	movw	r24, r22
    19fc:	84 2b       	or	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	57 c0       	rjmp	.+174    	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinDirection==PIN_OUTPUT)
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	a1 f4       	brne	.+40     	; 0x1a30 <DIO_ES_tSetPinDirection+0x14c>
				DDRC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1a08:	a4 e3       	ldi	r26, 0x34	; 52
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e4 e3       	ldi	r30, 0x34	; 52
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_ES_tSetPinDirection+0x142>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_ES_tSetPinDirection+0x13e>
    1a2a:	84 2b       	or	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	40 c0       	rjmp	.+128    	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1a30:	a4 e3       	ldi	r26, 0x34	; 52
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e4 e3       	ldi	r30, 0x34	; 52
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_ES_tSetPinDirection+0x16a>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_ES_tSetPinDirection+0x166>
    1a52:	80 95       	com	r24
    1a54:	84 23       	and	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	2b c0       	rjmp	.+86     	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinDirection==PIN_OUTPUT)
    1a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	a1 f4       	brne	.+40     	; 0x1a88 <DIO_ES_tSetPinDirection+0x1a4>
				DDRD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1a60:	a1 e3       	ldi	r26, 0x31	; 49
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e1 e3       	ldi	r30, 0x31	; 49
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_ES_tSetPinDirection+0x19a>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_ES_tSetPinDirection+0x196>
    1a82:	84 2b       	or	r24, r20
    1a84:	8c 93       	st	X, r24
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1a88:	a1 e3       	ldi	r26, 0x31	; 49
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e1 e3       	ldi	r30, 0x31	; 49
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_ES_tSetPinDirection+0x1c2>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_ES_tSetPinDirection+0x1be>
    1aaa:	80 95       	com	r24
    1aac:	84 23       	and	r24, r20
    1aae:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab6:	26 96       	adiw	r28, 0x06	; 6
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <DIO_ES_tSetPinValue>:
/*Set Pin Value*/
ES_t DIO_ES_tSetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinValue)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <DIO_ES_tSetPinValue+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <DIO_ES_tSetPinValue+0x8>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <DIO_ES_tSetPinValue+0xa>
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
    1ad8:	6b 83       	std	Y+3, r22	; 0x03
    1ada:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1adc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	48 f0       	brcs	.+18     	; 0x1af6 <DIO_ES_tSetPinValue+0x2e>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	88 30       	cpi	r24, 0x08	; 8
    1ae8:	30 f0       	brcs	.+12     	; 0x1af6 <DIO_ES_tSetPinValue+0x2e>
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	18 f0       	brcs	.+6      	; 0x1af6 <DIO_ES_tSetPinValue+0x2e>
			Copy_u8PinNumber>PIN7 &&
			Copy_PinValue>PIN_HIGH)
	{
		LOC_ES_tErrorState  = ES_OUT_OF_RANGE ;
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	d1 c0       	rjmp	.+418    	; 0x1c98 <DIO_ES_tSetPinValue+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3e 83       	std	Y+6, r19	; 0x06
    1afe:	2d 83       	std	Y+5, r18	; 0x05
    1b00:	6d 81       	ldd	r22, Y+5	; 0x05
    1b02:	7e 81       	ldd	r23, Y+6	; 0x06
    1b04:	61 30       	cpi	r22, 0x01	; 1
    1b06:	71 05       	cpc	r23, r1
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <DIO_ES_tSetPinValue+0x44>
    1b0a:	44 c0       	rjmp	.+136    	; 0x1b94 <DIO_ES_tSetPinValue+0xcc>
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	91 05       	cpc	r25, r1
    1b14:	34 f4       	brge	.+12     	; 0x1b22 <DIO_ES_tSetPinValue+0x5a>
    1b16:	2d 81       	ldd	r18, Y+5	; 0x05
    1b18:	3e 81       	ldd	r19, Y+6	; 0x06
    1b1a:	21 15       	cp	r18, r1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	71 f0       	breq	.+28     	; 0x1b3c <DIO_ES_tSetPinValue+0x74>
    1b20:	b9 c0       	rjmp	.+370    	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
    1b22:	6d 81       	ldd	r22, Y+5	; 0x05
    1b24:	7e 81       	ldd	r23, Y+6	; 0x06
    1b26:	62 30       	cpi	r22, 0x02	; 2
    1b28:	71 05       	cpc	r23, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <DIO_ES_tSetPinValue+0x66>
    1b2c:	5c c0       	rjmp	.+184    	; 0x1be6 <DIO_ES_tSetPinValue+0x11e>
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <DIO_ES_tSetPinValue+0x72>
    1b38:	82 c0       	rjmp	.+260    	; 0x1c3e <DIO_ES_tSetPinValue+0x176>
    1b3a:	ac c0       	rjmp	.+344    	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinValue==PIN_HIGH)
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	a1 f4       	brne	.+40     	; 0x1b6a <DIO_ES_tSetPinValue+0xa2>
				PORTA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1b42:	ab e3       	ldi	r26, 0x3B	; 59
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	eb e3       	ldi	r30, 0x3B	; 59
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_ES_tSetPinValue+0x98>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_ES_tSetPinValue+0x94>
    1b64:	84 2b       	or	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	95 c0       	rjmp	.+298    	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1b6a:	ab e3       	ldi	r26, 0x3B	; 59
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	eb e3       	ldi	r30, 0x3B	; 59
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <DIO_ES_tSetPinValue+0xc0>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <DIO_ES_tSetPinValue+0xbc>
    1b8c:	80 95       	com	r24
    1b8e:	84 23       	and	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	80 c0       	rjmp	.+256    	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTB:
			PORTB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1b94:	a8 e3       	ldi	r26, 0x38	; 56
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e8 e3       	ldi	r30, 0x38	; 56
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <DIO_ES_tSetPinValue+0xe8>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	2a 95       	dec	r18
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <DIO_ES_tSetPinValue+0xe4>
    1bb4:	80 95       	com	r24
    1bb6:	84 23       	and	r24, r20
    1bb8:	8c 93       	st	X, r24
			PORTB |= (Copy_PinValue<<Copy_u8PinNumber);
    1bba:	a8 e3       	ldi	r26, 0x38	; 56
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e8 e3       	ldi	r30, 0x38	; 56
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_ES_tSetPinValue+0x112>
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	8a 95       	dec	r24
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_ES_tSetPinValue+0x10e>
    1bde:	cb 01       	movw	r24, r22
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	57 c0       	rjmp	.+174    	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinValue==PIN_HIGH)
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	a1 f4       	brne	.+40     	; 0x1c14 <DIO_ES_tSetPinValue+0x14c>
				PORTC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1bec:	a5 e3       	ldi	r26, 0x35	; 53
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e5 e3       	ldi	r30, 0x35	; 53
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_ES_tSetPinValue+0x142>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_ES_tSetPinValue+0x13e>
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	40 c0       	rjmp	.+128    	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1c14:	a5 e3       	ldi	r26, 0x35	; 53
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e3       	ldi	r30, 0x35	; 53
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_ES_tSetPinValue+0x16a>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_ES_tSetPinValue+0x166>
    1c36:	80 95       	com	r24
    1c38:	84 23       	and	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	2b c0       	rjmp	.+86     	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinValue==PIN_HIGH)
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	a1 f4       	brne	.+40     	; 0x1c6c <DIO_ES_tSetPinValue+0x1a4>
				PORTD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
    1c44:	a2 e3       	ldi	r26, 0x32	; 50
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e2 e3       	ldi	r30, 0x32	; 50
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_ES_tSetPinValue+0x19a>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <DIO_ES_tSetPinValue+0x196>
    1c66:	84 2b       	or	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
    1c6c:	a2 e3       	ldi	r26, 0x32	; 50
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e2 e3       	ldi	r30, 0x32	; 50
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_ES_tSetPinValue+0x1c2>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_ES_tSetPinValue+0x1be>
    1c8e:	80 95       	com	r24
    1c90:	84 23       	and	r24, r20
    1c92:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	26 96       	adiw	r28, 0x06	; 6
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <DIO_ES_tGetPinValue>:
/*Get Pin Value*/
ES_t DIO_ES_tGetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8* Copy_PinValue)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	27 97       	sbiw	r28, 0x07	; 7
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
    1cc2:	6b 83       	std	Y+3, r22	; 0x03
    1cc4:	5d 83       	std	Y+5, r21	; 0x05
    1cc6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1cc8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PinValue!=NULL)
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <DIO_ES_tGetPinValue+0x28>
    1cd2:	7c c0       	rjmp	.+248    	; 0x1dcc <DIO_ES_tGetPinValue+0x120>
	{
		if(Copy_u8PortNumber> DIO_PORTD &&
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	84 30       	cpi	r24, 0x04	; 4
    1cd8:	30 f0       	brcs	.+12     	; 0x1ce6 <DIO_ES_tGetPinValue+0x3a>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	88 30       	cpi	r24, 0x08	; 8
    1cde:	18 f0       	brcs	.+6      	; 0x1ce6 <DIO_ES_tGetPinValue+0x3a>
				Copy_u8PinNumber>PIN7 )
		{
			LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	75 c0       	rjmp	.+234    	; 0x1dd0 <DIO_ES_tGetPinValue+0x124>
		}
		else
		{
			switch(Copy_u8PortNumber)
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3f 83       	std	Y+7, r19	; 0x07
    1cee:	2e 83       	std	Y+6, r18	; 0x06
    1cf0:	4e 81       	ldd	r20, Y+6	; 0x06
    1cf2:	5f 81       	ldd	r21, Y+7	; 0x07
    1cf4:	41 30       	cpi	r20, 0x01	; 1
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	59 f1       	breq	.+86     	; 0x1d50 <DIO_ES_tGetPinValue+0xa4>
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	91 05       	cpc	r25, r1
    1d02:	34 f4       	brge	.+12     	; 0x1d10 <DIO_ES_tGetPinValue+0x64>
    1d04:	2e 81       	ldd	r18, Y+6	; 0x06
    1d06:	3f 81       	ldd	r19, Y+7	; 0x07
    1d08:	21 15       	cp	r18, r1
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	69 f0       	breq	.+26     	; 0x1d28 <DIO_ES_tGetPinValue+0x7c>
    1d0e:	5b c0       	rjmp	.+182    	; 0x1dc6 <DIO_ES_tGetPinValue+0x11a>
    1d10:	4e 81       	ldd	r20, Y+6	; 0x06
    1d12:	5f 81       	ldd	r21, Y+7	; 0x07
    1d14:	42 30       	cpi	r20, 0x02	; 2
    1d16:	51 05       	cpc	r21, r1
    1d18:	79 f1       	breq	.+94     	; 0x1d78 <DIO_ES_tGetPinValue+0xcc>
    1d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <DIO_ES_tGetPinValue+0x7a>
    1d24:	3d c0       	rjmp	.+122    	; 0x1da0 <DIO_ES_tGetPinValue+0xf4>
    1d26:	4f c0       	rjmp	.+158    	; 0x1dc6 <DIO_ES_tGetPinValue+0x11a>
			{

			case DIO_PORTA:
				*Copy_PinValue = (PINA>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1d28:	e9 e3       	ldi	r30, 0x39	; 57
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a9 01       	movw	r20, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_ES_tGetPinValue+0x94>
    1d3c:	55 95       	asr	r21
    1d3e:	47 95       	ror	r20
    1d40:	8a 95       	dec	r24
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <DIO_ES_tGetPinValue+0x90>
    1d44:	ca 01       	movw	r24, r20
    1d46:	81 70       	andi	r24, 0x01	; 1
    1d48:	ec 81       	ldd	r30, Y+4	; 0x04
    1d4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d4c:	80 83       	st	Z, r24
    1d4e:	3b c0       	rjmp	.+118    	; 0x1dc6 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTB:
				*Copy_PinValue = (PINB>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1d50:	e6 e3       	ldi	r30, 0x36	; 54
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a9 01       	movw	r20, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <DIO_ES_tGetPinValue+0xbc>
    1d64:	55 95       	asr	r21
    1d66:	47 95       	ror	r20
    1d68:	8a 95       	dec	r24
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <DIO_ES_tGetPinValue+0xb8>
    1d6c:	ca 01       	movw	r24, r20
    1d6e:	81 70       	andi	r24, 0x01	; 1
    1d70:	ec 81       	ldd	r30, Y+4	; 0x04
    1d72:	fd 81       	ldd	r31, Y+5	; 0x05
    1d74:	80 83       	st	Z, r24
    1d76:	27 c0       	rjmp	.+78     	; 0x1dc6 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTC:
				*Copy_PinValue = (PINC>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1d78:	e3 e3       	ldi	r30, 0x33	; 51
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_ES_tGetPinValue+0xe4>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_ES_tGetPinValue+0xe0>
    1d94:	ca 01       	movw	r24, r20
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9c:	80 83       	st	Z, r24
    1d9e:	13 c0       	rjmp	.+38     	; 0x1dc6 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTD:
				*Copy_PinValue = (PIND>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1da0:	e0 e3       	ldi	r30, 0x30	; 48
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_ES_tGetPinValue+0x10c>
    1db4:	55 95       	asr	r21
    1db6:	47 95       	ror	r20
    1db8:	8a 95       	dec	r24
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_ES_tGetPinValue+0x108>
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	81 70       	andi	r24, 0x01	; 1
    1dc0:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc2:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc4:	80 83       	st	Z, r24
				break ;
			default:
				break ;
				/*Do Nothing*/
			}
			LOC_ES_tErrorState = ES_OK ;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_ES_tGetPinValue+0x124>
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ES_tErrorState ;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd2:	27 96       	adiw	r28, 0x07	; 7
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <DIO_ES_tTogglePinValue>:
/*Toggle Pin Value*/
ES_t DIO_ES_tTogglePinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <DIO_ES_tTogglePinValue+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <DIO_ES_tTogglePinValue+0x8>
    1dec:	0f 92       	push	r0
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	8a 83       	std	Y+2, r24	; 0x02
    1df4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK;
    1df6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber> DIO_PORTD &&
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	30 f0       	brcs	.+12     	; 0x1e0a <DIO_ES_tTogglePinValue+0x26>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	88 30       	cpi	r24, 0x08	; 8
    1e02:	18 f0       	brcs	.+6      	; 0x1e0a <DIO_ES_tTogglePinValue+0x26>
			Copy_u8PinNumber>PIN7 )
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	70 c0       	rjmp	.+224    	; 0x1eea <DIO_ES_tTogglePinValue+0x106>
	}
	else
	{
		switch(Copy_u8PortNumber)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3d 83       	std	Y+5, r19	; 0x05
    1e12:	2c 83       	std	Y+4, r18	; 0x04
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	9d 81       	ldd	r25, Y+5	; 0x05
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	49 f1       	breq	.+82     	; 0x1e70 <DIO_ES_tTogglePinValue+0x8c>
    1e1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e20:	3d 81       	ldd	r19, Y+5	; 0x05
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <DIO_ES_tTogglePinValue+0x4e>
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <DIO_ES_tTogglePinValue+0x64>
    1e30:	5a c0       	rjmp	.+180    	; 0x1ee6 <DIO_ES_tTogglePinValue+0x102>
    1e32:	2c 81       	ldd	r18, Y+4	; 0x04
    1e34:	3d 81       	ldd	r19, Y+5	; 0x05
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	71 f1       	breq	.+92     	; 0x1e98 <DIO_ES_tTogglePinValue+0xb4>
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	e9 f1       	breq	.+122    	; 0x1ec0 <DIO_ES_tTogglePinValue+0xdc>
    1e46:	4f c0       	rjmp	.+158    	; 0x1ee6 <DIO_ES_tTogglePinValue+0x102>
		{

		case DIO_PORTA:
			PORTA ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1e48:	ab e3       	ldi	r26, 0x3B	; 59
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	eb e3       	ldi	r30, 0x3B	; 59
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <DIO_ES_tTogglePinValue+0x82>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <DIO_ES_tTogglePinValue+0x7e>
    1e6a:	84 27       	eor	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	3b c0       	rjmp	.+118    	; 0x1ee6 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTB:
			PORTB ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1e70:	a8 e3       	ldi	r26, 0x38	; 56
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e8 e3       	ldi	r30, 0x38	; 56
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <DIO_ES_tTogglePinValue+0xaa>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <DIO_ES_tTogglePinValue+0xa6>
    1e92:	84 27       	eor	r24, r20
    1e94:	8c 93       	st	X, r24
    1e96:	27 c0       	rjmp	.+78     	; 0x1ee6 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTC:
			PORTC ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1e98:	a5 e3       	ldi	r26, 0x35	; 53
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e3       	ldi	r30, 0x35	; 53
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_ES_tTogglePinValue+0xd2>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_ES_tTogglePinValue+0xce>
    1eba:	84 27       	eor	r24, r20
    1ebc:	8c 93       	st	X, r24
    1ebe:	13 c0       	rjmp	.+38     	; 0x1ee6 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTD:
			PORTD ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1ec0:	a2 e3       	ldi	r26, 0x32	; 50
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e2 e3       	ldi	r30, 0x32	; 50
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_ES_tTogglePinValue+0xfa>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_ES_tTogglePinValue+0xf6>
    1ee2:	84 27       	eor	r24, r20
    1ee4:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <SWITCH_ES_tInit>:
extern u8 G_u8SwitchNum ;


/*Switch Driver Initialization*/
ES_t SWITCH_ES_tInit(SWITCH_t* Copy_PtrSWITCH_tConfig )
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <SWITCH_ES_tInit+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <SWITCH_ES_tInit+0x8>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1f0c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtrSWITCH_tConfig !=NULL)
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <SWITCH_ES_tInit+0x1c>
    1f16:	5c c0       	rjmp	.+184    	; 0x1fd0 <SWITCH_ES_tInit+0xd4>
	{
		u8 LOC_u8SwitchIter = 0 ;
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	53 c0       	rjmp	.+166    	; 0x1fc2 <SWITCH_ES_tInit+0xc6>
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	c9 01       	movw	r24, r18
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	28 0f       	add	r18, r24
    1f2a:	39 1f       	adc	r19, r25
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	40 81       	ld	r20, Z
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	c9 01       	movw	r24, r18
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	28 0f       	add	r18, r24
    1f46:	39 1f       	adc	r19, r25
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e2 0f       	add	r30, r18
    1f50:	f3 1f       	adc	r31, r19
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	84 2f       	mov	r24, r20
    1f56:	69 2f       	mov	r22, r25
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
					Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PIN,PIN_INPUT);
			DIO_ES_tSetPinValue(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	c9 01       	movw	r24, r18
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	28 0f       	add	r18, r24
    1f6c:	39 1f       	adc	r19, r25
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	50 81       	ld	r21, Z
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	c9 01       	movw	r24, r18
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	28 0f       	add	r18, r24
    1f88:	39 1f       	adc	r19, r25
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e2 0f       	add	r30, r18
    1f92:	f3 1f       	adc	r31, r19
    1f94:	41 81       	ldd	r20, Z+1	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	28 0f       	add	r18, r24
    1fa4:	39 1f       	adc	r19, r25
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	fc 01       	movw	r30, r24
    1fac:	e2 0f       	add	r30, r18
    1fae:	f3 1f       	adc	r31, r19
    1fb0:	92 81       	ldd	r25, Z+2	; 0x02
    1fb2:	85 2f       	mov	r24, r21
    1fb4:	64 2f       	mov	r22, r20
    1fb6:	49 2f       	mov	r20, r25
    1fb8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtrSWITCH_tConfig !=NULL)
	{
		u8 LOC_u8SwitchIter = 0 ;
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	90 91 8a 01 	lds	r25, 0x018A
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	89 17       	cp	r24, r25
    1fca:	08 f4       	brcc	.+2      	; 0x1fce <SWITCH_ES_tInit+0xd2>
    1fcc:	a7 cf       	rjmp	.-178    	; 0x1f1c <SWITCH_ES_tInit+0x20>
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <SWITCH_ES_tInit+0xd8>
					(Copy_PtrSWITCH_tConfig+LOC_u8SwitchIter)->SWITCH_INTERFACE);
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
	}

   return LOC_ES_tErrorState ;
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <SWITCH_ES_tGetSwitchState>:
/*Get Switch State*/
ES_t SWITCH_ES_tGetSwitchState(SWITCH_t* Copy_PtrSWITCH_tInfo,u8* Copy_Pu8SwitchState)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <SWITCH_ES_tGetSwitchState+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <SWITCH_ES_tGetSwitchState+0x8>
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	9b 83       	std	Y+3, r25	; 0x03
    1ff4:	8a 83       	std	Y+2, r24	; 0x02
    1ff6:	7d 83       	std	Y+5, r23	; 0x05
    1ff8:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1ffa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8SwitchState !=NULL &&
    1ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	91 f0       	breq	.+36     	; 0x2028 <SWITCH_ES_tGetSwitchState+0x44>
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	9d 81       	ldd	r25, Y+5	; 0x05
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	71 f0       	breq	.+28     	; 0x2028 <SWITCH_ES_tGetSwitchState+0x44>
			Copy_Pu8SwitchState !=NULL)
	{
		LOC_ES_tErrorState = DIO_ES_tGetPinValue(Copy_PtrSWITCH_tInfo->SWITCH_PORT,Copy_PtrSWITCH_tInfo->SWITCH_PIN,Copy_Pu8SwitchState);
    200c:	ea 81       	ldd	r30, Y+2	; 0x02
    200e:	fb 81       	ldd	r31, Y+3	; 0x03
    2010:	80 81       	ld	r24, Z
    2012:	ea 81       	ldd	r30, Y+2	; 0x02
    2014:	fb 81       	ldd	r31, Y+3	; 0x03
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	2c 81       	ldd	r18, Y+4	; 0x04
    201a:	3d 81       	ldd	r19, Y+5	; 0x05
    201c:	69 2f       	mov	r22, r25
    201e:	a9 01       	movw	r20, r18
    2020:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_ES_tGetPinValue>
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	02 c0       	rjmp	.+4      	; 0x202c <SWITCH_ES_tGetSwitchState+0x48>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	89 83       	std	Y+1, r24	; 0x01
	}
	   return LOC_ES_tErrorState ;
    202c:	89 81       	ldd	r24, Y+1	; 0x01
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <STEPPER_ES_tInit>:



/*Stepper_ULN2003 Initialization*/
ES_t STEPPER_ES_tInit(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	0f 92       	push	r0
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2048:	19 82       	std	Y+1, r1	; 0x01
	DIO_ES_tSetPinDirection(BLUE_GRP,BLUE_PIN,PIN_OUTPUT);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(PINK_GRP,PINK_PIN,PIN_OUTPUT);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	67 e0       	ldi	r22, 0x07	; 7
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(YELLOW_GRP,YELLOW_PIN,PIN_OUTPUT);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	65 e0       	ldi	r22, 0x05	; 5
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(ORANGE_GRP,ORANGE_PIN,PIN_OUTPUT);
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	63 e0       	ldi	r22, 0x03	; 3
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,PIN_HIGH);
	DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,PIN_HIGH);
	*/
	LOC_ES_tErrorState = ES_OK ;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
}
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <STEPPER_ES_tFullCycle>:

/**/
ES_t STEPPER_ES_tFullCycle(u8 Copy_u8Direction,u8 Copy_u8Speed)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	a2 97       	sbiw	r28, 0x22	; 34
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	89 a3       	std	Y+33, r24	; 0x21
    2096:	6a a3       	std	Y+34, r22	; 0x22
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2098:	18 a2       	std	Y+32, r1	; 0x20
	u8 State = 15 ;
    209a:	8f e0       	ldi	r24, 0x0F	; 15
    209c:	8f 8f       	std	Y+31, r24	; 0x1f
	if(Copy_u8Direction == CCW)
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <STEPPER_ES_tFullCycle+0x26>
    20a4:	b8 c0       	rjmp	.+368    	; 0x2216 <STEPPER_ES_tFullCycle+0x196>
	{
		for(u8 i = 0 ; i<2048 ; i++)
    20a6:	1e 8e       	std	Y+30, r1	; 0x1e
		{
			State &=~(1<<(i%4));
    20a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 01       	movw	r18, r24
    20b0:	23 70       	andi	r18, 0x03	; 3
    20b2:	30 70       	andi	r19, 0x00	; 0
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <STEPPER_ES_tFullCycle+0x3e>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	2a 95       	dec	r18
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <STEPPER_ES_tFullCycle+0x3a>
    20c2:	98 2f       	mov	r25, r24
    20c4:	90 95       	com	r25
    20c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c8:	89 23       	and	r24, r25
    20ca:	8f 8f       	std	Y+31, r24	; 0x1f
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    20cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ce:	98 2f       	mov	r25, r24
    20d0:	91 70       	andi	r25, 0x01	; 1
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	49 2f       	mov	r20, r25
    20d8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    20dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20de:	86 95       	lsr	r24
    20e0:	86 95       	lsr	r24
    20e2:	86 95       	lsr	r24
    20e4:	98 2f       	mov	r25, r24
    20e6:	91 70       	andi	r25, 0x01	; 1
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	63 e0       	ldi	r22, 0x03	; 3
    20ec:	49 2f       	mov	r20, r25
    20ee:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    20f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f4:	86 95       	lsr	r24
    20f6:	86 95       	lsr	r24
    20f8:	98 2f       	mov	r25, r24
    20fa:	91 70       	andi	r25, 0x01	; 1
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	65 e0       	ldi	r22, 0x05	; 5
    2100:	49 2f       	mov	r20, r25
    2102:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	86 95       	lsr	r24
    210a:	98 2f       	mov	r25, r24
    210c:	91 70       	andi	r25, 0x01	; 1
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	67 e0       	ldi	r22, 0x07	; 7
    2112:	49 2f       	mov	r20, r25
    2114:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			State = 0x0F ;
    2118:	8f e0       	ldi	r24, 0x0F	; 15
    211a:	8f 8f       	std	Y+31, r24	; 0x1f
			_delay_ms(Copy_u8Speed);
    211c:	8a a1       	ldd	r24, Y+34	; 0x22
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	89 8f       	std	Y+25, r24	; 0x19
    2134:	9a 8f       	std	Y+26, r25	; 0x1a
    2136:	ab 8f       	std	Y+27, r26	; 0x1b
    2138:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	69 8d       	ldd	r22, Y+25	; 0x19
    213c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a ef       	ldi	r20, 0xFA	; 250
    2148:	54 e4       	ldi	r21, 0x44	; 68
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8d 8b       	std	Y+21, r24	; 0x15
    2154:	9e 8b       	std	Y+22, r25	; 0x16
    2156:	af 8b       	std	Y+23, r26	; 0x17
    2158:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215a:	6d 89       	ldd	r22, Y+21	; 0x15
    215c:	7e 89       	ldd	r23, Y+22	; 0x16
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <STEPPER_ES_tFullCycle+0xfc>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9c 8b       	std	Y+20, r25	; 0x14
    2178:	8b 8b       	std	Y+19, r24	; 0x13
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <STEPPER_ES_tFullCycle+0x17a>
	else if (__tmp > 65535)
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <STEPPER_ES_tFullCycle+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	69 8d       	ldd	r22, Y+25	; 0x19
    2196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	8b 8b       	std	Y+19, r24	; 0x13
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <STEPPER_ES_tFullCycle+0x15c>
    21be:	88 ec       	ldi	r24, 0xC8	; 200
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9a 8b       	std	Y+18, r25	; 0x12
    21c4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c6:	89 89       	ldd	r24, Y+17	; 0x11
    21c8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <STEPPER_ES_tFullCycle+0x14a>
    21ce:	9a 8b       	std	Y+18, r25	; 0x12
    21d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <STEPPER_ES_tFullCycle+0x13e>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <STEPPER_ES_tFullCycle+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9c 8b       	std	Y+20, r25	; 0x14
    21f8:	8b 8b       	std	Y+19, r24	; 0x13
    21fa:	8b 89       	ldd	r24, Y+19	; 0x13
    21fc:	9c 89       	ldd	r25, Y+20	; 0x14
    21fe:	98 8b       	std	Y+16, r25	; 0x10
    2200:	8f 87       	std	Y+15, r24	; 0x0f
    2202:	8f 85       	ldd	r24, Y+15	; 0x0f
    2204:	98 89       	ldd	r25, Y+16	; 0x10
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <STEPPER_ES_tFullCycle+0x186>
    220a:	98 8b       	std	Y+16, r25	; 0x10
    220c:	8f 87       	std	Y+15, r24	; 0x0f
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	u8 State = 15 ;
	if(Copy_u8Direction == CCW)
	{
		for(u8 i = 0 ; i<2048 ; i++)
    220e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	8e 8f       	std	Y+30, r24	; 0x1e
    2214:	49 cf       	rjmp	.-366    	; 0x20a8 <STEPPER_ES_tFullCycle+0x28>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
			State = 0x0F ;
			_delay_ms(Copy_u8Speed);
		}
	}
	if(Copy_u8Direction == CW)
    2216:	89 a1       	ldd	r24, Y+33	; 0x21
    2218:	88 23       	and	r24, r24
    221a:	09 f0       	breq	.+2      	; 0x221e <STEPPER_ES_tFullCycle+0x19e>
    221c:	b8 c0       	rjmp	.+368    	; 0x238e <STEPPER_ES_tFullCycle+0x30e>
	{
		for(u8 i = 0 ; i<2048 ; i++)
    221e:	1d 8e       	std	Y+29, r1	; 0x1d
		{
			State &=~(1<<(i%4));
    2220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 01       	movw	r18, r24
    2228:	23 70       	andi	r18, 0x03	; 3
    222a:	30 70       	andi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <STEPPER_ES_tFullCycle+0x1b6>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	2a 95       	dec	r18
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <STEPPER_ES_tFullCycle+0x1b2>
    223a:	98 2f       	mov	r25, r24
    223c:	90 95       	com	r25
    223e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2240:	89 23       	and	r24, r25
    2242:	8f 8f       	std	Y+31, r24	; 0x1f
			DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    2244:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2246:	98 2f       	mov	r25, r24
    2248:	91 70       	andi	r25, 0x01	; 1
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	49 2f       	mov	r20, r25
    2250:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	86 95       	lsr	r24
    2258:	98 2f       	mov	r25, r24
    225a:	91 70       	andi	r25, 0x01	; 1
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	67 e0       	ldi	r22, 0x07	; 7
    2260:	49 2f       	mov	r20, r25
    2262:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    2266:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2268:	86 95       	lsr	r24
    226a:	86 95       	lsr	r24
    226c:	98 2f       	mov	r25, r24
    226e:	91 70       	andi	r25, 0x01	; 1
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	65 e0       	ldi	r22, 0x05	; 5
    2274:	49 2f       	mov	r20, r25
    2276:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    227a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    227c:	86 95       	lsr	r24
    227e:	86 95       	lsr	r24
    2280:	86 95       	lsr	r24
    2282:	98 2f       	mov	r25, r24
    2284:	91 70       	andi	r25, 0x01	; 1
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	49 2f       	mov	r20, r25
    228c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			State = 0x0F ;
    2290:	8f e0       	ldi	r24, 0x0F	; 15
    2292:	8f 8f       	std	Y+31, r24	; 0x1f
		   _delay_ms(Copy_u8Speed);
    2294:	8a a1       	ldd	r24, Y+34	; 0x22
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a0 e0       	ldi	r26, 0x00	; 0
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8b 87       	std	Y+11, r24	; 0x0b
    22ac:	9c 87       	std	Y+12, r25	; 0x0c
    22ae:	ad 87       	std	Y+13, r26	; 0x0d
    22b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8f 83       	std	Y+7, r24	; 0x07
    22cc:	98 87       	std	Y+8, r25	; 0x08
    22ce:	a9 87       	std	Y+9, r26	; 0x09
    22d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <STEPPER_ES_tFullCycle+0x274>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <STEPPER_ES_tFullCycle+0x2f2>
	else if (__tmp > 65535)
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <STEPPER_ES_tFullCycle+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <STEPPER_ES_tFullCycle+0x2d4>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <STEPPER_ES_tFullCycle+0x2c2>
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <STEPPER_ES_tFullCycle+0x2b6>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <STEPPER_ES_tFullCycle+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <STEPPER_ES_tFullCycle+0x2fe>
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(Copy_u8Speed);
		}
	}
	if(Copy_u8Direction == CW)
	{
		for(u8 i = 0 ; i<2048 ; i++)
    2386:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	8d 8f       	std	Y+29, r24	; 0x1d
    238c:	49 cf       	rjmp	.-366    	; 0x2220 <STEPPER_ES_tFullCycle+0x1a0>
			State = 0x0F ;
		   _delay_ms(Copy_u8Speed);
		}

	}
	return LOC_ES_tErrorState ;
    238e:	88 a1       	ldd	r24, Y+32	; 0x20


}
    2390:	a2 96       	adiw	r28, 0x22	; 34
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <STEPPER_ES_tRotationAngle>:

/**/
ES_t STEPPER_ES_tRotationAngle(u8 Copy_u8Direction,u8 Copy_u8Speed,u8 Copy_u8Angle)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	a5 97       	sbiw	r28, 0x25	; 37
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	8b a3       	std	Y+35, r24	; 0x23
    23b8:	6c a3       	std	Y+36, r22	; 0x24
    23ba:	4d a3       	std	Y+37, r20	; 0x25
	ES_t LOC_ES_tErrorState = ES_NOK ;
    23bc:	1a a2       	std	Y+34, r1	; 0x22

	u8 State = 15 ;
    23be:	8f e0       	ldi	r24, 0x0F	; 15
    23c0:	89 a3       	std	Y+33, r24	; 0x21
	u16 Steps =  (Copy_u8Angle * 2048UL) / 360UL;
    23c2:	8d a1       	ldd	r24, Y+37	; 0x25
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	07 2e       	mov	r0, r23
    23ce:	7b e0       	ldi	r23, 0x0B	; 11
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	aa 1f       	adc	r26, r26
    23d6:	bb 1f       	adc	r27, r27
    23d8:	7a 95       	dec	r23
    23da:	d1 f7       	brne	.-12     	; 0x23d0 <STEPPER_ES_tRotationAngle+0x2e>
    23dc:	70 2d       	mov	r23, r0
    23de:	28 e6       	ldi	r18, 0x68	; 104
    23e0:	31 e0       	ldi	r19, 0x01	; 1
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__udivmodsi4>
    23ee:	da 01       	movw	r26, r20
    23f0:	c9 01       	movw	r24, r18
    23f2:	98 a3       	std	Y+32, r25	; 0x20
    23f4:	8f 8f       	std	Y+31, r24	; 0x1f
		if(Copy_u8Direction == CCW)
    23f6:	8b a1       	ldd	r24, Y+35	; 0x23
    23f8:	81 30       	cpi	r24, 0x01	; 1
    23fa:	09 f0       	breq	.+2      	; 0x23fe <STEPPER_ES_tRotationAngle+0x5c>
    23fc:	c1 c0       	rjmp	.+386    	; 0x2580 <STEPPER_ES_tRotationAngle+0x1de>
		{
			for(u8 i = 0 ; i<Steps ; i++)
    23fe:	1e 8e       	std	Y+30, r1	; 0x1e
    2400:	b6 c0       	rjmp	.+364    	; 0x256e <STEPPER_ES_tRotationAngle+0x1cc>
			{
				State &=~(1<<(i%4));
    2402:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 01       	movw	r18, r24
    240a:	23 70       	andi	r18, 0x03	; 3
    240c:	30 70       	andi	r19, 0x00	; 0
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <STEPPER_ES_tRotationAngle+0x76>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	2a 95       	dec	r18
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <STEPPER_ES_tRotationAngle+0x72>
    241c:	98 2f       	mov	r25, r24
    241e:	90 95       	com	r25
    2420:	89 a1       	ldd	r24, Y+33	; 0x21
    2422:	89 23       	and	r24, r25
    2424:	89 a3       	std	Y+33, r24	; 0x21
				DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    2426:	89 a1       	ldd	r24, Y+33	; 0x21
    2428:	98 2f       	mov	r25, r24
    242a:	91 70       	andi	r25, 0x01	; 1
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	61 e0       	ldi	r22, 0x01	; 1
    2430:	49 2f       	mov	r20, r25
    2432:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    2436:	89 a1       	ldd	r24, Y+33	; 0x21
    2438:	86 95       	lsr	r24
    243a:	86 95       	lsr	r24
    243c:	86 95       	lsr	r24
    243e:	98 2f       	mov	r25, r24
    2440:	91 70       	andi	r25, 0x01	; 1
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	63 e0       	ldi	r22, 0x03	; 3
    2446:	49 2f       	mov	r20, r25
    2448:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    244c:	89 a1       	ldd	r24, Y+33	; 0x21
    244e:	86 95       	lsr	r24
    2450:	86 95       	lsr	r24
    2452:	98 2f       	mov	r25, r24
    2454:	91 70       	andi	r25, 0x01	; 1
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	65 e0       	ldi	r22, 0x05	; 5
    245a:	49 2f       	mov	r20, r25
    245c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    2460:	89 a1       	ldd	r24, Y+33	; 0x21
    2462:	86 95       	lsr	r24
    2464:	98 2f       	mov	r25, r24
    2466:	91 70       	andi	r25, 0x01	; 1
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	67 e0       	ldi	r22, 0x07	; 7
    246c:	49 2f       	mov	r20, r25
    246e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				_delay_ms(Copy_u8Speed);
    2472:	8c a1       	ldd	r24, Y+36	; 0x24
    2474:	88 2f       	mov	r24, r24
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e0       	ldi	r26, 0x00	; 0
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	89 8f       	std	Y+25, r24	; 0x19
    248a:	9a 8f       	std	Y+26, r25	; 0x1a
    248c:	ab 8f       	std	Y+27, r26	; 0x1b
    248e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	69 8d       	ldd	r22, Y+25	; 0x19
    2492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a ef       	ldi	r20, 0xFA	; 250
    249e:	54 e4       	ldi	r21, 0x44	; 68
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8d 8b       	std	Y+21, r24	; 0x15
    24aa:	9e 8b       	std	Y+22, r25	; 0x16
    24ac:	af 8b       	std	Y+23, r26	; 0x17
    24ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b0:	6d 89       	ldd	r22, Y+21	; 0x15
    24b2:	7e 89       	ldd	r23, Y+22	; 0x16
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <STEPPER_ES_tRotationAngle+0x130>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <STEPPER_ES_tRotationAngle+0x1ae>
	else if (__tmp > 65535)
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <STEPPER_ES_tRotationAngle+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <STEPPER_ES_tRotationAngle+0x190>
    2514:	88 ec       	ldi	r24, 0xC8	; 200
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9a 8b       	std	Y+18, r25	; 0x12
    251a:	89 8b       	std	Y+17, r24	; 0x11
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <STEPPER_ES_tRotationAngle+0x17e>
    2524:	9a 8b       	std	Y+18, r25	; 0x12
    2526:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	9c 89       	ldd	r25, Y+20	; 0x14
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9c 8b       	std	Y+20, r25	; 0x14
    2530:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8b 89       	ldd	r24, Y+19	; 0x13
    2534:	9c 89       	ldd	r25, Y+20	; 0x14
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <STEPPER_ES_tRotationAngle+0x172>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <STEPPER_ES_tRotationAngle+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6d 89       	ldd	r22, Y+21	; 0x15
    253e:	7e 89       	ldd	r23, Y+22	; 0x16
    2540:	8f 89       	ldd	r24, Y+23	; 0x17
    2542:	98 8d       	ldd	r25, Y+24	; 0x18
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	98 8b       	std	Y+16, r25	; 0x10
    2556:	8f 87       	std	Y+15, r24	; 0x0f
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	98 89       	ldd	r25, Y+16	; 0x10
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <STEPPER_ES_tRotationAngle+0x1ba>
    2560:	98 8b       	std	Y+16, r25	; 0x10
    2562:	8f 87       	std	Y+15, r24	; 0x0f
				State = 0x0F ;
    2564:	8f e0       	ldi	r24, 0x0F	; 15
    2566:	89 a3       	std	Y+33, r24	; 0x21

	u8 State = 15 ;
	u16 Steps =  (Copy_u8Angle * 2048UL) / 360UL;
		if(Copy_u8Direction == CCW)
		{
			for(u8 i = 0 ; i<Steps ; i++)
    2568:	8e 8d       	ldd	r24, Y+30	; 0x1e
    256a:	8f 5f       	subi	r24, 0xFF	; 255
    256c:	8e 8f       	std	Y+30, r24	; 0x1e
    256e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2576:	98 a1       	ldd	r25, Y+32	; 0x20
    2578:	28 17       	cp	r18, r24
    257a:	39 07       	cpc	r19, r25
    257c:	08 f4       	brcc	.+2      	; 0x2580 <STEPPER_ES_tRotationAngle+0x1de>
    257e:	41 cf       	rjmp	.-382    	; 0x2402 <STEPPER_ES_tRotationAngle+0x60>
				DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
				_delay_ms(Copy_u8Speed);
				State = 0x0F ;
			}
		}
		if(Copy_u8Direction == CW)
    2580:	8b a1       	ldd	r24, Y+35	; 0x23
    2582:	88 23       	and	r24, r24
    2584:	09 f0       	breq	.+2      	; 0x2588 <STEPPER_ES_tRotationAngle+0x1e6>
    2586:	c1 c0       	rjmp	.+386    	; 0x270a <STEPPER_ES_tRotationAngle+0x368>
		{
			for(u8 i = 0 ; i<Steps ; i++)
    2588:	1d 8e       	std	Y+29, r1	; 0x1d
    258a:	b6 c0       	rjmp	.+364    	; 0x26f8 <STEPPER_ES_tRotationAngle+0x356>
			{
				State &=~(1<<(i%4));
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9c 01       	movw	r18, r24
    2594:	23 70       	andi	r18, 0x03	; 3
    2596:	30 70       	andi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <STEPPER_ES_tRotationAngle+0x200>
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	2a 95       	dec	r18
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <STEPPER_ES_tRotationAngle+0x1fc>
    25a6:	98 2f       	mov	r25, r24
    25a8:	90 95       	com	r25
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	89 23       	and	r24, r25
    25ae:	89 a3       	std	Y+33, r24	; 0x21
				DIO_ES_tSetPinValue(BLUE_GRP,BLUE_PIN,(((State>>0)&1)));
    25b0:	89 a1       	ldd	r24, Y+33	; 0x21
    25b2:	98 2f       	mov	r25, r24
    25b4:	91 70       	andi	r25, 0x01	; 1
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	61 e0       	ldi	r22, 0x01	; 1
    25ba:	49 2f       	mov	r20, r25
    25bc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(PINK_GRP,PINK_PIN,(((State>>1)&1)));
    25c0:	89 a1       	ldd	r24, Y+33	; 0x21
    25c2:	86 95       	lsr	r24
    25c4:	98 2f       	mov	r25, r24
    25c6:	91 70       	andi	r25, 0x01	; 1
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	67 e0       	ldi	r22, 0x07	; 7
    25cc:	49 2f       	mov	r20, r25
    25ce:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(YELLOW_GRP,YELLOW_PIN,(((State>>2)&1)));
    25d2:	89 a1       	ldd	r24, Y+33	; 0x21
    25d4:	86 95       	lsr	r24
    25d6:	86 95       	lsr	r24
    25d8:	98 2f       	mov	r25, r24
    25da:	91 70       	andi	r25, 0x01	; 1
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	65 e0       	ldi	r22, 0x05	; 5
    25e0:	49 2f       	mov	r20, r25
    25e2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
				DIO_ES_tSetPinValue(ORANGE_GRP,ORANGE_PIN,(((State>>3)&1)));
    25e6:	89 a1       	ldd	r24, Y+33	; 0x21
    25e8:	86 95       	lsr	r24
    25ea:	86 95       	lsr	r24
    25ec:	86 95       	lsr	r24
    25ee:	98 2f       	mov	r25, r24
    25f0:	91 70       	andi	r25, 0x01	; 1
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	63 e0       	ldi	r22, 0x03	; 3
    25f6:	49 2f       	mov	r20, r25
    25f8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			   _delay_ms(Copy_u8Speed);
    25fc:	8c a1       	ldd	r24, Y+36	; 0x24
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a0 e0       	ldi	r26, 0x00	; 0
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8b 87       	std	Y+11, r24	; 0x0b
    2614:	9c 87       	std	Y+12, r25	; 0x0c
    2616:	ad 87       	std	Y+13, r26	; 0x0d
    2618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8f 83       	std	Y+7, r24	; 0x07
    2634:	98 87       	std	Y+8, r25	; 0x08
    2636:	a9 87       	std	Y+9, r26	; 0x09
    2638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <STEPPER_ES_tRotationAngle+0x2ba>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	3f c0       	rjmp	.+126    	; 0x26da <STEPPER_ES_tRotationAngle+0x338>
	else if (__tmp > 65535)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <STEPPER_ES_tRotationAngle+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <STEPPER_ES_tRotationAngle+0x31a>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <STEPPER_ES_tRotationAngle+0x308>
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <STEPPER_ES_tRotationAngle+0x2fc>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <STEPPER_ES_tRotationAngle+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <STEPPER_ES_tRotationAngle+0x344>
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
				State = 0x0F ;
    26ee:	8f e0       	ldi	r24, 0x0F	; 15
    26f0:	89 a3       	std	Y+33, r24	; 0x21
				State = 0x0F ;
			}
		}
		if(Copy_u8Direction == CW)
		{
			for(u8 i = 0 ; i<Steps ; i++)
    26f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f4:	8f 5f       	subi	r24, 0xFF	; 255
    26f6:	8d 8f       	std	Y+29, r24	; 0x1d
    26f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2700:	98 a1       	ldd	r25, Y+32	; 0x20
    2702:	28 17       	cp	r18, r24
    2704:	39 07       	cpc	r19, r25
    2706:	08 f4       	brcc	.+2      	; 0x270a <STEPPER_ES_tRotationAngle+0x368>
    2708:	41 cf       	rjmp	.-382    	; 0x258c <STEPPER_ES_tRotationAngle+0x1ea>
			}

		}


	return LOC_ES_tErrorState ;
    270a:	8a a1       	ldd	r24, Y+34	; 0x22
}
    270c:	a5 96       	adiw	r28, 0x25	; 37
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <LED_ES_tInit>:


extern u8 G_u8LEDsNum ;
/*LED Driver Initialization*/
ES_t LED_ES_tInit(LED_t* Copy_PtoArrLED_tConfig)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	00 d0       	rcall	.+0      	; 0x2724 <LED_ES_tInit+0x6>
    2724:	00 d0       	rcall	.+0      	; 0x2726 <LED_ES_tInit+0x8>
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    272e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtoArrLED_tConfig != NULL)
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	09 f4       	brne	.+2      	; 0x273a <LED_ES_tInit+0x1c>
    2738:	5e c0       	rjmp	.+188    	; 0x27f6 <LED_ES_tInit+0xd8>
	{
		u8 LOC_u8Iter = 0;
    273a:	19 82       	std	Y+1, r1	; 0x01
    273c:	53 c0       	rjmp	.+166    	; 0x27e4 <LED_ES_tInit+0xc6>
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	c9 01       	movw	r24, r18
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	28 0f       	add	r18, r24
    274c:	39 1f       	adc	r19, r25
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	fc 01       	movw	r30, r24
    2754:	e2 0f       	add	r30, r18
    2756:	f3 1f       	adc	r31, r19
    2758:	40 81       	ld	r20, Z
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	c9 01       	movw	r24, r18
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	28 0f       	add	r18, r24
    2768:	39 1f       	adc	r19, r25
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	fc 01       	movw	r30, r24
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	84 2f       	mov	r24, r20
    2778:	69 2f       	mov	r22, r25
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	c9 01       	movw	r24, r18
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	28 0f       	add	r18, r24
    278e:	39 1f       	adc	r19, r25
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	fc 01       	movw	r30, r24
    2796:	e2 0f       	add	r30, r18
    2798:	f3 1f       	adc	r31, r19
    279a:	50 81       	ld	r21, Z
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	c9 01       	movw	r24, r18
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	28 0f       	add	r18, r24
    27aa:	39 1f       	adc	r19, r25
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	fc 01       	movw	r30, r24
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	41 81       	ldd	r20, Z+1	; 0x01
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	c9 01       	movw	r24, r18
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	28 0f       	add	r18, r24
    27c6:	39 1f       	adc	r19, r25
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	fc 01       	movw	r30, r24
    27ce:	e2 0f       	add	r30, r18
    27d0:	f3 1f       	adc	r31, r19
    27d2:	92 81       	ldd	r25, Z+2	; 0x02
    27d4:	85 2f       	mov	r24, r21
    27d6:	64 2f       	mov	r22, r20
    27d8:	49 2f       	mov	r20, r25
    27da:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtoArrLED_tConfig != NULL)
	{
		u8 LOC_u8Iter = 0;
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	90 91 8e 01 	lds	r25, 0x018E
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	89 17       	cp	r24, r25
    27ec:	08 f4       	brcc	.+2      	; 0x27f0 <LED_ES_tInit+0xd2>
    27ee:	a7 cf       	rjmp	.-178    	; 0x273e <LED_ES_tInit+0x20>
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
		}


		 LOC_ES_tErrorState = ES_OK ;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	8a 83       	std	Y+2, r24	; 0x02
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <LED_ES_tInit+0xdc>

	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	8a 83       	std	Y+2, r24	; 0x02
	}


	return LOC_ES_tErrorState ;
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02

}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <LED_ES_tSetState>:

/*Set LED State*/

ES_t LED_ES_tSetState(LED_t* Copy_PtoArrLED_tInfo,u8 Copy_u8State)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <LED_ES_tSetState+0x6>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <LED_ES_tSetState+0x8>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK ;
    281c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PtoArrLED_tInfo != NULL)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f0       	breq	.+26     	; 0x2840 <LED_ES_tSetState+0x36>
	{
		DIO_ES_tSetPinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN,Copy_u8State);
    2826:	ea 81       	ldd	r30, Y+2	; 0x02
    2828:	fb 81       	ldd	r31, Y+3	; 0x03
    282a:	80 81       	ld	r24, Z
    282c:	ea 81       	ldd	r30, Y+2	; 0x02
    282e:	fb 81       	ldd	r31, Y+3	; 0x03
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	69 2f       	mov	r22, r25
    2834:	4c 81       	ldd	r20, Y+4	; 0x04
    2836:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
		LOC_ES_tErrorState = ES_OK;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <LED_ES_tSetState+0x3a>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    2844:	89 81       	ldd	r24, Y+1	; 0x01

}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <LED_ES_tToggleState>:

/*Toggle LED State*/
ES_t LED_ES_tToggleState(LED_t* Copy_PtoArrLED_tInfo)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <LED_ES_tToggleState+0x6>
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	9b 83       	std	Y+3, r25	; 0x03
    2862:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2864:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_PtoArrLED_tInfo != NULL)
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	9b 81       	ldd	r25, Y+3	; 0x03
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	61 f0       	breq	.+24     	; 0x2886 <LED_ES_tToggleState+0x32>
		{
			DIO_ES_tTogglePinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN);
    286e:	ea 81       	ldd	r30, Y+2	; 0x02
    2870:	fb 81       	ldd	r31, Y+3	; 0x03
    2872:	80 81       	ld	r24, Z
    2874:	ea 81       	ldd	r30, Y+2	; 0x02
    2876:	fb 81       	ldd	r31, Y+3	; 0x03
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	69 2f       	mov	r22, r25
    287c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_ES_tTogglePinValue>
			LOC_ES_tErrorState = ES_OK;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	02 c0       	rjmp	.+4      	; 0x288a <LED_ES_tToggleState+0x36>
		}
		else
		{
			LOC_ES_tErrorState = ES_NULL_POINTER;
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	89 83       	std	Y+1, r24	; 0x01
		}

		return LOC_ES_tErrorState ;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <LCD_ES_tInit>:
#include<util/delay.h>


/*LCD Driver Initialization*/
ES_t  LCD_ES_tInit(void)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	6d 97       	sbiw	r28, 0x1d	; 29
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
	ES_t LOC_ES_tErrorState = ES_NOK ;
    28ac:	1d 8e       	std	Y+29, r1	; 0x1d

	DIO_ES_tSetPinDirection(RS_GRP, RS_PIN, PIN_OUTPUT );
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(RW_GRP, RW_PIN, PIN_OUTPUT );
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(EN_GRP, EN_PIN, PIN_OUTPUT );
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	62 e0       	ldi	r22, 0x02	; 2
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>

	DIO_ES_tSetPinDirection(D7_GRP, D7_PIN, PIN_OUTPUT );
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	67 e0       	ldi	r22, 0x07	; 7
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D6_GRP, D6_PIN, PIN_OUTPUT );
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	66 e0       	ldi	r22, 0x06	; 6
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D5_GRP, D5_PIN, PIN_OUTPUT );
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	65 e0       	ldi	r22, 0x05	; 5
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D4_GRP, D4_PIN, PIN_OUTPUT );
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	64 e0       	ldi	r22, 0x04	; 4
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
	LCD_ES_tWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	62 e0       	ldi	r22, 0x02	; 2
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	61 e0       	ldi	r22, 0x01	; 1
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, 0 );
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	67 e0       	ldi	r22, 0x07	; 7
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, 0 );
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	66 e0       	ldi	r22, 0x06	; 6
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, 1 );
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	65 e0       	ldi	r22, 0x05	; 5
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, 0 );
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	64 e0       	ldi	r22, 0x04	; 4
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	62 e0       	ldi	r22, 0x02	; 2
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a0 e8       	ldi	r26, 0x80	; 128
    294a:	bf e3       	ldi	r27, 0x3F	; 63
    294c:	89 8f       	std	Y+25, r24	; 0x19
    294e:	9a 8f       	std	Y+26, r25	; 0x1a
    2950:	ab 8f       	std	Y+27, r26	; 0x1b
    2952:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	69 8d       	ldd	r22, Y+25	; 0x19
    2956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    295a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8d 8b       	std	Y+21, r24	; 0x15
    296e:	9e 8b       	std	Y+22, r25	; 0x16
    2970:	af 8b       	std	Y+23, r26	; 0x17
    2972:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2974:	6d 89       	ldd	r22, Y+21	; 0x15
    2976:	7e 89       	ldd	r23, Y+22	; 0x16
    2978:	8f 89       	ldd	r24, Y+23	; 0x17
    297a:	98 8d       	ldd	r25, Y+24	; 0x18
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <LCD_ES_tInit+0xfe>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <LCD_ES_tInit+0x17c>
	else if (__tmp > 65535)
    2996:	6d 89       	ldd	r22, Y+21	; 0x15
    2998:	7e 89       	ldd	r23, Y+22	; 0x16
    299a:	8f 89       	ldd	r24, Y+23	; 0x17
    299c:	98 8d       	ldd	r25, Y+24	; 0x18
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <LCD_ES_tInit+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	69 8d       	ldd	r22, Y+25	; 0x19
    29b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9c 8b       	std	Y+20, r25	; 0x14
    29d4:	8b 8b       	std	Y+19, r24	; 0x13
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <LCD_ES_tInit+0x15e>
    29d8:	88 ec       	ldi	r24, 0xC8	; 200
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9a 8b       	std	Y+18, r25	; 0x12
    29de:	89 8b       	std	Y+17, r24	; 0x11
    29e0:	89 89       	ldd	r24, Y+17	; 0x11
    29e2:	9a 89       	ldd	r25, Y+18	; 0x12
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_ES_tInit+0x14c>
    29e8:	9a 8b       	std	Y+18, r25	; 0x12
    29ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8b 89       	ldd	r24, Y+19	; 0x13
    29ee:	9c 89       	ldd	r25, Y+20	; 0x14
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <LCD_ES_tInit+0x140>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <LCD_ES_tInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6d 89       	ldd	r22, Y+21	; 0x15
    2a02:	7e 89       	ldd	r23, Y+22	; 0x16
    2a04:	8f 89       	ldd	r24, Y+23	; 0x17
    2a06:	98 8d       	ldd	r25, Y+24	; 0x18
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9c 8b       	std	Y+20, r25	; 0x14
    2a12:	8b 8b       	std	Y+19, r24	; 0x13
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	98 8b       	std	Y+16, r25	; 0x10
    2a1a:	8f 87       	std	Y+15, r24	; 0x0f
    2a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1e:	98 89       	ldd	r25, Y+16	; 0x10
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_ES_tInit+0x188>
    2a24:	98 8b       	std	Y+16, r25	; 0x10
    2a26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 ef       	ldi	r26, 0xF0	; 240
    2a38:	b1 e4       	ldi	r27, 0x41	; 65
    2a3a:	8b 87       	std	Y+11, r24	; 0x0b
    2a3c:	9c 87       	std	Y+12, r25	; 0x0c
    2a3e:	ad 87       	std	Y+13, r26	; 0x0d
    2a40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	4a ef       	ldi	r20, 0xFA	; 250
    2a50:	54 e4       	ldi	r21, 0x44	; 68
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	8f 83       	std	Y+7, r24	; 0x07
    2a5c:	98 87       	std	Y+8, r25	; 0x08
    2a5e:	a9 87       	std	Y+9, r26	; 0x09
    2a60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e8       	ldi	r20, 0x80	; 128
    2a70:	5f e3       	ldi	r21, 0x3F	; 63
    2a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a76:	88 23       	and	r24, r24
    2a78:	2c f4       	brge	.+10     	; 0x2a84 <LCD_ES_tInit+0x1ec>
		__ticks = 1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	3f c0       	rjmp	.+126    	; 0x2b02 <LCD_ES_tInit+0x26a>
	else if (__tmp > 65535)
    2a84:	6f 81       	ldd	r22, Y+7	; 0x07
    2a86:	78 85       	ldd	r23, Y+8	; 0x08
    2a88:	89 85       	ldd	r24, Y+9	; 0x09
    2a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	3f ef       	ldi	r19, 0xFF	; 255
    2a90:	4f e7       	ldi	r20, 0x7F	; 127
    2a92:	57 e4       	ldi	r21, 0x47	; 71
    2a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a98:	18 16       	cp	r1, r24
    2a9a:	4c f5       	brge	.+82     	; 0x2aee <LCD_ES_tInit+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e2       	ldi	r20, 0x20	; 32
    2aaa:	51 e4       	ldi	r21, 0x41	; 65
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	9e 83       	std	Y+6, r25	; 0x06
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
    2ac4:	0f c0       	rjmp	.+30     	; 0x2ae4 <LCD_ES_tInit+0x24c>
    2ac6:	88 ec       	ldi	r24, 0xC8	; 200
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9c 83       	std	Y+4, r25	; 0x04
    2acc:	8b 83       	std	Y+3, r24	; 0x03
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <LCD_ES_tInit+0x23a>
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	69 f7       	brne	.-38     	; 0x2ac6 <LCD_ES_tInit+0x22e>
    2aec:	14 c0       	rjmp	.+40     	; 0x2b16 <LCD_ES_tInit+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aee:	6f 81       	ldd	r22, Y+7	; 0x07
    2af0:	78 85       	ldd	r23, Y+8	; 0x08
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	9e 83       	std	Y+6, r25	; 0x06
    2b00:	8d 83       	std	Y+5, r24	; 0x05
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_ES_tInit+0x276>
    2b12:	9a 83       	std	Y+2, r25	; 0x02
    2b14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	LCD_ES_tWriteNLatch(0x28);
    2b16:	88 e2       	ldi	r24, 0x28	; 40
    2b18:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
#else
#error "LCD mode configuration is wrong"
#endif

	//Display Control
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x0F);
    2b26:	8f e0       	ldi	r24, 0x0F	; 15
    2b28:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	//Display Clear
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	60 e0       	ldi	r22, 0x00	; 0
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x01);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
	//_delay_ms(2);

	//Entry Mode
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x06);
    2b46:	86 e0       	ldi	r24, 0x06	; 6
    2b48:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	return LOC_ES_tErrorState ;
    2b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    2b4e:	6d 96       	adiw	r28, 0x1d	; 29
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <LCD_ES_tWriteData>:
/**************************************************************************************************************************************/
/*LCD write Data*/
ES_t   LCD_ES_tWriteData(u8 Copy_u8Data)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <LCD_ES_tWriteData+0x6>
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2b6c:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Data);
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <LCD_ES_tWriteCommand>:
/****************************************************************************************************************************************/
/*LCD write command*/
ES_t   LCD_ES_tWriteCommand(u8 Copy_u8Command)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <LCD_ES_tWriteCommand+0x6>
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    2b9a:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Command);
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <LCD_ES_tWriteNLatch>:

/******************************************************************************************************************************************/
static ES_t LCD_ES_tWriteNLatch(u8 Copy_u8Byte)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	ea 97       	sbiw	r28, 0x3a	; 58
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	8a af       	std	Y+58, r24	; 0x3a
	ES_t LOC_ES_tErrorState = ES_NOK;
    2bd2:	19 ae       	std	Y+57, r1	; 0x39
	_delay_ms(30);


#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	62 e0       	ldi	r22, 0x02	; 2
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	61 e0       	ldi	r22, 0x01	; 1
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>7)&1) );
    2be8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bea:	98 2f       	mov	r25, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	99 27       	eor	r25, r25
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	67 e0       	ldi	r22, 0x07	; 7
    2bf6:	49 2f       	mov	r20, r25
    2bf8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>6)&1) );
    2bfc:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bfe:	82 95       	swap	r24
    2c00:	86 95       	lsr	r24
    2c02:	86 95       	lsr	r24
    2c04:	83 70       	andi	r24, 0x03	; 3
    2c06:	98 2f       	mov	r25, r24
    2c08:	91 70       	andi	r25, 0x01	; 1
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	66 e0       	ldi	r22, 0x06	; 6
    2c0e:	49 2f       	mov	r20, r25
    2c10:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>5)&1) );
    2c14:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c16:	82 95       	swap	r24
    2c18:	86 95       	lsr	r24
    2c1a:	87 70       	andi	r24, 0x07	; 7
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	91 70       	andi	r25, 0x01	; 1
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	65 e0       	ldi	r22, 0x05	; 5
    2c24:	49 2f       	mov	r20, r25
    2c26:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>4)&1) );
    2c2a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c2c:	82 95       	swap	r24
    2c2e:	8f 70       	andi	r24, 0x0F	; 15
    2c30:	98 2f       	mov	r25, r24
    2c32:	91 70       	andi	r25, 0x01	; 1
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	64 e0       	ldi	r22, 0x04	; 4
    2c38:	49 2f       	mov	r20, r25
    2c3a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	62 e0       	ldi	r22, 0x02	; 2
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a0 e8       	ldi	r26, 0x80	; 128
    2c4e:	bf e3       	ldi	r27, 0x3F	; 63
    2c50:	8d ab       	std	Y+53, r24	; 0x35
    2c52:	9e ab       	std	Y+54, r25	; 0x36
    2c54:	af ab       	std	Y+55, r26	; 0x37
    2c56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	6d a9       	ldd	r22, Y+53	; 0x35
    2c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a ef       	ldi	r20, 0xFA	; 250
    2c66:	54 e4       	ldi	r21, 0x44	; 68
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	89 ab       	std	Y+49, r24	; 0x31
    2c72:	9a ab       	std	Y+50, r25	; 0x32
    2c74:	ab ab       	std	Y+51, r26	; 0x33
    2c76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c78:	69 a9       	ldd	r22, Y+49	; 0x31
    2c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <LCD_ES_tWriteNLatch+0xde>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	98 ab       	std	Y+48, r25	; 0x30
    2c96:	8f a7       	std	Y+47, r24	; 0x2f
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <LCD_ES_tWriteNLatch+0x15c>
	else if (__tmp > 65535)
    2c9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <LCD_ES_tWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    2cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	98 ab       	std	Y+48, r25	; 0x30
    2cd8:	8f a7       	std	Y+47, r24	; 0x2f
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <LCD_ES_tWriteNLatch+0x13e>
    2cdc:	88 ec       	ldi	r24, 0xC8	; 200
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9e a7       	std	Y+46, r25	; 0x2e
    2ce2:	8d a7       	std	Y+45, r24	; 0x2d
    2ce4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ce6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <LCD_ES_tWriteNLatch+0x12c>
    2cec:	9e a7       	std	Y+46, r25	; 0x2e
    2cee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	98 ab       	std	Y+48, r25	; 0x30
    2cf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <LCD_ES_tWriteNLatch+0x120>
    2d02:	14 c0       	rjmp	.+40     	; 0x2d2c <LCD_ES_tWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	69 a9       	ldd	r22, Y+49	; 0x31
    2d06:	7a a9       	ldd	r23, Y+50	; 0x32
    2d08:	8b a9       	ldd	r24, Y+51	; 0x33
    2d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	98 ab       	std	Y+48, r25	; 0x30
    2d16:	8f a7       	std	Y+47, r24	; 0x2f
    2d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d1c:	9c a7       	std	Y+44, r25	; 0x2c
    2d1e:	8b a7       	std	Y+43, r24	; 0x2b
    2d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <LCD_ES_tWriteNLatch+0x168>
    2d28:	9c a7       	std	Y+44, r25	; 0x2c
    2d2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	62 e0       	ldi	r22, 0x02	; 2
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 ef       	ldi	r26, 0xF0	; 240
    2d3c:	b1 e4       	ldi	r27, 0x41	; 65
    2d3e:	8f a3       	std	Y+39, r24	; 0x27
    2d40:	98 a7       	std	Y+40, r25	; 0x28
    2d42:	a9 a7       	std	Y+41, r26	; 0x29
    2d44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	6f a1       	ldd	r22, Y+39	; 0x27
    2d48:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a ef       	ldi	r20, 0xFA	; 250
    2d54:	54 e4       	ldi	r21, 0x44	; 68
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8b a3       	std	Y+35, r24	; 0x23
    2d60:	9c a3       	std	Y+36, r25	; 0x24
    2d62:	ad a3       	std	Y+37, r26	; 0x25
    2d64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d66:	6b a1       	ldd	r22, Y+35	; 0x23
    2d68:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <LCD_ES_tWriteNLatch+0x1cc>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <LCD_ES_tWriteNLatch+0x24a>
	else if (__tmp > 65535)
    2d88:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <LCD_ES_tWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	6f a1       	ldd	r22, Y+39	; 0x27
    2da2:	78 a5       	ldd	r23, Y+40	; 0x28
    2da4:	89 a5       	ldd	r24, Y+41	; 0x29
    2da6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9a a3       	std	Y+34, r25	; 0x22
    2dc6:	89 a3       	std	Y+33, r24	; 0x21
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <LCD_ES_tWriteNLatch+0x22c>
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	98 a3       	std	Y+32, r25	; 0x20
    2dd0:	8f 8f       	std	Y+31, r24	; 0x1f
    2dd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd4:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_ES_tWriteNLatch+0x21a>
    2dda:	98 a3       	std	Y+32, r25	; 0x20
    2ddc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	89 a1       	ldd	r24, Y+33	; 0x21
    2de0:	9a a1       	ldd	r25, Y+34	; 0x22
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9a a3       	std	Y+34, r25	; 0x22
    2de6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dea:	9a a1       	ldd	r25, Y+34	; 0x22
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <LCD_ES_tWriteNLatch+0x20e>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <LCD_ES_tWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	6b a1       	ldd	r22, Y+35	; 0x23
    2df4:	7c a1       	ldd	r23, Y+36	; 0x24
    2df6:	8d a1       	ldd	r24, Y+37	; 0x25
    2df8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9a a3       	std	Y+34, r25	; 0x22
    2e04:	89 a3       	std	Y+33, r24	; 0x21
    2e06:	89 a1       	ldd	r24, Y+33	; 0x21
    2e08:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <LCD_ES_tWriteNLatch+0x256>
    2e16:	9e 8f       	std	Y+30, r25	; 0x1e
    2e18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>3)&1) );
    2e1a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e1c:	86 95       	lsr	r24
    2e1e:	86 95       	lsr	r24
    2e20:	86 95       	lsr	r24
    2e22:	98 2f       	mov	r25, r24
    2e24:	91 70       	andi	r25, 0x01	; 1
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	67 e0       	ldi	r22, 0x07	; 7
    2e2a:	49 2f       	mov	r20, r25
    2e2c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>2)&1) );
    2e30:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e32:	86 95       	lsr	r24
    2e34:	86 95       	lsr	r24
    2e36:	98 2f       	mov	r25, r24
    2e38:	91 70       	andi	r25, 0x01	; 1
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	66 e0       	ldi	r22, 0x06	; 6
    2e3e:	49 2f       	mov	r20, r25
    2e40:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>1)&1) );
    2e44:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e46:	86 95       	lsr	r24
    2e48:	98 2f       	mov	r25, r24
    2e4a:	91 70       	andi	r25, 0x01	; 1
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	65 e0       	ldi	r22, 0x05	; 5
    2e50:	49 2f       	mov	r20, r25
    2e52:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>0)&1) );
    2e56:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e58:	98 2f       	mov	r25, r24
    2e5a:	91 70       	andi	r25, 0x01	; 1
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	64 e0       	ldi	r22, 0x04	; 4
    2e60:	49 2f       	mov	r20, r25
    2e62:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	62 e0       	ldi	r22, 0x02	; 2
    2e6a:	41 e0       	ldi	r20, 0x01	; 1
    2e6c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	a0 e8       	ldi	r26, 0x80	; 128
    2e76:	bf e3       	ldi	r27, 0x3F	; 63
    2e78:	89 8f       	std	Y+25, r24	; 0x19
    2e7a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e7c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e80:	69 8d       	ldd	r22, Y+25	; 0x19
    2e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	4a ef       	ldi	r20, 0xFA	; 250
    2e8e:	54 e4       	ldi	r21, 0x44	; 68
    2e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	8d 8b       	std	Y+21, r24	; 0x15
    2e9a:	9e 8b       	std	Y+22, r25	; 0x16
    2e9c:	af 8b       	std	Y+23, r26	; 0x17
    2e9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e8       	ldi	r20, 0x80	; 128
    2eae:	5f e3       	ldi	r21, 0x3F	; 63
    2eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb4:	88 23       	and	r24, r24
    2eb6:	2c f4       	brge	.+10     	; 0x2ec2 <LCD_ES_tWriteNLatch+0x306>
		__ticks = 1;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
    2ec0:	3f c0       	rjmp	.+126    	; 0x2f40 <LCD_ES_tWriteNLatch+0x384>
	else if (__tmp > 65535)
    2ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	3f ef       	ldi	r19, 0xFF	; 255
    2ece:	4f e7       	ldi	r20, 0x7F	; 127
    2ed0:	57 e4       	ldi	r21, 0x47	; 71
    2ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed6:	18 16       	cp	r1, r24
    2ed8:	4c f5       	brge	.+82     	; 0x2f2c <LCD_ES_tWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eda:	69 8d       	ldd	r22, Y+25	; 0x19
    2edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e2       	ldi	r20, 0x20	; 32
    2ee8:	51 e4       	ldi	r21, 0x41	; 65
    2eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	bc 01       	movw	r22, r24
    2ef4:	cd 01       	movw	r24, r26
    2ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	9c 8b       	std	Y+20, r25	; 0x14
    2f00:	8b 8b       	std	Y+19, r24	; 0x13
    2f02:	0f c0       	rjmp	.+30     	; 0x2f22 <LCD_ES_tWriteNLatch+0x366>
    2f04:	88 ec       	ldi	r24, 0xC8	; 200
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	9a 8b       	std	Y+18, r25	; 0x12
    2f0a:	89 8b       	std	Y+17, r24	; 0x11
    2f0c:	89 89       	ldd	r24, Y+17	; 0x11
    2f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <LCD_ES_tWriteNLatch+0x354>
    2f14:	9a 8b       	std	Y+18, r25	; 0x12
    2f16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f18:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	9c 8b       	std	Y+20, r25	; 0x14
    2f20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f22:	8b 89       	ldd	r24, Y+19	; 0x13
    2f24:	9c 89       	ldd	r25, Y+20	; 0x14
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	69 f7       	brne	.-38     	; 0x2f04 <LCD_ES_tWriteNLatch+0x348>
    2f2a:	14 c0       	rjmp	.+40     	; 0x2f54 <LCD_ES_tWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f30:	8f 89       	ldd	r24, Y+23	; 0x17
    2f32:	98 8d       	ldd	r25, Y+24	; 0x18
    2f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	9c 8b       	std	Y+20, r25	; 0x14
    2f3e:	8b 8b       	std	Y+19, r24	; 0x13
    2f40:	8b 89       	ldd	r24, Y+19	; 0x13
    2f42:	9c 89       	ldd	r25, Y+20	; 0x14
    2f44:	98 8b       	std	Y+16, r25	; 0x10
    2f46:	8f 87       	std	Y+15, r24	; 0x0f
    2f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4a:	98 89       	ldd	r25, Y+16	; 0x10
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <LCD_ES_tWriteNLatch+0x390>
    2f50:	98 8b       	std	Y+16, r25	; 0x10
    2f52:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a0 ef       	ldi	r26, 0xF0	; 240
    2f64:	b1 e4       	ldi	r27, 0x41	; 65
    2f66:	8b 87       	std	Y+11, r24	; 0x0b
    2f68:	9c 87       	std	Y+12, r25	; 0x0c
    2f6a:	ad 87       	std	Y+13, r26	; 0x0d
    2f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	8f 83       	std	Y+7, r24	; 0x07
    2f88:	98 87       	std	Y+8, r25	; 0x08
    2f8a:	a9 87       	std	Y+9, r26	; 0x09
    2f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f90:	78 85       	ldd	r23, Y+8	; 0x08
    2f92:	89 85       	ldd	r24, Y+9	; 0x09
    2f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa2:	88 23       	and	r24, r24
    2fa4:	2c f4       	brge	.+10     	; 0x2fb0 <LCD_ES_tWriteNLatch+0x3f4>
		__ticks = 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	3f c0       	rjmp	.+126    	; 0x302e <LCD_ES_tWriteNLatch+0x472>
	else if (__tmp > 65535)
    2fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb2:	78 85       	ldd	r23, Y+8	; 0x08
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc4:	18 16       	cp	r1, r24
    2fc6:	4c f5       	brge	.+82     	; 0x301a <LCD_ES_tWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9e 83       	std	Y+6, r25	; 0x06
    2fee:	8d 83       	std	Y+5, r24	; 0x05
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <LCD_ES_tWriteNLatch+0x454>
    2ff2:	88 ec       	ldi	r24, 0xC8	; 200
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9c 83       	std	Y+4, r25	; 0x04
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <LCD_ES_tWriteNLatch+0x442>
    3002:	9c 83       	std	Y+4, r25	; 0x04
    3004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3010:	8d 81       	ldd	r24, Y+5	; 0x05
    3012:	9e 81       	ldd	r25, Y+6	; 0x06
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <LCD_ES_tWriteNLatch+0x436>
    3018:	14 c0       	rjmp	.+40     	; 0x3042 <LCD_ES_tWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301a:	6f 81       	ldd	r22, Y+7	; 0x07
    301c:	78 85       	ldd	r23, Y+8	; 0x08
    301e:	89 85       	ldd	r24, Y+9	; 0x09
    3020:	9a 85       	ldd	r25, Y+10	; 0x0a
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9e 83       	std	Y+6, r25	; 0x06
    302c:	8d 83       	std	Y+5, r24	; 0x05
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	9e 81       	ldd	r25, Y+6	; 0x06
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	9a 81       	ldd	r25, Y+2	; 0x02
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <LCD_ES_tWriteNLatch+0x47e>
    303e:	9a 83       	std	Y+2, r25	; 0x02
    3040:	89 83       	std	Y+1, r24	; 0x01

#else
#error "LCD mode configuration is wrong"
#endif

	return LOC_ES_tErrorState;
    3042:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3044:	ea 96       	adiw	r28, 0x3a	; 58
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <LCD_ES_tWriteString>:
/***********************************************************************************************************************/
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	00 d0       	rcall	.+0      	; 0x305c <LCD_ES_tWriteString+0x6>
    305c:	00 d0       	rcall	.+0      	; 0x305e <LCD_ES_tWriteString+0x8>
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	8b 83       	std	Y+3, r24	; 0x03

	ES_t LOC_ES_tErrorState = ES_NOK;
    3066:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8Iterator = 0 ;
    3068:	19 82       	std	Y+1, r1	; 0x01
    306a:	13 c0       	rjmp	.+38     	; 0x3092 <LCD_ES_tWriteString+0x3c>
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
	{
		//LCD_enuWriteData(Copy_u8Data[LOC_u8Iterator]);
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	9c 81       	ldd	r25, Y+4	; 0x04
    3080:	fc 01       	movw	r30, r24
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	80 81       	ld	r24, Z
    3088:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
		LOC_u8Iterator++;
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	8f 5f       	subi	r24, 0xFF	; 255
    3090:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{

	ES_t LOC_ES_tErrorState = ES_NOK;
	u8 LOC_u8Iterator = 0 ;
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	9c 81       	ldd	r25, Y+4	; 0x04
    309c:	fc 01       	movw	r30, r24
    309e:	e2 0f       	add	r30, r18
    30a0:	f3 1f       	adc	r31, r19
    30a2:	80 81       	ld	r24, Z
    30a4:	88 23       	and	r24, r24
    30a6:	11 f7       	brne	.-60     	; 0x306c <LCD_ES_tWriteString+0x16>
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}

	return LOC_ES_tErrorState;
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02

}
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <LCD_ES_tSendIntgerNum>:
/***********************************************************************************************************************/
ES_t LCD_ES_tSendIntgerNum(s32 Copy_s32Num)
{
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	62 97       	sbiw	r28, 0x12	; 18
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	6f 87       	std	Y+15, r22	; 0x0f
    30d2:	78 8b       	std	Y+16, r23	; 0x10
    30d4:	89 8b       	std	Y+17, r24	; 0x11
    30d6:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t LOC_ES_tErrorState = ES_NOK;
    30d8:	1c 82       	std	Y+4, r1	; 0x04

	s8 LOC_s8Sign = -1;
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_u8ArrIndex = 0;
    30de:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8ArrNmber[10];
	/*Check Sign*/
	if(Copy_s32Num < 0)
    30e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e2:	98 89       	ldd	r25, Y+16	; 0x10
    30e4:	a9 89       	ldd	r26, Y+17	; 0x11
    30e6:	ba 89       	ldd	r27, Y+18	; 0x12
    30e8:	bb 23       	and	r27, r27
    30ea:	0c f0       	brlt	.+2      	; 0x30ee <LCD_ES_tSendIntgerNum+0x36>
    30ec:	4b c0       	rjmp	.+150    	; 0x3184 <LCD_ES_tSendIntgerNum+0xcc>
	{
		/*display Sign*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	41 e0       	ldi	r20, 0x01	; 1
    30f4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch('-');
    30f8:	8d e2       	ldi	r24, 0x2D	; 45
    30fa:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
		/*make The number Positive*/
		Copy_s32Num *=LOC_s8Sign ;
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	28 2f       	mov	r18, r24
    3102:	33 27       	eor	r19, r19
    3104:	27 fd       	sbrc	r18, 7
    3106:	30 95       	com	r19
    3108:	43 2f       	mov	r20, r19
    310a:	53 2f       	mov	r21, r19
    310c:	8f 85       	ldd	r24, Y+15	; 0x0f
    310e:	98 89       	ldd	r25, Y+16	; 0x10
    3110:	a9 89       	ldd	r26, Y+17	; 0x11
    3112:	ba 89       	ldd	r27, Y+18	; 0x12
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__mulsi3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	8f 87       	std	Y+15, r24	; 0x0f
    3122:	98 8b       	std	Y+16, r25	; 0x10
    3124:	a9 8b       	std	Y+17, r26	; 0x11
    3126:	ba 8b       	std	Y+18, r27	; 0x12
    3128:	52 c0       	rjmp	.+164    	; 0x31ce <LCD_ES_tSendIntgerNum+0x116>
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	08 2f       	mov	r16, r24
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	8f 85       	ldd	r24, Y+15	; 0x0f
    3132:	98 89       	ldd	r25, Y+16	; 0x10
    3134:	a9 89       	ldd	r26, Y+17	; 0x11
    3136:	ba 89       	ldd	r27, Y+18	; 0x12
    3138:	2a e0       	ldi	r18, 0x0A	; 10
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e0       	ldi	r20, 0x00	; 0
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__divmodsi4>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	28 2f       	mov	r18, r24
    314e:	ce 01       	movw	r24, r28
    3150:	05 96       	adiw	r24, 0x05	; 5
    3152:	fc 01       	movw	r30, r24
    3154:	e0 0f       	add	r30, r16
    3156:	f1 1f       	adc	r31, r17
    3158:	20 83       	st	Z, r18
			Copy_s32Num/=10;
    315a:	8f 85       	ldd	r24, Y+15	; 0x0f
    315c:	98 89       	ldd	r25, Y+16	; 0x10
    315e:	a9 89       	ldd	r26, Y+17	; 0x11
    3160:	ba 89       	ldd	r27, Y+18	; 0x12
    3162:	2a e0       	ldi	r18, 0x0A	; 10
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__divmodsi4>
    3172:	da 01       	movw	r26, r20
    3174:	c9 01       	movw	r24, r18
    3176:	8f 87       	std	Y+15, r24	; 0x0f
    3178:	98 8b       	std	Y+16, r25	; 0x10
    317a:	a9 8b       	std	Y+17, r26	; 0x11
    317c:	ba 8b       	std	Y+18, r27	; 0x12
			LOC_u8ArrIndex++;
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	8f 5f       	subi	r24, 0xFF	; 255
    3182:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Num *=LOC_s8Sign ;
	}
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
    3184:	8f 85       	ldd	r24, Y+15	; 0x0f
    3186:	98 89       	ldd	r25, Y+16	; 0x10
    3188:	a9 89       	ldd	r26, Y+17	; 0x11
    318a:	ba 89       	ldd	r27, Y+18	; 0x12
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	a1 05       	cpc	r26, r1
    3190:	b1 05       	cpc	r27, r1
    3192:	59 f6       	brne	.-106    	; 0x312a <LCD_ES_tSendIntgerNum+0x72>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	81 50       	subi	r24, 0x01	; 1
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	16 c0       	rjmp	.+44     	; 0x31c8 <LCD_ES_tSendIntgerNum+0x110>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	28 2f       	mov	r18, r24
    31aa:	33 27       	eor	r19, r19
    31ac:	27 fd       	sbrc	r18, 7
    31ae:	30 95       	com	r19
    31b0:	ce 01       	movw	r24, r28
    31b2:	05 96       	adiw	r24, 0x05	; 5
    31b4:	fc 01       	movw	r30, r24
    31b6:	e2 0f       	add	r30, r18
    31b8:	f3 1f       	adc	r31, r19
    31ba:	80 81       	ld	r24, Z
    31bc:	80 5d       	subi	r24, 0xD0	; 208
    31be:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	81 50       	subi	r24, 0x01	; 1
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	88 23       	and	r24, r24
    31cc:	3c f7       	brge	.-50     	; 0x319c <LCD_ES_tSendIntgerNum+0xe4>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');

		}
	}

	return LOC_ES_tErrorState;
    31ce:	8c 81       	ldd	r24, Y+4	; 0x04
}
    31d0:	62 96       	adiw	r28, 0x12	; 18
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	08 95       	ret

000031e6 <LCD_ES_tCustomAlphChar>:

/************************************************************************************************************************/
/*LCD Create SpecialCharacter 8 Bits*/
ES_t  LCD_ES_tCustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <LCD_ES_tCustomAlphChar+0x6>
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <LCD_ES_tCustomAlphChar+0x8>
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	8b 83       	std	Y+3, r24	; 0x03
    31f6:	7d 83       	std	Y+5, r23	; 0x05
    31f8:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    31fa:	1a 82       	std	Y+2, r1	; 0x02
	/*you have only 8 patterns to be customized */

	if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	88 30       	cpi	r24, 0x08	; 8
    3200:	70 f5       	brcc	.+92     	; 0x325e <LCD_ES_tCustomAlphChar+0x78>
	{
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	08 96       	adiw	r24, 0x08	; 8
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	8a 83       	std	Y+2, r24	; 0x02
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    3228:	19 82       	std	Y+1, r1	; 0x01
    322a:	13 c0       	rjmp	.+38     	; 0x3252 <LCD_ES_tCustomAlphChar+0x6c>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8c 81       	ldd	r24, Y+4	; 0x04
    323e:	9d 81       	ldd	r25, Y+5	; 0x05
    3240:	fc 01       	movw	r30, r24
    3242:	e2 0f       	add	r30, r18
    3244:	f3 1f       	adc	r31, r19
    3246:	80 81       	ld	r24, Z
    3248:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
		LOC_ES_tErrorState = ES_OK ;
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	89 83       	std	Y+1, r24	; 0x01
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	88 30       	cpi	r24, 0x08	; 8
    3256:	50 f3       	brcs	.-44     	; 0x322c <LCD_ES_tCustomAlphChar+0x46>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
		}
		LOC_ES_tErrorState = ES_OK;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	8a 83       	std	Y+2, r24	; 0x02
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <LCD_ES_tCustomAlphChar+0x7c>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    325e:	82 e0       	ldi	r24, 0x02	; 2
    3260:	8a 83       	std	Y+2, r24	; 0x02
	}
	return LOC_ES_tErrorState;
    3262:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <LCD_ES_tGoToPosition>:
/********************************************************************************************************************************************************/

/*LCD Go To Position*/

ES_t   LCD_ES_tGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	00 d0       	rcall	.+0      	; 0x327a <LCD_ES_tGoToPosition+0x6>
    327a:	00 d0       	rcall	.+0      	; 0x327c <LCD_ES_tGoToPosition+0x8>
    327c:	0f 92       	push	r0
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	8c 83       	std	Y+4, r24	; 0x04
    3284:	6d 83       	std	Y+5, r22	; 0x05
	ES_t LOC_ES_tErrorState = ES_NOK;
    3286:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8ArrRow[2] = {0x80,0xC0};
    3288:	80 e8       	ldi	r24, 0x80	; 128
    328a:	8a 83       	std	Y+2, r24	; 0x02
    328c:	80 ec       	ldi	r24, 0xC0	; 192
    328e:	8b 83       	std	Y+3, r24	; 0x03
	if( (1<=Copy_u8Row && Copy_u8Row<=2 ) &&
    3290:	8c 81       	ldd	r24, Y+4	; 0x04
    3292:	88 23       	and	r24, r24
    3294:	11 f1       	breq	.+68     	; 0x32da <LCD_ES_tGoToPosition+0x66>
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	83 30       	cpi	r24, 0x03	; 3
    329a:	f8 f4       	brcc	.+62     	; 0x32da <LCD_ES_tGoToPosition+0x66>
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	88 23       	and	r24, r24
    32a0:	e1 f0       	breq	.+56     	; 0x32da <LCD_ES_tGoToPosition+0x66>
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	81 31       	cpi	r24, 0x11	; 17
    32a6:	c8 f4       	brcc	.+50     	; 0x32da <LCD_ES_tGoToPosition+0x66>
			(1<=Copy_u8Col && Copy_u8Col<=16))
	{
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	60 e0       	ldi	r22, 0x00	; 0
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(LOC_u8ArrRow[Copy_u8Row-1]+ Copy_u8Col-1);
    32b2:	8c 81       	ldd	r24, Y+4	; 0x04
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	9c 01       	movw	r18, r24
    32ba:	21 50       	subi	r18, 0x01	; 1
    32bc:	30 40       	sbci	r19, 0x00	; 0
    32be:	ce 01       	movw	r24, r28
    32c0:	02 96       	adiw	r24, 0x02	; 2
    32c2:	fc 01       	movw	r30, r24
    32c4:	e2 0f       	add	r30, r18
    32c6:	f3 1f       	adc	r31, r19
    32c8:	90 81       	ld	r25, Z
    32ca:	8d 81       	ldd	r24, Y+5	; 0x05
    32cc:	89 0f       	add	r24, r25
    32ce:	81 50       	subi	r24, 0x01	; 1
    32d0:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	89 83       	std	Y+1, r24	; 0x01
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <LCD_ES_tGoToPosition+0x6a>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState;
    32de:	89 81       	ldd	r24, Y+1	; 0x01
}
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <KPAD_ES_tInit>:
#include<util/delay.h>


/*KeyPad Initialization*/
ES_t KPAD_ES_tInit(void)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState =ES_NOK ;
    32fa:	19 82       	std	Y+1, r1	; 0x01
	/*Set Row Input Direction */
	DIO_ES_tSetPinDirection(R1_GRP,R1_PIN,PIN_INPUT);
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	64 e0       	ldi	r22, 0x04	; 4
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R2_GRP,R2_PIN,PIN_INPUT);
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	65 e0       	ldi	r22, 0x05	; 5
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R3_GRP,R3_PIN,PIN_INPUT);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	66 e0       	ldi	r22, 0x06	; 6
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(R4_GRP,R4_PIN,PIN_INPUT);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	67 e0       	ldi	r22, 0x07	; 7
    331e:	40 e0       	ldi	r20, 0x00	; 0
    3320:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	/*Active internal Pull up in Row*/
	DIO_ES_tSetPinValue(R1_GRP,R1_PIN,DIO_PULLUP);
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	64 e0       	ldi	r22, 0x04	; 4
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R2_GRP,R2_PIN,DIO_PULLUP);
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	65 e0       	ldi	r22, 0x05	; 5
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R3_GRP,R3_PIN,DIO_PULLUP);
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	66 e0       	ldi	r22, 0x06	; 6
    333c:	41 e0       	ldi	r20, 0x01	; 1
    333e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(R4_GRP,R4_PIN,DIO_PULLUP);
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	67 e0       	ldi	r22, 0x07	; 7
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>

	/*Set COL Output Direction */
	DIO_ES_tSetPinDirection(C1_GRP,C1_PIN,PIN_OUTPUT);
    334c:	83 e0       	ldi	r24, 0x03	; 3
    334e:	62 e0       	ldi	r22, 0x02	; 2
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C2_GRP,C2_PIN,PIN_OUTPUT);
    3356:	83 e0       	ldi	r24, 0x03	; 3
    3358:	63 e0       	ldi	r22, 0x03	; 3
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C3_GRP,C3_PIN,PIN_OUTPUT);
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	64 e0       	ldi	r22, 0x04	; 4
    3364:	41 e0       	ldi	r20, 0x01	; 1
    3366:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(C4_GRP,C4_PIN,PIN_OUTPUT);
    336a:	83 e0       	ldi	r24, 0x03	; 3
    336c:	65 e0       	ldi	r22, 0x05	; 5
    336e:	41 e0       	ldi	r20, 0x01	; 1
    3370:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>

	/*Cols Initial Vales High*/
	DIO_ES_tSetPinValue(C1_GRP,C1_PIN,PIN_HIGH);
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	62 e0       	ldi	r22, 0x02	; 2
    3378:	41 e0       	ldi	r20, 0x01	; 1
    337a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C2_GRP,C2_PIN,PIN_HIGH);
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	63 e0       	ldi	r22, 0x03	; 3
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C3_GRP,C3_PIN,PIN_HIGH);
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	64 e0       	ldi	r22, 0x04	; 4
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(C4_GRP,C4_PIN,PIN_HIGH);
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	65 e0       	ldi	r22, 0x05	; 5
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
	 LOC_ES_tErrorState =ES_OK ;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState;
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	08 95       	ret

000033aa <KPAD_ES_tGetPressedKey>:


/*Get Pressed Key*/
ES_t KPAD_ES_tGetPressedKey(u8* Copy_u8PressedKey)
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	e9 97       	sbiw	r28, 0x39	; 57
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	9c ab       	std	Y+52, r25	; 0x34
    33c0:	8b ab       	std	Y+51, r24	; 0x33

	ES_t LOC_ES_tErrorState =ES_NOK ;
    33c2:	19 8a       	std	Y+17, r1	; 0x11
	    u8 Local_u8RowIter =0;
    33c4:	18 8a       	std	Y+16, r1	; 0x10
		u8 Local_u8ColIter =0;
    33c6:	1f 86       	std	Y+15, r1	; 0x0f
		u8 Local_u8Value=0xff;
    33c8:	8f ef       	ldi	r24, 0xFF	; 255
    33ca:	8a 8b       	std	Y+18, r24	; 0x12

		u8 Local_u8ColGrp[COL_NUM]={C1_GRP,C2_GRP,C3_GRP,C4_GRP};
    33cc:	83 e0       	ldi	r24, 0x03	; 3
    33ce:	8b 8b       	std	Y+19, r24	; 0x13
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	8c 8b       	std	Y+20, r24	; 0x14
    33d4:	83 e0       	ldi	r24, 0x03	; 3
    33d6:	8d 8b       	std	Y+21, r24	; 0x15
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	8e 8b       	std	Y+22, r24	; 0x16
		u8 Local_u8ColPin[COL_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    33dc:	82 e0       	ldi	r24, 0x02	; 2
    33de:	8f 8b       	std	Y+23, r24	; 0x17
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	88 8f       	std	Y+24, r24	; 0x18
    33e4:	84 e0       	ldi	r24, 0x04	; 4
    33e6:	89 8f       	std	Y+25, r24	; 0x19
    33e8:	85 e0       	ldi	r24, 0x05	; 5
    33ea:	8a 8f       	std	Y+26, r24	; 0x1a

		u8 Local_u8RowGrp[ROW_NUM]={R1_GRP,R2_GRP,R3_GRP,R4_GRP};
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	8b 8f       	std	Y+27, r24	; 0x1b
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	8c 8f       	std	Y+28, r24	; 0x1c
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	8d 8f       	std	Y+29, r24	; 0x1d
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 Local_u8RowPin[ROW_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    33fc:	84 e0       	ldi	r24, 0x04	; 4
    33fe:	8f 8f       	std	Y+31, r24	; 0x1f
    3400:	85 e0       	ldi	r24, 0x05	; 5
    3402:	88 a3       	std	Y+32, r24	; 0x20
    3404:	86 e0       	ldi	r24, 0x06	; 6
    3406:	89 a3       	std	Y+33, r24	; 0x21
    3408:	87 e0       	ldi	r24, 0x07	; 7
    340a:	8a a3       	std	Y+34, r24	; 0x22

           /*Dummy value*/
		*Copy_u8PressedKey = KEYPAD_NOT_PRESSED;
    340c:	eb a9       	ldd	r30, Y+51	; 0x33
    340e:	fc a9       	ldd	r31, Y+52	; 0x34
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	80 83       	st	Z, r24
    3414:	3e c1       	rjmp	.+636    	; 0x3692 <KPAD_ES_tGetPressedKey+0x2e8>

		for(; Local_u8ColIter < COL_NUM; Local_u8ColIter++)
		{
			/*Active Column [i]*/
			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
    3416:	8f 85       	ldd	r24, Y+15	; 0x0f
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	ce 01       	movw	r24, r28
    341e:	43 96       	adiw	r24, 0x13	; 19
    3420:	fc 01       	movw	r30, r24
    3422:	e2 0f       	add	r30, r18
    3424:	f3 1f       	adc	r31, r19
    3426:	40 81       	ld	r20, Z
    3428:	8f 85       	ldd	r24, Y+15	; 0x0f
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	ce 01       	movw	r24, r28
    3430:	47 96       	adiw	r24, 0x17	; 23
    3432:	fc 01       	movw	r30, r24
    3434:	e2 0f       	add	r30, r18
    3436:	f3 1f       	adc	r31, r19
    3438:	90 81       	ld	r25, Z
    343a:	84 2f       	mov	r24, r20
    343c:	69 2f       	mov	r22, r25
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
					Local_u8ColPin[Local_u8ColIter], PIN_LOW);

			for (Local_u8RowIter=0;Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    3444:	18 8a       	std	Y+16, r1	; 0x10
    3446:	07 c1       	rjmp	.+526    	; 0x3656 <KPAD_ES_tGetPressedKey+0x2ac>
			{
				DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    3448:	88 89       	ldd	r24, Y+16	; 0x10
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	ce 01       	movw	r24, r28
    3450:	4b 96       	adiw	r24, 0x1b	; 27
    3452:	fc 01       	movw	r30, r24
    3454:	e2 0f       	add	r30, r18
    3456:	f3 1f       	adc	r31, r19
    3458:	40 81       	ld	r20, Z
    345a:	88 89       	ldd	r24, Y+16	; 0x10
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	ce 01       	movw	r24, r28
    3462:	4f 96       	adiw	r24, 0x1f	; 31
    3464:	fc 01       	movw	r30, r24
    3466:	e2 0f       	add	r30, r18
    3468:	f3 1f       	adc	r31, r19
    346a:	90 81       	ld	r25, Z
    346c:	9e 01       	movw	r18, r28
    346e:	2e 5e       	subi	r18, 0xEE	; 238
    3470:	3f 4f       	sbci	r19, 0xFF	; 255
    3472:	84 2f       	mov	r24, r20
    3474:	69 2f       	mov	r22, r25
    3476:	a9 01       	movw	r20, r18
    3478:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_ES_tGetPinValue>
						Local_u8RowPin[Local_u8RowIter], &Local_u8Value);

				if ( ! Local_u8Value)
    347c:	8a 89       	ldd	r24, Y+18	; 0x12
    347e:	88 23       	and	r24, r24
    3480:	09 f0       	breq	.+2      	; 0x3484 <KPAD_ES_tGetPressedKey+0xda>
    3482:	e6 c0       	rjmp	.+460    	; 0x3650 <KPAD_ES_tGetPressedKey+0x2a6>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a0 e2       	ldi	r26, 0x20	; 32
    348a:	b1 e4       	ldi	r27, 0x41	; 65
    348c:	8b 87       	std	Y+11, r24	; 0x0b
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	ad 87       	std	Y+13, r26	; 0x0d
    3492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	6b 85       	ldd	r22, Y+11	; 0x0b
    3496:	7c 85       	ldd	r23, Y+12	; 0x0c
    3498:	8d 85       	ldd	r24, Y+13	; 0x0d
    349a:	9e 85       	ldd	r25, Y+14	; 0x0e
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a ef       	ldi	r20, 0xFA	; 250
    34a2:	54 e4       	ldi	r21, 0x44	; 68
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8f 83       	std	Y+7, r24	; 0x07
    34ae:	98 87       	std	Y+8, r25	; 0x08
    34b0:	a9 87       	std	Y+9, r26	; 0x09
    34b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <KPAD_ES_tGetPressedKey+0x12c>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <KPAD_ES_tGetPressedKey+0x1aa>
	else if (__tmp > 65535)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <KPAD_ES_tGetPressedKey+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9e 83       	std	Y+6, r25	; 0x06
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <KPAD_ES_tGetPressedKey+0x18c>
    3518:	88 ec       	ldi	r24, 0xC8	; 200
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	8b 83       	std	Y+3, r24	; 0x03
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <KPAD_ES_tGetPressedKey+0x17a>
    3528:	9c 83       	std	Y+4, r25	; 0x04
    352a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <KPAD_ES_tGetPressedKey+0x16e>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <KPAD_ES_tGetPressedKey+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <KPAD_ES_tGetPressedKey+0x1b6>
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);// to avoid bouncing
					DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    3568:	88 89       	ldd	r24, Y+16	; 0x10
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	ce 01       	movw	r24, r28
    3570:	4b 96       	adiw	r24, 0x1b	; 27
    3572:	fc 01       	movw	r30, r24
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	40 81       	ld	r20, Z
    357a:	88 89       	ldd	r24, Y+16	; 0x10
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	ce 01       	movw	r24, r28
    3582:	4f 96       	adiw	r24, 0x1f	; 31
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	90 81       	ld	r25, Z
    358c:	9e 01       	movw	r18, r28
    358e:	2e 5e       	subi	r18, 0xEE	; 238
    3590:	3f 4f       	sbci	r19, 0xFF	; 255
    3592:	84 2f       	mov	r24, r20
    3594:	69 2f       	mov	r22, r25
    3596:	a9 01       	movw	r20, r18
    3598:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_ES_tGetPinValue>
										Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
					if ( ! Local_u8Value)
    359c:	8a 89       	ldd	r24, Y+18	; 0x12
    359e:	88 23       	and	r24, r24
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <KPAD_ES_tGetPressedKey+0x1fa>
    35a2:	56 c0       	rjmp	.+172    	; 0x3650 <KPAD_ES_tGetPressedKey+0x2a6>
    35a4:	1a c0       	rjmp	.+52     	; 0x35da <KPAD_ES_tGetPressedKey+0x230>
					{
						//prevent holding press
						while ( ! Local_u8Value)
							DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
    35a6:	88 89       	ldd	r24, Y+16	; 0x10
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	ce 01       	movw	r24, r28
    35ae:	4b 96       	adiw	r24, 0x1b	; 27
    35b0:	fc 01       	movw	r30, r24
    35b2:	e2 0f       	add	r30, r18
    35b4:	f3 1f       	adc	r31, r19
    35b6:	40 81       	ld	r20, Z
    35b8:	88 89       	ldd	r24, Y+16	; 0x10
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	ce 01       	movw	r24, r28
    35c0:	4f 96       	adiw	r24, 0x1f	; 31
    35c2:	fc 01       	movw	r30, r24
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	90 81       	ld	r25, Z
    35ca:	9e 01       	movw	r18, r28
    35cc:	2e 5e       	subi	r18, 0xEE	; 238
    35ce:	3f 4f       	sbci	r19, 0xFF	; 255
    35d0:	84 2f       	mov	r24, r20
    35d2:	69 2f       	mov	r22, r25
    35d4:	a9 01       	movw	r20, r18
    35d6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_ES_tGetPinValue>
					DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
										Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
					if ( ! Local_u8Value)
					{
						//prevent holding press
						while ( ! Local_u8Value)
    35da:	8a 89       	ldd	r24, Y+18	; 0x12
    35dc:	88 23       	and	r24, r24
    35de:	19 f3       	breq	.-58     	; 0x35a6 <KPAD_ES_tGetPressedKey+0x1fc>
							DIO_ES_tGetPinValue(Local_u8RowGrp[Local_u8RowIter],
									Local_u8RowPin[Local_u8RowIter], &Local_u8Value);
						//return switch value
						u8 Local_Au8KeyValues[ROW_NUM][COL_NUM]=KEY_VALUES;
    35e0:	ce 01       	movw	r24, r28
    35e2:	83 96       	adiw	r24, 0x23	; 35
    35e4:	9e ab       	std	Y+54, r25	; 0x36
    35e6:	8d ab       	std	Y+53, r24	; 0x35
    35e8:	e7 ea       	ldi	r30, 0xA7	; 167
    35ea:	f1 e0       	ldi	r31, 0x01	; 1
    35ec:	f8 af       	std	Y+56, r31	; 0x38
    35ee:	ef ab       	std	Y+55, r30	; 0x37
    35f0:	f0 e1       	ldi	r31, 0x10	; 16
    35f2:	f9 af       	std	Y+57, r31	; 0x39
    35f4:	ef a9       	ldd	r30, Y+55	; 0x37
    35f6:	f8 ad       	ldd	r31, Y+56	; 0x38
    35f8:	00 80       	ld	r0, Z
    35fa:	8f a9       	ldd	r24, Y+55	; 0x37
    35fc:	98 ad       	ldd	r25, Y+56	; 0x38
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	98 af       	std	Y+56, r25	; 0x38
    3602:	8f ab       	std	Y+55, r24	; 0x37
    3604:	ed a9       	ldd	r30, Y+53	; 0x35
    3606:	fe a9       	ldd	r31, Y+54	; 0x36
    3608:	00 82       	st	Z, r0
    360a:	8d a9       	ldd	r24, Y+53	; 0x35
    360c:	9e a9       	ldd	r25, Y+54	; 0x36
    360e:	01 96       	adiw	r24, 0x01	; 1
    3610:	9e ab       	std	Y+54, r25	; 0x36
    3612:	8d ab       	std	Y+53, r24	; 0x35
    3614:	99 ad       	ldd	r25, Y+57	; 0x39
    3616:	91 50       	subi	r25, 0x01	; 1
    3618:	99 af       	std	Y+57, r25	; 0x39
    361a:	e9 ad       	ldd	r30, Y+57	; 0x39
    361c:	ee 23       	and	r30, r30
    361e:	51 f7       	brne	.-44     	; 0x35f4 <KPAD_ES_tGetPressedKey+0x24a>
						*Copy_u8PressedKey=Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    3620:	88 89       	ldd	r24, Y+16	; 0x10
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	8f 85       	ldd	r24, Y+15	; 0x0f
    3628:	48 2f       	mov	r20, r24
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	22 0f       	add	r18, r18
    362e:	33 1f       	adc	r19, r19
    3630:	22 0f       	add	r18, r18
    3632:	33 1f       	adc	r19, r19
    3634:	ce 01       	movw	r24, r28
    3636:	01 96       	adiw	r24, 0x01	; 1
    3638:	82 0f       	add	r24, r18
    363a:	93 1f       	adc	r25, r19
    363c:	84 0f       	add	r24, r20
    363e:	95 1f       	adc	r25, r21
    3640:	fc 01       	movw	r30, r24
    3642:	b2 96       	adiw	r30, 0x22	; 34
    3644:	80 81       	ld	r24, Z
    3646:	eb a9       	ldd	r30, Y+51	; 0x33
    3648:	fc a9       	ldd	r31, Y+52	; 0x34
    364a:	80 83       	st	Z, r24
						 LOC_ES_tErrorState =ES_OK ;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	89 8b       	std	Y+17, r24	; 0x11
		{
			/*Active Column [i]*/
			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
					Local_u8ColPin[Local_u8ColIter], PIN_LOW);

			for (Local_u8RowIter=0;Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    3650:	88 89       	ldd	r24, Y+16	; 0x10
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	88 8b       	std	Y+16, r24	; 0x10
    3656:	88 89       	ldd	r24, Y+16	; 0x10
    3658:	84 30       	cpi	r24, 0x04	; 4
    365a:	08 f4       	brcc	.+2      	; 0x365e <KPAD_ES_tGetPressedKey+0x2b4>
    365c:	f5 ce       	rjmp	.-534    	; 0x3448 <KPAD_ES_tGetPressedKey+0x9e>
						 LOC_ES_tErrorState =ES_OK ;
					}
				}
			}

			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
    365e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3660:	28 2f       	mov	r18, r24
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	ce 01       	movw	r24, r28
    3666:	43 96       	adiw	r24, 0x13	; 19
    3668:	fc 01       	movw	r30, r24
    366a:	e2 0f       	add	r30, r18
    366c:	f3 1f       	adc	r31, r19
    366e:	40 81       	ld	r20, Z
    3670:	8f 85       	ldd	r24, Y+15	; 0x0f
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	ce 01       	movw	r24, r28
    3678:	47 96       	adiw	r24, 0x17	; 23
    367a:	fc 01       	movw	r30, r24
    367c:	e2 0f       	add	r30, r18
    367e:	f3 1f       	adc	r31, r19
    3680:	90 81       	ld	r25, Z
    3682:	84 2f       	mov	r24, r20
    3684:	69 2f       	mov	r22, r25
    3686:	41 e0       	ldi	r20, 0x01	; 1
    3688:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
		u8 Local_u8RowPin[ROW_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};

           /*Dummy value*/
		*Copy_u8PressedKey = KEYPAD_NOT_PRESSED;

		for(; Local_u8ColIter < COL_NUM; Local_u8ColIter++)
    368c:	8f 85       	ldd	r24, Y+15	; 0x0f
    368e:	8f 5f       	subi	r24, 0xFF	; 255
    3690:	8f 87       	std	Y+15, r24	; 0x0f
    3692:	8f 85       	ldd	r24, Y+15	; 0x0f
    3694:	84 30       	cpi	r24, 0x04	; 4
    3696:	08 f4       	brcc	.+2      	; 0x369a <KPAD_ES_tGetPressedKey+0x2f0>
    3698:	be ce       	rjmp	.-644    	; 0x3416 <KPAD_ES_tGetPressedKey+0x6c>
			}

			DIO_ES_tSetPinValue(Local_u8ColGrp[Local_u8ColIter],
					Local_u8ColPin[Local_u8ColIter], PIN_HIGH);
		}
	return LOC_ES_tErrorState;
    369a:	89 89       	ldd	r24, Y+17	; 0x11

}
    369c:	e9 96       	adiw	r28, 0x39	; 57
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <main>:
	u16 Read_ADC ;
}ISR_t ;

u8 flag = 0 ;
int main(void)
{
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
    36b6:	6e 97       	sbiw	r28, 0x1e	; 30
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61

	ISR_t up_count = {0, 0};
    36c2:	ce 01       	movw	r24, r28
    36c4:	0f 96       	adiw	r24, 0x0f	; 15
    36c6:	9e 8b       	std	Y+22, r25	; 0x16
    36c8:	8d 8b       	std	Y+21, r24	; 0x15
    36ca:	ea eb       	ldi	r30, 0xBA	; 186
    36cc:	f1 e0       	ldi	r31, 0x01	; 1
    36ce:	f8 8f       	std	Y+24, r31	; 0x18
    36d0:	ef 8b       	std	Y+23, r30	; 0x17
    36d2:	f3 e0       	ldi	r31, 0x03	; 3
    36d4:	f9 8f       	std	Y+25, r31	; 0x19
    36d6:	ef 89       	ldd	r30, Y+23	; 0x17
    36d8:	f8 8d       	ldd	r31, Y+24	; 0x18
    36da:	00 80       	ld	r0, Z
    36dc:	8f 89       	ldd	r24, Y+23	; 0x17
    36de:	98 8d       	ldd	r25, Y+24	; 0x18
    36e0:	01 96       	adiw	r24, 0x01	; 1
    36e2:	98 8f       	std	Y+24, r25	; 0x18
    36e4:	8f 8b       	std	Y+23, r24	; 0x17
    36e6:	ed 89       	ldd	r30, Y+21	; 0x15
    36e8:	fe 89       	ldd	r31, Y+22	; 0x16
    36ea:	00 82       	st	Z, r0
    36ec:	8d 89       	ldd	r24, Y+21	; 0x15
    36ee:	9e 89       	ldd	r25, Y+22	; 0x16
    36f0:	01 96       	adiw	r24, 0x01	; 1
    36f2:	9e 8b       	std	Y+22, r25	; 0x16
    36f4:	8d 8b       	std	Y+21, r24	; 0x15
    36f6:	99 8d       	ldd	r25, Y+25	; 0x19
    36f8:	91 50       	subi	r25, 0x01	; 1
    36fa:	99 8f       	std	Y+25, r25	; 0x19
    36fc:	e9 8d       	ldd	r30, Y+25	; 0x19
    36fe:	ee 23       	and	r30, r30
    3700:	51 f7       	brne	.-44     	; 0x36d6 <main+0x28>
	ISR_t ADC_Par =  {0, 0};
    3702:	ce 01       	movw	r24, r28
    3704:	42 96       	adiw	r24, 0x12	; 18
    3706:	9b 8f       	std	Y+27, r25	; 0x1b
    3708:	8a 8f       	std	Y+26, r24	; 0x1a
    370a:	e7 eb       	ldi	r30, 0xB7	; 183
    370c:	f1 e0       	ldi	r31, 0x01	; 1
    370e:	fd 8f       	std	Y+29, r31	; 0x1d
    3710:	ec 8f       	std	Y+28, r30	; 0x1c
    3712:	f3 e0       	ldi	r31, 0x03	; 3
    3714:	fe 8f       	std	Y+30, r31	; 0x1e
    3716:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3718:	fd 8d       	ldd	r31, Y+29	; 0x1d
    371a:	00 80       	ld	r0, Z
    371c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    371e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	9d 8f       	std	Y+29, r25	; 0x1d
    3724:	8c 8f       	std	Y+28, r24	; 0x1c
    3726:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3728:	fb 8d       	ldd	r31, Y+27	; 0x1b
    372a:	00 82       	st	Z, r0
    372c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    372e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	9b 8f       	std	Y+27, r25	; 0x1b
    3734:	8a 8f       	std	Y+26, r24	; 0x1a
    3736:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3738:	91 50       	subi	r25, 0x01	; 1
    373a:	9e 8f       	std	Y+30, r25	; 0x1e
    373c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    373e:	ee 23       	and	r30, r30
    3740:	51 f7       	brne	.-44     	; 0x3716 <main+0x68>

	/*PIN_OUTPUT*/
	DIO_ES_tSetPinDirection(DIO_PORTC,PIN2,PIN_OUTPUT);    //Blue
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	62 e0       	ldi	r22, 0x02	; 2
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_PORTC,PIN0,PIN_OUTPUT);    //RED
    374c:	82 e0       	ldi	r24, 0x02	; 2
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	41 e0       	ldi	r20, 0x01	; 1
    3752:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(DIO_PORTC,PIN1,PIN_OUTPUT);    //Yellow | Green
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	61 e0       	ldi	r22, 0x01	; 1
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <DIO_ES_tSetPinDirection>
	GIE_ES_tInit();
    3760:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GIE_ES_tInit>

	/*Initialize EXTI*/
	EXTI_ES_tInit(G_AstrEXTI_tConfig);
    3764:	87 e8       	ldi	r24, 0x87	; 135
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	0e 94 95 06 	call	0xd2a	; 0xd2a <EXTI_ES_tInit>
	/*Initialize SWITCH*/
	SWITCH_ES_tInit(G_SWITCH_tSwitchArrConfig);
    376c:	8b e8       	ldi	r24, 0x8B	; 139
    376e:	91 e0       	ldi	r25, 0x01	; 1
    3770:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <SWITCH_ES_tInit>
	EXTI_ES_tCallBack(G_AstrEXTI_tConfig,Count_up,&up_count);
    3774:	87 e8       	ldi	r24, 0x87	; 135
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	22 ef       	ldi	r18, 0xF2	; 242
    377a:	3c e1       	ldi	r19, 0x1C	; 28
    377c:	ae 01       	movw	r20, r28
    377e:	41 5f       	subi	r20, 0xF1	; 241
    3780:	5f 4f       	sbci	r21, 0xFF	; 255
    3782:	b9 01       	movw	r22, r18
    3784:	0e 94 74 09 	call	0x12e8	; 0x12e8 <EXTI_ES_tCallBack>
	ADC_ES_tCallBack(ADC_Fun,&ADC_Par);
    3788:	83 e0       	ldi	r24, 0x03	; 3
    378a:	9d e1       	ldi	r25, 0x1D	; 29
    378c:	9e 01       	movw	r18, r28
    378e:	2e 5e       	subi	r18, 0xEE	; 238
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	b9 01       	movw	r22, r18
    3794:	0e 94 03 0b 	call	0x1606	; 0x1606 <ADC_ES_tCallBack>

	/*Drivers Initialization*/
	ADC_ES_tInit();
    3798:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <ADC_ES_tInit>
	LCD_ES_tInit();
    379c:	0e 94 4c 14 	call	0x2898	; 0x2898 <LCD_ES_tInit>
	ADC_ES_tEnableADC();
    37a0:	0e 94 c5 0b 	call	0x178a	; 0x178a <ADC_ES_tEnableADC>
	ADC_ES_tEnableADC_INT();
    37a4:	0e 94 ed 0b 	call	0x17da	; 0x17da <ADC_ES_tEnableADC_INT>
	ADC_ES_tEnableAutoTrigger(2);  //External Interrupt 0
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	0e 94 4b 0b 	call	0x1696	; 0x1696 <ADC_ES_tEnableAutoTrigger>
	GIE_ES_tEnable() ;
    37ae:	0e 94 79 06 	call	0xcf2	; 0xcf2 <GIE_ES_tEnable>
	/*Clear LCD*/
	LCD_ES_tWriteCommand(1);
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_ES_tWriteCommand>
	LCD_ES_tWriteString((u8*)"Welcome");
    37b8:	80 e6       	ldi	r24, 0x60	; 96
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0e 94 2b 18 	call	0x3056	; 0x3056 <LCD_ES_tWriteString>
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	aa e7       	ldi	r26, 0x7A	; 122
    37c6:	b4 e4       	ldi	r27, 0x44	; 68
    37c8:	8b 87       	std	Y+11, r24	; 0x0b
    37ca:	9c 87       	std	Y+12, r25	; 0x0c
    37cc:	ad 87       	std	Y+13, r26	; 0x0d
    37ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	4a ef       	ldi	r20, 0xFA	; 250
    37de:	54 e4       	ldi	r21, 0x44	; 68
    37e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	8f 83       	std	Y+7, r24	; 0x07
    37ea:	98 87       	std	Y+8, r25	; 0x08
    37ec:	a9 87       	std	Y+9, r26	; 0x09
    37ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f0:	6f 81       	ldd	r22, Y+7	; 0x07
    37f2:	78 85       	ldd	r23, Y+8	; 0x08
    37f4:	89 85       	ldd	r24, Y+9	; 0x09
    37f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e8       	ldi	r20, 0x80	; 128
    37fe:	5f e3       	ldi	r21, 0x3F	; 63
    3800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3804:	88 23       	and	r24, r24
    3806:	2c f4       	brge	.+10     	; 0x3812 <main+0x164>
		__ticks = 1;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	9e 83       	std	Y+6, r25	; 0x06
    380e:	8d 83       	std	Y+5, r24	; 0x05
    3810:	3f c0       	rjmp	.+126    	; 0x3890 <main+0x1e2>
	else if (__tmp > 65535)
    3812:	6f 81       	ldd	r22, Y+7	; 0x07
    3814:	78 85       	ldd	r23, Y+8	; 0x08
    3816:	89 85       	ldd	r24, Y+9	; 0x09
    3818:	9a 85       	ldd	r25, Y+10	; 0x0a
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	3f ef       	ldi	r19, 0xFF	; 255
    381e:	4f e7       	ldi	r20, 0x7F	; 127
    3820:	57 e4       	ldi	r21, 0x47	; 71
    3822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3826:	18 16       	cp	r1, r24
    3828:	4c f5       	brge	.+82     	; 0x387c <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    382a:	6b 85       	ldd	r22, Y+11	; 0x0b
    382c:	7c 85       	ldd	r23, Y+12	; 0x0c
    382e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3830:	9e 85       	ldd	r25, Y+14	; 0x0e
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e2       	ldi	r20, 0x20	; 32
    3838:	51 e4       	ldi	r21, 0x41	; 65
    383a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	bc 01       	movw	r22, r24
    3844:	cd 01       	movw	r24, r26
    3846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	9e 83       	std	Y+6, r25	; 0x06
    3850:	8d 83       	std	Y+5, r24	; 0x05
    3852:	0f c0       	rjmp	.+30     	; 0x3872 <main+0x1c4>
    3854:	88 ec       	ldi	r24, 0xC8	; 200
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9c 83       	std	Y+4, r25	; 0x04
    385a:	8b 83       	std	Y+3, r24	; 0x03
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	9c 81       	ldd	r25, Y+4	; 0x04
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	f1 f7       	brne	.-4      	; 0x3860 <main+0x1b2>
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3868:	8d 81       	ldd	r24, Y+5	; 0x05
    386a:	9e 81       	ldd	r25, Y+6	; 0x06
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	9e 83       	std	Y+6, r25	; 0x06
    3870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3872:	8d 81       	ldd	r24, Y+5	; 0x05
    3874:	9e 81       	ldd	r25, Y+6	; 0x06
    3876:	00 97       	sbiw	r24, 0x00	; 0
    3878:	69 f7       	brne	.-38     	; 0x3854 <main+0x1a6>
    387a:	14 c0       	rjmp	.+40     	; 0x38a4 <main+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387c:	6f 81       	ldd	r22, Y+7	; 0x07
    387e:	78 85       	ldd	r23, Y+8	; 0x08
    3880:	89 85       	ldd	r24, Y+9	; 0x09
    3882:	9a 85       	ldd	r25, Y+10	; 0x0a
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	8d 81       	ldd	r24, Y+5	; 0x05
    3892:	9e 81       	ldd	r25, Y+6	; 0x06
    3894:	9a 83       	std	Y+2, r25	; 0x02
    3896:	89 83       	std	Y+1, r24	; 0x01
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	9a 81       	ldd	r25, Y+2	; 0x02
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	f1 f7       	brne	.-4      	; 0x389c <main+0x1ee>
    38a0:	9a 83       	std	Y+2, r25	; 0x02
    38a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_ES_tWriteCommand(1);
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_ES_tWriteCommand>
	LCD_ES_tGoToPosition(1,1);
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	61 e0       	ldi	r22, 0x01	; 1
    38ae:	0e 94 3a 19 	call	0x3274	; 0x3274 <LCD_ES_tGoToPosition>
	LCD_ES_tWriteString((u8*)"Sample= ");
    38b2:	88 e6       	ldi	r24, 0x68	; 104
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 2b 18 	call	0x3056	; 0x3056 <LCD_ES_tWriteString>
	LCD_ES_tGoToPosition(2,1);
    38ba:	82 e0       	ldi	r24, 0x02	; 2
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	0e 94 3a 19 	call	0x3274	; 0x3274 <LCD_ES_tGoToPosition>
	LCD_ES_tWriteString((u8*)"Digital= ");
    38c2:	81 e7       	ldi	r24, 0x71	; 113
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	0e 94 2b 18 	call	0x3056	; 0x3056 <LCD_ES_tWriteString>
	while (1)
	{
		/*	ADC_enuPolling();
		ADC_enuRead(&x);
		ADC_enuClearFlag();*/
		if(flag != up_count.count)
    38ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    38cc:	80 91 ce 01 	lds	r24, 0x01CE
    38d0:	98 17       	cp	r25, r24
    38d2:	29 f1       	breq	.+74     	; 0x391e <main+0x270>
		{
		LCD_ES_tGoToPosition(1,9);
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	69 e0       	ldi	r22, 0x09	; 9
    38d8:	0e 94 3a 19 	call	0x3274	; 0x3274 <LCD_ES_tGoToPosition>
		LCD_ES_tSendIntgerNum(up_count.count);
    38dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	a0 e0       	ldi	r26, 0x00	; 0
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	bc 01       	movw	r22, r24
    38e8:	cd 01       	movw	r24, r26
    38ea:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_ES_tSendIntgerNum>
		LCD_ES_tWriteString((u8*)"  ");
    38ee:	8b e7       	ldi	r24, 0x7B	; 123
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 2b 18 	call	0x3056	; 0x3056 <LCD_ES_tWriteString>
		LCD_ES_tGoToPosition(2,10);
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	6a e0       	ldi	r22, 0x0A	; 10
    38fa:	0e 94 3a 19 	call	0x3274	; 0x3274 <LCD_ES_tGoToPosition>
		LCD_ES_tSendIntgerNum(ADC_Par.Read_ADC);
    38fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3900:	9c 89       	ldd	r25, Y+20	; 0x14
    3902:	cc 01       	movw	r24, r24
    3904:	a0 e0       	ldi	r26, 0x00	; 0
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <LCD_ES_tSendIntgerNum>
		LCD_ES_tWriteString((u8*)"  ");
    3910:	8b e7       	ldi	r24, 0x7B	; 123
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 2b 18 	call	0x3056	; 0x3056 <LCD_ES_tWriteString>
		flag = up_count.count ;
    3918:	8f 85       	ldd	r24, Y+15	; 0x0f
    391a:	80 93 ce 01 	sts	0x01CE, r24
	}

		if(200<= (ADC_Par.Read_ADC) && (ADC_Par.Read_ADC)<= 300)
    391e:	8b 89       	ldd	r24, Y+19	; 0x13
    3920:	9c 89       	ldd	r25, Y+20	; 0x14
    3922:	88 3c       	cpi	r24, 0xC8	; 200
    3924:	91 05       	cpc	r25, r1
    3926:	b0 f0       	brcs	.+44     	; 0x3954 <main+0x2a6>
    3928:	8b 89       	ldd	r24, Y+19	; 0x13
    392a:	9c 89       	ldd	r25, Y+20	; 0x14
    392c:	f1 e0       	ldi	r31, 0x01	; 1
    392e:	8d 32       	cpi	r24, 0x2D	; 45
    3930:	9f 07       	cpc	r25, r31
    3932:	80 f4       	brcc	.+32     	; 0x3954 <main+0x2a6>
		{
			DIO_ES_tSetPinValue(DIO_PORTC,PIN2,PIN_HIGH);    //Blue
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	62 e0       	ldi	r22, 0x02	; 2
    3938:	41 e0       	ldi	r20, 0x01	; 1
    393a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN0,PIN_LOW);    //RED
    393e:	82 e0       	ldi	r24, 0x02	; 2
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	40 e0       	ldi	r20, 0x00	; 0
    3944:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN1,PIN_LOW);    //Yellow
    3948:	82 e0       	ldi	r24, 0x02	; 2
    394a:	61 e0       	ldi	r22, 0x01	; 1
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    3952:	bb cf       	rjmp	.-138    	; 0x38ca <main+0x21c>
		}
		else if(300<=ADC_Par.Read_ADC && ADC_Par.Read_ADC<= 400)
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	21 e0       	ldi	r18, 0x01	; 1
    395a:	8c 32       	cpi	r24, 0x2C	; 44
    395c:	92 07       	cpc	r25, r18
    395e:	b0 f0       	brcs	.+44     	; 0x398c <main+0x2de>
    3960:	8b 89       	ldd	r24, Y+19	; 0x13
    3962:	9c 89       	ldd	r25, Y+20	; 0x14
    3964:	e1 e0       	ldi	r30, 0x01	; 1
    3966:	81 39       	cpi	r24, 0x91	; 145
    3968:	9e 07       	cpc	r25, r30
    396a:	80 f4       	brcc	.+32     	; 0x398c <main+0x2de>
		{
			DIO_ES_tSetPinValue(DIO_PORTC,PIN2,PIN_LOW);    //Blue
    396c:	82 e0       	ldi	r24, 0x02	; 2
    396e:	62 e0       	ldi	r22, 0x02	; 2
    3970:	40 e0       	ldi	r20, 0x00	; 0
    3972:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN0,PIN_HIGH);    //RED
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	41 e0       	ldi	r20, 0x01	; 1
    397c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN1,PIN_LOW);    //Yellow
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    398a:	9f cf       	rjmp	.-194    	; 0x38ca <main+0x21c>
		}
		else if(ADC_Par.Read_ADC > 400)
    398c:	8b 89       	ldd	r24, Y+19	; 0x13
    398e:	9c 89       	ldd	r25, Y+20	; 0x14
    3990:	f1 e0       	ldi	r31, 0x01	; 1
    3992:	81 39       	cpi	r24, 0x91	; 145
    3994:	9f 07       	cpc	r25, r31
    3996:	80 f0       	brcs	.+32     	; 0x39b8 <main+0x30a>
		{
			DIO_ES_tSetPinValue(DIO_PORTC,PIN2,PIN_LOW);    //Blue
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	62 e0       	ldi	r22, 0x02	; 2
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN0,PIN_LOW);    //RED
    39a2:	82 e0       	ldi	r24, 0x02	; 2
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	40 e0       	ldi	r20, 0x00	; 0
    39a8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN1,PIN_HIGH);    //Yellow
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	61 e0       	ldi	r22, 0x01	; 1
    39b0:	41 e0       	ldi	r20, 0x01	; 1
    39b2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    39b6:	89 cf       	rjmp	.-238    	; 0x38ca <main+0x21c>
		}
		else if(ADC_Par.Read_ADC < 200)
    39b8:	8b 89       	ldd	r24, Y+19	; 0x13
    39ba:	9c 89       	ldd	r25, Y+20	; 0x14
    39bc:	88 3c       	cpi	r24, 0xC8	; 200
    39be:	91 05       	cpc	r25, r1
    39c0:	08 f0       	brcs	.+2      	; 0x39c4 <main+0x316>
    39c2:	83 cf       	rjmp	.-250    	; 0x38ca <main+0x21c>
		{
			DIO_ES_tSetPinValue(DIO_PORTC,PIN2,PIN_LOW);    //Blue
    39c4:	82 e0       	ldi	r24, 0x02	; 2
    39c6:	62 e0       	ldi	r22, 0x02	; 2
    39c8:	40 e0       	ldi	r20, 0x00	; 0
    39ca:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN0,PIN_LOW);    //RED
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	40 e0       	ldi	r20, 0x00	; 0
    39d4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
			DIO_ES_tSetPinValue(DIO_PORTC,PIN1,PIN_LOW);    //Yellow
    39d8:	82 e0       	ldi	r24, 0x02	; 2
    39da:	61 e0       	ldi	r22, 0x01	; 1
    39dc:	40 e0       	ldi	r20, 0x00	; 0
    39de:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <DIO_ES_tSetPinValue>
    39e2:	73 cf       	rjmp	.-282    	; 0x38ca <main+0x21c>

000039e4 <Count_up>:
		//_delay_ms(1000);
	}
}

void Count_up(void* para)
{
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <Count_up+0x6>
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	89 83       	std	Y+1, r24	; 0x01
	((ISR_t*)para)->count++;
    39f2:	e9 81       	ldd	r30, Y+1	; 0x01
    39f4:	fa 81       	ldd	r31, Y+2	; 0x02
    39f6:	80 81       	ld	r24, Z
    39f8:	8f 5f       	subi	r24, 0xFF	; 255
    39fa:	80 83       	st	Z, r24
}
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <ADC_Fun>:

void ADC_Fun(void*para)
{
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <ADC_Fun+0x6>
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	9a 83       	std	Y+2, r25	; 0x02
    3a12:	89 83       	std	Y+1, r24	; 0x01
	ADC_ES_tRead(&((ISR_t*)para)->Read_ADC);
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	9a 81       	ldd	r25, Y+2	; 0x02
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <ADC_ES_tRead>
}
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <__mulsi3>:
    3a28:	62 9f       	mul	r22, r18
    3a2a:	d0 01       	movw	r26, r0
    3a2c:	73 9f       	mul	r23, r19
    3a2e:	f0 01       	movw	r30, r0
    3a30:	82 9f       	mul	r24, r18
    3a32:	e0 0d       	add	r30, r0
    3a34:	f1 1d       	adc	r31, r1
    3a36:	64 9f       	mul	r22, r20
    3a38:	e0 0d       	add	r30, r0
    3a3a:	f1 1d       	adc	r31, r1
    3a3c:	92 9f       	mul	r25, r18
    3a3e:	f0 0d       	add	r31, r0
    3a40:	83 9f       	mul	r24, r19
    3a42:	f0 0d       	add	r31, r0
    3a44:	74 9f       	mul	r23, r20
    3a46:	f0 0d       	add	r31, r0
    3a48:	65 9f       	mul	r22, r21
    3a4a:	f0 0d       	add	r31, r0
    3a4c:	99 27       	eor	r25, r25
    3a4e:	72 9f       	mul	r23, r18
    3a50:	b0 0d       	add	r27, r0
    3a52:	e1 1d       	adc	r30, r1
    3a54:	f9 1f       	adc	r31, r25
    3a56:	63 9f       	mul	r22, r19
    3a58:	b0 0d       	add	r27, r0
    3a5a:	e1 1d       	adc	r30, r1
    3a5c:	f9 1f       	adc	r31, r25
    3a5e:	bd 01       	movw	r22, r26
    3a60:	cf 01       	movw	r24, r30
    3a62:	11 24       	eor	r1, r1
    3a64:	08 95       	ret

00003a66 <__udivmodsi4>:
    3a66:	a1 e2       	ldi	r26, 0x21	; 33
    3a68:	1a 2e       	mov	r1, r26
    3a6a:	aa 1b       	sub	r26, r26
    3a6c:	bb 1b       	sub	r27, r27
    3a6e:	fd 01       	movw	r30, r26
    3a70:	0d c0       	rjmp	.+26     	; 0x3a8c <__udivmodsi4_ep>

00003a72 <__udivmodsi4_loop>:
    3a72:	aa 1f       	adc	r26, r26
    3a74:	bb 1f       	adc	r27, r27
    3a76:	ee 1f       	adc	r30, r30
    3a78:	ff 1f       	adc	r31, r31
    3a7a:	a2 17       	cp	r26, r18
    3a7c:	b3 07       	cpc	r27, r19
    3a7e:	e4 07       	cpc	r30, r20
    3a80:	f5 07       	cpc	r31, r21
    3a82:	20 f0       	brcs	.+8      	; 0x3a8c <__udivmodsi4_ep>
    3a84:	a2 1b       	sub	r26, r18
    3a86:	b3 0b       	sbc	r27, r19
    3a88:	e4 0b       	sbc	r30, r20
    3a8a:	f5 0b       	sbc	r31, r21

00003a8c <__udivmodsi4_ep>:
    3a8c:	66 1f       	adc	r22, r22
    3a8e:	77 1f       	adc	r23, r23
    3a90:	88 1f       	adc	r24, r24
    3a92:	99 1f       	adc	r25, r25
    3a94:	1a 94       	dec	r1
    3a96:	69 f7       	brne	.-38     	; 0x3a72 <__udivmodsi4_loop>
    3a98:	60 95       	com	r22
    3a9a:	70 95       	com	r23
    3a9c:	80 95       	com	r24
    3a9e:	90 95       	com	r25
    3aa0:	9b 01       	movw	r18, r22
    3aa2:	ac 01       	movw	r20, r24
    3aa4:	bd 01       	movw	r22, r26
    3aa6:	cf 01       	movw	r24, r30
    3aa8:	08 95       	ret

00003aaa <__divmodsi4>:
    3aaa:	97 fb       	bst	r25, 7
    3aac:	09 2e       	mov	r0, r25
    3aae:	05 26       	eor	r0, r21
    3ab0:	0e d0       	rcall	.+28     	; 0x3ace <__divmodsi4_neg1>
    3ab2:	57 fd       	sbrc	r21, 7
    3ab4:	04 d0       	rcall	.+8      	; 0x3abe <__divmodsi4_neg2>
    3ab6:	d7 df       	rcall	.-82     	; 0x3a66 <__udivmodsi4>
    3ab8:	0a d0       	rcall	.+20     	; 0x3ace <__divmodsi4_neg1>
    3aba:	00 1c       	adc	r0, r0
    3abc:	38 f4       	brcc	.+14     	; 0x3acc <__divmodsi4_exit>

00003abe <__divmodsi4_neg2>:
    3abe:	50 95       	com	r21
    3ac0:	40 95       	com	r20
    3ac2:	30 95       	com	r19
    3ac4:	21 95       	neg	r18
    3ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac8:	4f 4f       	sbci	r20, 0xFF	; 255
    3aca:	5f 4f       	sbci	r21, 0xFF	; 255

00003acc <__divmodsi4_exit>:
    3acc:	08 95       	ret

00003ace <__divmodsi4_neg1>:
    3ace:	f6 f7       	brtc	.-4      	; 0x3acc <__divmodsi4_exit>
    3ad0:	90 95       	com	r25
    3ad2:	80 95       	com	r24
    3ad4:	70 95       	com	r23
    3ad6:	61 95       	neg	r22
    3ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    3ada:	8f 4f       	sbci	r24, 0xFF	; 255
    3adc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ade:	08 95       	ret

00003ae0 <__prologue_saves__>:
    3ae0:	2f 92       	push	r2
    3ae2:	3f 92       	push	r3
    3ae4:	4f 92       	push	r4
    3ae6:	5f 92       	push	r5
    3ae8:	6f 92       	push	r6
    3aea:	7f 92       	push	r7
    3aec:	8f 92       	push	r8
    3aee:	9f 92       	push	r9
    3af0:	af 92       	push	r10
    3af2:	bf 92       	push	r11
    3af4:	cf 92       	push	r12
    3af6:	df 92       	push	r13
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	ca 1b       	sub	r28, r26
    3b0a:	db 0b       	sbc	r29, r27
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	09 94       	ijmp

00003b18 <__epilogue_restores__>:
    3b18:	2a 88       	ldd	r2, Y+18	; 0x12
    3b1a:	39 88       	ldd	r3, Y+17	; 0x11
    3b1c:	48 88       	ldd	r4, Y+16	; 0x10
    3b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b20:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b22:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b24:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b26:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b28:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b2a:	b9 84       	ldd	r11, Y+9	; 0x09
    3b2c:	c8 84       	ldd	r12, Y+8	; 0x08
    3b2e:	df 80       	ldd	r13, Y+7	; 0x07
    3b30:	ee 80       	ldd	r14, Y+6	; 0x06
    3b32:	fd 80       	ldd	r15, Y+5	; 0x05
    3b34:	0c 81       	ldd	r16, Y+4	; 0x04
    3b36:	1b 81       	ldd	r17, Y+3	; 0x03
    3b38:	aa 81       	ldd	r26, Y+2	; 0x02
    3b3a:	b9 81       	ldd	r27, Y+1	; 0x01
    3b3c:	ce 0f       	add	r28, r30
    3b3e:	d1 1d       	adc	r29, r1
    3b40:	0f b6       	in	r0, 0x3f	; 63
    3b42:	f8 94       	cli
    3b44:	de bf       	out	0x3e, r29	; 62
    3b46:	0f be       	out	0x3f, r0	; 63
    3b48:	cd bf       	out	0x3d, r28	; 61
    3b4a:	ed 01       	movw	r28, r26
    3b4c:	08 95       	ret

00003b4e <_exit>:
    3b4e:	f8 94       	cli

00003b50 <__stop_program>:
    3b50:	ff cf       	rjmp	.-2      	; 0x3b50 <__stop_program>
