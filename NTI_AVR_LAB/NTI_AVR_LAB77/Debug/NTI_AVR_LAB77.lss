
NTI_AVR_LAB77.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00002290  00002324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c6  008000c6  0000238a  2**0
                  ALLOC
  3 .stab         00002070  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec8  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000071bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009245  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <main>
      8a:	0c 94 46 11 	jmp	0x228c	; 0x228c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_ES_tInit>:
#include"DIO_Private.h"


/*DIO Initialization*/
ES_t DIO_ES_tInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t LOC_ES_tErrorState = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
	/*Pins Direction according to your Configuration */
	DDRA = CONCAT(PA7_DDR,PA6_DDR,PA5_DDR,PA4_DDR,PA3_DDR,PA2_DDR,PA1_DDR,PA0_DDR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 83       	st	Z, r24
	DDRB = CONCAT(PB7_DDR,PB6_DDR,PB5_DDR,PB4_DDR,PB3_DDR,PB2_DDR,PB1_DDR,PB0_DDR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	10 82       	st	Z, r1
	DDRC = CONCAT(PC7_DDR,PC6_DDR,PC5_DDR,PC4_DDR,PC3_DDR,PC2_DDR,PC1_DDR,PC0_DDR);
     b60:	e4 e3       	ldi	r30, 0x34	; 52
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	10 82       	st	Z, r1
	DDRD = CONCAT(PD7_DDR,PD6_DDR,PD5_DDR,PD4_DDR,PD3_DDR,PD2_DDR,PD1_DDR,PD0_DDR);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1

	/*Pins Initial Value according to your configuration */
	PORTA = CONCAT(PA7_PORT,PA6_PORT,PA5_PORT,PA4_PORT,PA3_PORT,PA2_PORT,PA1_PORT,PA0_PORT);
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	PORTB = CONCAT(PB7_PORT,PB6_PORT,PB5_PORT,PB4_PORT,PB3_PORT,PB2_PORT,PB1_PORT,PB0_PORT);
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTC = CONCAT(PC7_PORT,PC6_PORT,PC5_PORT,PC4_PORT,PC3_PORT,PC2_PORT,PC1_PORT,PC0_PORT);
     b78:	e5 e3       	ldi	r30, 0x35	; 53
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
	PORTD = CONCAT(PD7_PORT,PD6_PORT,PD5_PORT,PD4_PORT,PD3_PORT,PD2_PORT,PD1_PORT,PD0_PORT);
     b7e:	e2 e3       	ldi	r30, 0x32	; 50
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	10 82       	st	Z, r1

#elif PA0_DDR == PIN_INPUT

#endif
	 */
	LOC_ES_tErrorState = ES_OK ;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	89 83       	std	Y+1, r24	; 0x01
	return LOC_ES_tErrorState ;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
}
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <DIO_ES_tSetPinDirection>:
/*Set Pin Direction*/
ES_t DIO_ES_tSetPinDirection(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinDirection)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	00 d0       	rcall	.+0      	; 0xb98 <DIO_ES_tSetPinDirection+0x6>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <DIO_ES_tSetPinDirection+0x8>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <DIO_ES_tSetPinDirection+0xa>
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
     ba6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber>= DIO_PORTD &&
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	48 f0       	brcs	.+18     	; 0xbc0 <DIO_ES_tSetPinDirection+0x2e>
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	87 30       	cpi	r24, 0x07	; 7
     bb2:	30 f0       	brcs	.+12     	; 0xbc0 <DIO_ES_tSetPinDirection+0x2e>
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	88 23       	and	r24, r24
     bb8:	19 f0       	breq	.+6      	; 0xbc0 <DIO_ES_tSetPinDirection+0x2e>
			Copy_u8PinNumber>=PIN7 &&
			Copy_PinDirection>=PIN_OUTPUT)
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	d1 c0       	rjmp	.+418    	; 0xd62 <DIO_ES_tSetPinDirection+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	3e 83       	std	Y+6, r19	; 0x06
     bc8:	2d 83       	std	Y+5, r18	; 0x05
     bca:	6d 81       	ldd	r22, Y+5	; 0x05
     bcc:	7e 81       	ldd	r23, Y+6	; 0x06
     bce:	61 30       	cpi	r22, 0x01	; 1
     bd0:	71 05       	cpc	r23, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <DIO_ES_tSetPinDirection+0x44>
     bd4:	44 c0       	rjmp	.+136    	; 0xc5e <DIO_ES_tSetPinDirection+0xcc>
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	91 05       	cpc	r25, r1
     bde:	34 f4       	brge	.+12     	; 0xbec <DIO_ES_tSetPinDirection+0x5a>
     be0:	2d 81       	ldd	r18, Y+5	; 0x05
     be2:	3e 81       	ldd	r19, Y+6	; 0x06
     be4:	21 15       	cp	r18, r1
     be6:	31 05       	cpc	r19, r1
     be8:	71 f0       	breq	.+28     	; 0xc06 <DIO_ES_tSetPinDirection+0x74>
     bea:	b9 c0       	rjmp	.+370    	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
     bec:	6d 81       	ldd	r22, Y+5	; 0x05
     bee:	7e 81       	ldd	r23, Y+6	; 0x06
     bf0:	62 30       	cpi	r22, 0x02	; 2
     bf2:	71 05       	cpc	r23, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <DIO_ES_tSetPinDirection+0x66>
     bf6:	5c c0       	rjmp	.+184    	; 0xcb0 <DIO_ES_tSetPinDirection+0x11e>
     bf8:	8d 81       	ldd	r24, Y+5	; 0x05
     bfa:	9e 81       	ldd	r25, Y+6	; 0x06
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <DIO_ES_tSetPinDirection+0x72>
     c02:	82 c0       	rjmp	.+260    	; 0xd08 <DIO_ES_tSetPinDirection+0x176>
     c04:	ac c0       	rjmp	.+344    	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinDirection==PIN_OUTPUT)
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <DIO_ES_tSetPinDirection+0xa2>
				DDRA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     c0c:	aa e3       	ldi	r26, 0x3A	; 58
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ea e3       	ldi	r30, 0x3A	; 58
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_ES_tSetPinDirection+0x98>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_ES_tSetPinDirection+0x94>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	95 c0       	rjmp	.+298    	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     c34:	aa e3       	ldi	r26, 0x3A	; 58
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ea e3       	ldi	r30, 0x3A	; 58
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_ES_tSetPinDirection+0xc0>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_ES_tSetPinDirection+0xbc>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	80 c0       	rjmp	.+256    	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTB:
			DDRB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     c5e:	a7 e3       	ldi	r26, 0x37	; 55
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e3       	ldi	r30, 0x37	; 55
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <DIO_ES_tSetPinDirection+0xe8>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	2a 95       	dec	r18
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <DIO_ES_tSetPinDirection+0xe4>
     c7e:	80 95       	com	r24
     c80:	84 23       	and	r24, r20
     c82:	8c 93       	st	X, r24
			DDRB |= (Copy_PinDirection<<Copy_u8PinNumber);
     c84:	a7 e3       	ldi	r26, 0x37	; 55
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e7 e3       	ldi	r30, 0x37	; 55
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	88 2f       	mov	r24, r24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	b9 01       	movw	r22, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_ES_tSetPinDirection+0x112>
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	8a 95       	dec	r24
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_ES_tSetPinDirection+0x10e>
     ca8:	cb 01       	movw	r24, r22
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	57 c0       	rjmp	.+174    	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinDirection==PIN_OUTPUT)
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a1 f4       	brne	.+40     	; 0xcde <DIO_ES_tSetPinDirection+0x14c>
				DDRC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     cb6:	a4 e3       	ldi	r26, 0x34	; 52
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e4 e3       	ldi	r30, 0x34	; 52
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_ES_tSetPinDirection+0x142>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_ES_tSetPinDirection+0x13e>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	40 c0       	rjmp	.+128    	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     cde:	a4 e3       	ldi	r26, 0x34	; 52
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e4 e3       	ldi	r30, 0x34	; 52
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_ES_tSetPinDirection+0x16a>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_ES_tSetPinDirection+0x166>
     d00:	80 95       	com	r24
     d02:	84 23       	and	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	2b c0       	rjmp	.+86     	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinDirection==PIN_OUTPUT)
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <DIO_ES_tSetPinDirection+0x1a4>
				DDRD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_ES_tSetPinDirection+0x19a>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_ES_tSetPinDirection+0x196>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <DIO_ES_tSetPinDirection+0x1cc>
			else
				DDRD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     d36:	a1 e3       	ldi	r26, 0x31	; 49
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_ES_tSetPinDirection+0x1c2>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_ES_tSetPinDirection+0x1be>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
}
     d64:	26 96       	adiw	r28, 0x06	; 6
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <DIO_ES_tSetPinValue>:
/*Set Pin Value*/
ES_t DIO_ES_tSetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_PinValue)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <DIO_ES_tSetPinValue+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_ES_tSetPinValue+0x8>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_ES_tSetPinValue+0xa>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	6b 83       	std	Y+3, r22	; 0x03
     d88:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber>= DIO_PORTD &&
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	48 f0       	brcs	.+18     	; 0xda4 <DIO_ES_tSetPinValue+0x2e>
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	87 30       	cpi	r24, 0x07	; 7
     d96:	30 f0       	brcs	.+12     	; 0xda4 <DIO_ES_tSetPinValue+0x2e>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	88 23       	and	r24, r24
     d9c:	19 f0       	breq	.+6      	; 0xda4 <DIO_ES_tSetPinValue+0x2e>
			Copy_u8PinNumber>=PIN7 &&
			Copy_PinValue>=PIN_HIGH)
	{
		LOC_ES_tErrorState  = ES_OUT_OF_RANGE ;
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	d1 c0       	rjmp	.+418    	; 0xf46 <DIO_ES_tSetPinValue+0x1d0>
	}
	else
	{
		switch(Copy_u8PortNumber)
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3e 83       	std	Y+6, r19	; 0x06
     dac:	2d 83       	std	Y+5, r18	; 0x05
     dae:	6d 81       	ldd	r22, Y+5	; 0x05
     db0:	7e 81       	ldd	r23, Y+6	; 0x06
     db2:	61 30       	cpi	r22, 0x01	; 1
     db4:	71 05       	cpc	r23, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <DIO_ES_tSetPinValue+0x44>
     db8:	44 c0       	rjmp	.+136    	; 0xe42 <DIO_ES_tSetPinValue+0xcc>
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	9e 81       	ldd	r25, Y+6	; 0x06
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	91 05       	cpc	r25, r1
     dc2:	34 f4       	brge	.+12     	; 0xdd0 <DIO_ES_tSetPinValue+0x5a>
     dc4:	2d 81       	ldd	r18, Y+5	; 0x05
     dc6:	3e 81       	ldd	r19, Y+6	; 0x06
     dc8:	21 15       	cp	r18, r1
     dca:	31 05       	cpc	r19, r1
     dcc:	71 f0       	breq	.+28     	; 0xdea <DIO_ES_tSetPinValue+0x74>
     dce:	b9 c0       	rjmp	.+370    	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
     dd0:	6d 81       	ldd	r22, Y+5	; 0x05
     dd2:	7e 81       	ldd	r23, Y+6	; 0x06
     dd4:	62 30       	cpi	r22, 0x02	; 2
     dd6:	71 05       	cpc	r23, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <DIO_ES_tSetPinValue+0x66>
     dda:	5c c0       	rjmp	.+184    	; 0xe94 <DIO_ES_tSetPinValue+0x11e>
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <DIO_ES_tSetPinValue+0x72>
     de6:	82 c0       	rjmp	.+260    	; 0xeec <DIO_ES_tSetPinValue+0x176>
     de8:	ac c0       	rjmp	.+344    	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
		{

		case DIO_PORTA:
			if(Copy_PinValue==PIN_HIGH)
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	a1 f4       	brne	.+40     	; 0xe18 <DIO_ES_tSetPinValue+0xa2>
				PORTA |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     df0:	ab e3       	ldi	r26, 0x3B	; 59
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	eb e3       	ldi	r30, 0x3B	; 59
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_ES_tSetPinValue+0x98>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_ES_tSetPinValue+0x94>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	95 c0       	rjmp	.+298    	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTA &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     e18:	ab e3       	ldi	r26, 0x3B	; 59
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	eb e3       	ldi	r30, 0x3B	; 59
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_ES_tSetPinValue+0xc0>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_ES_tSetPinValue+0xbc>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	80 c0       	rjmp	.+256    	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTB:
			PORTB &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     e42:	a8 e3       	ldi	r26, 0x38	; 56
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e8 e3       	ldi	r30, 0x38	; 56
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_ES_tSetPinValue+0xe8>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	2a 95       	dec	r18
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_ES_tSetPinValue+0xe4>
     e62:	80 95       	com	r24
     e64:	84 23       	and	r24, r20
     e66:	8c 93       	st	X, r24
			PORTB |= (Copy_PinValue<<Copy_u8PinNumber);
     e68:	a8 e3       	ldi	r26, 0x38	; 56
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e8 e3       	ldi	r30, 0x38	; 56
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	b9 01       	movw	r22, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_ES_tSetPinValue+0x112>
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	8a 95       	dec	r24
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_ES_tSetPinValue+0x10e>
     e8c:	cb 01       	movw	r24, r22
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	57 c0       	rjmp	.+174    	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTC:
			if(Copy_PinValue==PIN_HIGH)
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	a1 f4       	brne	.+40     	; 0xec2 <DIO_ES_tSetPinValue+0x14c>
				PORTC |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     e9a:	a5 e3       	ldi	r26, 0x35	; 53
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e3       	ldi	r30, 0x35	; 53
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_ES_tSetPinValue+0x142>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_ES_tSetPinValue+0x13e>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	40 c0       	rjmp	.+128    	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTC &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     ec2:	a5 e3       	ldi	r26, 0x35	; 53
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e5 e3       	ldi	r30, 0x35	; 53
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_ES_tSetPinValue+0x16a>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_ES_tSetPinValue+0x166>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	2b c0       	rjmp	.+86     	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
			break ;
		case DIO_PORTD:
			if(Copy_PinValue==PIN_HIGH)
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	a1 f4       	brne	.+40     	; 0xf1a <DIO_ES_tSetPinValue+0x1a4>
				PORTD |= (DIO_BIT_MASK<<Copy_u8PinNumber);
     ef2:	a2 e3       	ldi	r26, 0x32	; 50
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e2 e3       	ldi	r30, 0x32	; 50
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_ES_tSetPinValue+0x19a>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_ES_tSetPinValue+0x196>
     f14:	84 2b       	or	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <DIO_ES_tSetPinValue+0x1cc>
			else
				PORTD &=~(DIO_BIT_MASK<<Copy_u8PinNumber);
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_ES_tSetPinValue+0x1c2>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_ES_tSetPinValue+0x1be>
     f3c:	80 95       	com	r24
     f3e:	84 23       	and	r24, r20
     f40:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
}
     f48:	26 96       	adiw	r28, 0x06	; 6
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <DIO_ES_tGetPinValue>:
/*Get Pin Value*/
ES_t DIO_ES_tGetPinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8* Copy_PinValue)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	27 97       	sbiw	r28, 0x07	; 7
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	6b 83       	std	Y+3, r22	; 0x03
     f72:	5d 83       	std	Y+5, r21	; 0x05
     f74:	4c 83       	std	Y+4, r20	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
     f76:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PinValue!=NULL)
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_ES_tGetPinValue+0x28>
     f80:	7c c0       	rjmp	.+248    	; 0x107a <DIO_ES_tGetPinValue+0x120>
	{
		if(Copy_u8PortNumber>= DIO_PORTD &&
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	30 f0       	brcs	.+12     	; 0xf94 <DIO_ES_tGetPinValue+0x3a>
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	87 30       	cpi	r24, 0x07	; 7
     f8c:	18 f0       	brcs	.+6      	; 0xf94 <DIO_ES_tGetPinValue+0x3a>
				Copy_u8PinNumber>=PIN7 )
		{
			LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	75 c0       	rjmp	.+234    	; 0x107e <DIO_ES_tGetPinValue+0x124>
		}
		else
		{
			switch(Copy_u8PortNumber)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3f 83       	std	Y+7, r19	; 0x07
     f9c:	2e 83       	std	Y+6, r18	; 0x06
     f9e:	4e 81       	ldd	r20, Y+6	; 0x06
     fa0:	5f 81       	ldd	r21, Y+7	; 0x07
     fa2:	41 30       	cpi	r20, 0x01	; 1
     fa4:	51 05       	cpc	r21, r1
     fa6:	59 f1       	breq	.+86     	; 0xffe <DIO_ES_tGetPinValue+0xa4>
     fa8:	8e 81       	ldd	r24, Y+6	; 0x06
     faa:	9f 81       	ldd	r25, Y+7	; 0x07
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	91 05       	cpc	r25, r1
     fb0:	34 f4       	brge	.+12     	; 0xfbe <DIO_ES_tGetPinValue+0x64>
     fb2:	2e 81       	ldd	r18, Y+6	; 0x06
     fb4:	3f 81       	ldd	r19, Y+7	; 0x07
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	69 f0       	breq	.+26     	; 0xfd6 <DIO_ES_tGetPinValue+0x7c>
     fbc:	5b c0       	rjmp	.+182    	; 0x1074 <DIO_ES_tGetPinValue+0x11a>
     fbe:	4e 81       	ldd	r20, Y+6	; 0x06
     fc0:	5f 81       	ldd	r21, Y+7	; 0x07
     fc2:	42 30       	cpi	r20, 0x02	; 2
     fc4:	51 05       	cpc	r21, r1
     fc6:	79 f1       	breq	.+94     	; 0x1026 <DIO_ES_tGetPinValue+0xcc>
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <DIO_ES_tGetPinValue+0x7a>
     fd2:	3d c0       	rjmp	.+122    	; 0x104e <DIO_ES_tGetPinValue+0xf4>
     fd4:	4f c0       	rjmp	.+158    	; 0x1074 <DIO_ES_tGetPinValue+0x11a>
			{

			case DIO_PORTA:
				*Copy_PinValue = (PINA>>Copy_u8PinNumber)&DIO_BIT_MASK ;
     fd6:	e9 e3       	ldi	r30, 0x39	; 57
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_ES_tGetPinValue+0x94>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_ES_tGetPinValue+0x90>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	ec 81       	ldd	r30, Y+4	; 0x04
     ff8:	fd 81       	ldd	r31, Y+5	; 0x05
     ffa:	80 83       	st	Z, r24
     ffc:	3b c0       	rjmp	.+118    	; 0x1074 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTB:
				*Copy_PinValue = (PINB>>Copy_u8PinNumber)&DIO_BIT_MASK ;
     ffe:	e6 e3       	ldi	r30, 0x36	; 54
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a9 01       	movw	r20, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_ES_tGetPinValue+0xbc>
    1012:	55 95       	asr	r21
    1014:	47 95       	ror	r20
    1016:	8a 95       	dec	r24
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_ES_tGetPinValue+0xb8>
    101a:	ca 01       	movw	r24, r20
    101c:	81 70       	andi	r24, 0x01	; 1
    101e:	ec 81       	ldd	r30, Y+4	; 0x04
    1020:	fd 81       	ldd	r31, Y+5	; 0x05
    1022:	80 83       	st	Z, r24
    1024:	27 c0       	rjmp	.+78     	; 0x1074 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTC:
				*Copy_PinValue = (PINC>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    1026:	e3 e3       	ldi	r30, 0x33	; 51
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_ES_tGetPinValue+0xe4>
    103a:	55 95       	asr	r21
    103c:	47 95       	ror	r20
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_ES_tGetPinValue+0xe0>
    1042:	ca 01       	movw	r24, r20
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	ec 81       	ldd	r30, Y+4	; 0x04
    1048:	fd 81       	ldd	r31, Y+5	; 0x05
    104a:	80 83       	st	Z, r24
    104c:	13 c0       	rjmp	.+38     	; 0x1074 <DIO_ES_tGetPinValue+0x11a>
				break ;
			case DIO_PORTD:
				*Copy_PinValue = (PIND>>Copy_u8PinNumber)&DIO_BIT_MASK ;
    104e:	e0 e3       	ldi	r30, 0x30	; 48
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a9 01       	movw	r20, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_ES_tGetPinValue+0x10c>
    1062:	55 95       	asr	r21
    1064:	47 95       	ror	r20
    1066:	8a 95       	dec	r24
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_ES_tGetPinValue+0x108>
    106a:	ca 01       	movw	r24, r20
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	ec 81       	ldd	r30, Y+4	; 0x04
    1070:	fd 81       	ldd	r31, Y+5	; 0x05
    1072:	80 83       	st	Z, r24
				break ;
			default:
				break ;
				/*Do Nothing*/
			}
			LOC_ES_tErrorState = ES_OK ;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_ES_tGetPinValue+0x124>
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	89 83       	std	Y+1, r24	; 0x01
	}
	return LOC_ES_tErrorState ;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	27 96       	adiw	r28, 0x07	; 7
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_ES_tTogglePinValue>:
/*Toggle Pin Value*/
ES_t DIO_ES_tTogglePinValue(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_ES_tTogglePinValue+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_ES_tTogglePinValue+0x8>
    109a:	0f 92       	push	r0
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK;
    10a4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortNumber>= DIO_PORTD &&
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	30 f0       	brcs	.+12     	; 0x10b8 <DIO_ES_tTogglePinValue+0x26>
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	87 30       	cpi	r24, 0x07	; 7
    10b0:	18 f0       	brcs	.+6      	; 0x10b8 <DIO_ES_tTogglePinValue+0x26>
			Copy_u8PinNumber>=PIN7 )
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	70 c0       	rjmp	.+224    	; 0x1198 <DIO_ES_tTogglePinValue+0x106>
	}
	else
	{
		switch(Copy_u8PortNumber)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3d 83       	std	Y+5, r19	; 0x05
    10c0:	2c 83       	std	Y+4, r18	; 0x04
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 05       	cpc	r25, r1
    10ca:	49 f1       	breq	.+82     	; 0x111e <DIO_ES_tTogglePinValue+0x8c>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <DIO_ES_tTogglePinValue+0x4e>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <DIO_ES_tTogglePinValue+0x64>
    10de:	5a c0       	rjmp	.+180    	; 0x1194 <DIO_ES_tTogglePinValue+0x102>
    10e0:	2c 81       	ldd	r18, Y+4	; 0x04
    10e2:	3d 81       	ldd	r19, Y+5	; 0x05
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	71 f1       	breq	.+92     	; 0x1146 <DIO_ES_tTogglePinValue+0xb4>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	e9 f1       	breq	.+122    	; 0x116e <DIO_ES_tTogglePinValue+0xdc>
    10f4:	4f c0       	rjmp	.+158    	; 0x1194 <DIO_ES_tTogglePinValue+0x102>
		{

		case DIO_PORTA:
			PORTA ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    10f6:	ab e3       	ldi	r26, 0x3B	; 59
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_ES_tTogglePinValue+0x82>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_ES_tTogglePinValue+0x7e>
    1118:	84 27       	eor	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	3b c0       	rjmp	.+118    	; 0x1194 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTB:
			PORTB ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    111e:	a8 e3       	ldi	r26, 0x38	; 56
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e8 e3       	ldi	r30, 0x38	; 56
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_ES_tTogglePinValue+0xaa>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_ES_tTogglePinValue+0xa6>
    1140:	84 27       	eor	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	27 c0       	rjmp	.+78     	; 0x1194 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTC:
			PORTC ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    1146:	a5 e3       	ldi	r26, 0x35	; 53
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_ES_tTogglePinValue+0xd2>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_ES_tTogglePinValue+0xce>
    1168:	84 27       	eor	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <DIO_ES_tTogglePinValue+0x102>
			break ;
		case DIO_PORTD:
			PORTD ^= (DIO_BIT_MASK<<Copy_u8PinNumber) ;
    116e:	a2 e3       	ldi	r26, 0x32	; 50
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e2 e3       	ldi	r30, 0x32	; 50
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_ES_tTogglePinValue+0xfa>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_ES_tTogglePinValue+0xf6>
    1190:	84 27       	eor	r24, r20
    1192:	8c 93       	st	X, r24
			break ;
		default:
			break ;
			/*Do Nothing*/
		}
		LOC_ES_tErrorState = ES_OK ;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <LCD_ES_tInit>:
#include<util/delay.h>


/*LCD Driver Initialization*/
ES_t  LCD_ES_tInit(void)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	6d 97       	sbiw	r28, 0x1d	; 29
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
	ES_t LOC_ES_tErrorState = ES_NOK ;
    11be:	1d 8e       	std	Y+29, r1	; 0x1d

	DIO_ES_tSetPinDirection(RS_GRP, RS_PIN, PIN_OUTPUT );
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	41 e0       	ldi	r20, 0x01	; 1
    11c6:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(RW_GRP, RW_PIN, PIN_OUTPUT );
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(EN_GRP, EN_PIN, PIN_OUTPUT );
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>

	DIO_ES_tSetPinDirection(D7_GRP, D7_PIN, PIN_OUTPUT );
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	67 e0       	ldi	r22, 0x07	; 7
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D6_GRP, D6_PIN, PIN_OUTPUT );
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	66 e0       	ldi	r22, 0x06	; 6
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D5_GRP, D5_PIN, PIN_OUTPUT );
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	65 e0       	ldi	r22, 0x05	; 5
    11f6:	41 e0       	ldi	r20, 0x01	; 1
    11f8:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinDirection(D4_GRP, D4_PIN, PIN_OUTPUT );
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	64 e0       	ldi	r22, 0x04	; 4
    1200:	41 e0       	ldi	r20, 0x01	; 1
    1202:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
	LCD_ES_tWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	62 e0       	ldi	r22, 0x02	; 2
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, 0 );
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	67 e0       	ldi	r22, 0x07	; 7
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, 0 );
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	66 e0       	ldi	r22, 0x06	; 6
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, 1 );
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	65 e0       	ldi	r22, 0x05	; 5
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, 0 );
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	64 e0       	ldi	r22, 0x04	; 4
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	62 e0       	ldi	r22, 0x02	; 2
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e8       	ldi	r26, 0x80	; 128
    125c:	bf e3       	ldi	r27, 0x3F	; 63
    125e:	89 8f       	std	Y+25, r24	; 0x19
    1260:	9a 8f       	std	Y+26, r25	; 0x1a
    1262:	ab 8f       	std	Y+27, r26	; 0x1b
    1264:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	69 8d       	ldd	r22, Y+25	; 0x19
    1268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a e7       	ldi	r20, 0x7A	; 122
    1274:	55 e4       	ldi	r21, 0x45	; 69
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8d 8b       	std	Y+21, r24	; 0x15
    1280:	9e 8b       	std	Y+22, r25	; 0x16
    1282:	af 8b       	std	Y+23, r26	; 0x17
    1284:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <LCD_ES_tInit+0xfe>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 8b       	std	Y+20, r25	; 0x14
    12a4:	8b 8b       	std	Y+19, r24	; 0x13
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <LCD_ES_tInit+0x17c>
	else if (__tmp > 65535)
    12a8:	6d 89       	ldd	r22, Y+21	; 0x15
    12aa:	7e 89       	ldd	r23, Y+22	; 0x16
    12ac:	8f 89       	ldd	r24, Y+23	; 0x17
    12ae:	98 8d       	ldd	r25, Y+24	; 0x18
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <LCD_ES_tInit+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	69 8d       	ldd	r22, Y+25	; 0x19
    12c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <LCD_ES_tInit+0x15e>
    12ea:	80 e9       	ldi	r24, 0x90	; 144
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12f2:	89 89       	ldd	r24, Y+17	; 0x11
    12f4:	9a 89       	ldd	r25, Y+18	; 0x12
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <LCD_ES_tInit+0x14c>
    12fa:	9a 8b       	std	Y+18, r25	; 0x12
    12fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1300:	9c 89       	ldd	r25, Y+20	; 0x14
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	8b 89       	ldd	r24, Y+19	; 0x13
    130a:	9c 89       	ldd	r25, Y+20	; 0x14
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <LCD_ES_tInit+0x140>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <LCD_ES_tInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6d 89       	ldd	r22, Y+21	; 0x15
    1314:	7e 89       	ldd	r23, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
    1326:	8b 89       	ldd	r24, Y+19	; 0x13
    1328:	9c 89       	ldd	r25, Y+20	; 0x14
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
    132e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1330:	98 89       	ldd	r25, Y+16	; 0x10
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <LCD_ES_tInit+0x188>
    1336:	98 8b       	std	Y+16, r25	; 0x10
    1338:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a0 ef       	ldi	r26, 0xF0	; 240
    134a:	b1 e4       	ldi	r27, 0x41	; 65
    134c:	8b 87       	std	Y+11, r24	; 0x0b
    134e:	9c 87       	std	Y+12, r25	; 0x0c
    1350:	ad 87       	std	Y+13, r26	; 0x0d
    1352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1354:	6b 85       	ldd	r22, Y+11	; 0x0b
    1356:	7c 85       	ldd	r23, Y+12	; 0x0c
    1358:	8d 85       	ldd	r24, Y+13	; 0x0d
    135a:	9e 85       	ldd	r25, Y+14	; 0x0e
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4a e7       	ldi	r20, 0x7A	; 122
    1362:	55 e4       	ldi	r21, 0x45	; 69
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8f 83       	std	Y+7, r24	; 0x07
    136e:	98 87       	std	Y+8, r25	; 0x08
    1370:	a9 87       	std	Y+9, r26	; 0x09
    1372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e8       	ldi	r20, 0x80	; 128
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1388:	88 23       	and	r24, r24
    138a:	2c f4       	brge	.+10     	; 0x1396 <LCD_ES_tInit+0x1ec>
		__ticks = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
    1394:	3f c0       	rjmp	.+126    	; 0x1414 <LCD_ES_tInit+0x26a>
	else if (__tmp > 65535)
    1396:	6f 81       	ldd	r22, Y+7	; 0x07
    1398:	78 85       	ldd	r23, Y+8	; 0x08
    139a:	89 85       	ldd	r24, Y+9	; 0x09
    139c:	9a 85       	ldd	r25, Y+10	; 0x0a
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	57 e4       	ldi	r21, 0x47	; 71
    13a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	4c f5       	brge	.+82     	; 0x1400 <LCD_ES_tInit+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e2       	ldi	r20, 0x20	; 32
    13bc:	51 e4       	ldi	r21, 0x41	; 65
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <LCD_ES_tInit+0x24c>
    13d8:	80 e9       	ldi	r24, 0x90	; 144
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	9c 83       	std	Y+4, r25	; 0x04
    13de:	8b 83       	std	Y+3, r24	; 0x03
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_ES_tInit+0x23a>
    13e8:	9c 83       	std	Y+4, r25	; 0x04
    13ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	69 f7       	brne	.-38     	; 0x13d8 <LCD_ES_tInit+0x22e>
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <LCD_ES_tInit+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1400:	6f 81       	ldd	r22, Y+7	; 0x07
    1402:	78 85       	ldd	r23, Y+8	; 0x08
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_ES_tInit+0x276>
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

	LCD_ES_tWriteNLatch(0x28);
    1428:	88 e2       	ldi	r24, 0x28	; 40
    142a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
#else
#error "LCD mode configuration is wrong"
#endif

	//Display Control
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x0F);
    1438:	8f e0       	ldi	r24, 0x0F	; 15
    143a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	//Display Clear
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x01);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
	//_delay_ms(2);

	//Entry Mode
	DIO_ES_tSetPinValue(RS_GRP, RS_PIN, PIN_LOW);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(0x06);
    1458:	86 e0       	ldi	r24, 0x06	; 6
    145a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
	//_delay_ms(1);


	return LOC_ES_tErrorState ;
    145e:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1460:	6d 96       	adiw	r28, 0x1d	; 29
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <LCD_ES_tWriteData>:
/**************************************************************************************************************************************/
/*LCD write Data*/
ES_t   LCD_ES_tWriteData(u8 Copy_u8Data)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <LCD_ES_tWriteData+0x6>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    147e:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	41 e0       	ldi	r20, 0x01	; 1
    1486:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Data);
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <LCD_ES_tWriteCommand>:
/****************************************************************************************************************************************/
/*LCD write command*/
ES_t   LCD_ES_tWriteCommand(u8 Copy_u8Command)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <LCD_ES_tWriteCommand+0x6>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    14ac:	19 82       	std	Y+1, r1	; 0x01

	DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	LCD_ES_tWriteNLatch(Copy_u8Command);
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
	LOC_ES_tErrorState = ES_OK ;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01

	return LOC_ES_tErrorState ;
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_ES_tWriteNLatch>:

/******************************************************************************************************************************************/
static ES_t LCD_ES_tWriteNLatch(u8 Copy_u8Byte)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	ea 97       	sbiw	r28, 0x3a	; 58
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	8a af       	std	Y+58, r24	; 0x3a
	ES_t LOC_ES_tErrorState = ES_NOK;
    14e4:	19 ae       	std	Y+57, r1	; 0x39
	_delay_ms(30);


#elif LCD_MODE == FOUR_BIT

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW);
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(RW_GRP, RW_PIN, PIN_LOW);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>7)&1) );
    14fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    14fc:	98 2f       	mov	r25, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	99 27       	eor	r25, r25
    1502:	99 1f       	adc	r25, r25
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	67 e0       	ldi	r22, 0x07	; 7
    1508:	49 2f       	mov	r20, r25
    150a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>6)&1) );
    150e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1510:	82 95       	swap	r24
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	83 70       	andi	r24, 0x03	; 3
    1518:	98 2f       	mov	r25, r24
    151a:	91 70       	andi	r25, 0x01	; 1
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	66 e0       	ldi	r22, 0x06	; 6
    1520:	49 2f       	mov	r20, r25
    1522:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>5)&1) );
    1526:	8a ad       	ldd	r24, Y+58	; 0x3a
    1528:	82 95       	swap	r24
    152a:	86 95       	lsr	r24
    152c:	87 70       	andi	r24, 0x07	; 7
    152e:	98 2f       	mov	r25, r24
    1530:	91 70       	andi	r25, 0x01	; 1
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	65 e0       	ldi	r22, 0x05	; 5
    1536:	49 2f       	mov	r20, r25
    1538:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>4)&1) );
    153c:	8a ad       	ldd	r24, Y+58	; 0x3a
    153e:	82 95       	swap	r24
    1540:	8f 70       	andi	r24, 0x0F	; 15
    1542:	98 2f       	mov	r25, r24
    1544:	91 70       	andi	r25, 0x01	; 1
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	64 e0       	ldi	r22, 0x04	; 4
    154a:	49 2f       	mov	r20, r25
    154c:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e8       	ldi	r26, 0x80	; 128
    1560:	bf e3       	ldi	r27, 0x3F	; 63
    1562:	8d ab       	std	Y+53, r24	; 0x35
    1564:	9e ab       	std	Y+54, r25	; 0x36
    1566:	af ab       	std	Y+55, r26	; 0x37
    1568:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6d a9       	ldd	r22, Y+53	; 0x35
    156c:	7e a9       	ldd	r23, Y+54	; 0x36
    156e:	8f a9       	ldd	r24, Y+55	; 0x37
    1570:	98 ad       	ldd	r25, Y+56	; 0x38
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a e7       	ldi	r20, 0x7A	; 122
    1578:	55 e4       	ldi	r21, 0x45	; 69
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	89 ab       	std	Y+49, r24	; 0x31
    1584:	9a ab       	std	Y+50, r25	; 0x32
    1586:	ab ab       	std	Y+51, r26	; 0x33
    1588:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    158a:	69 a9       	ldd	r22, Y+49	; 0x31
    158c:	7a a9       	ldd	r23, Y+50	; 0x32
    158e:	8b a9       	ldd	r24, Y+51	; 0x33
    1590:	9c a9       	ldd	r25, Y+52	; 0x34
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <LCD_ES_tWriteNLatch+0xde>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <LCD_ES_tWriteNLatch+0x15c>
	else if (__tmp > 65535)
    15ac:	69 a9       	ldd	r22, Y+49	; 0x31
    15ae:	7a a9       	ldd	r23, Y+50	; 0x32
    15b0:	8b a9       	ldd	r24, Y+51	; 0x33
    15b2:	9c a9       	ldd	r25, Y+52	; 0x34
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <LCD_ES_tWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6d a9       	ldd	r22, Y+53	; 0x35
    15c6:	7e a9       	ldd	r23, Y+54	; 0x36
    15c8:	8f a9       	ldd	r24, Y+55	; 0x37
    15ca:	98 ad       	ldd	r25, Y+56	; 0x38
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	98 ab       	std	Y+48, r25	; 0x30
    15ea:	8f a7       	std	Y+47, r24	; 0x2f
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <LCD_ES_tWriteNLatch+0x13e>
    15ee:	80 e9       	ldi	r24, 0x90	; 144
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9e a7       	std	Y+46, r25	; 0x2e
    15f4:	8d a7       	std	Y+45, r24	; 0x2d
    15f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <LCD_ES_tWriteNLatch+0x12c>
    15fe:	9e a7       	std	Y+46, r25	; 0x2e
    1600:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8f a5       	ldd	r24, Y+47	; 0x2f
    1604:	98 a9       	ldd	r25, Y+48	; 0x30
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	98 ab       	std	Y+48, r25	; 0x30
    160a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8f a5       	ldd	r24, Y+47	; 0x2f
    160e:	98 a9       	ldd	r25, Y+48	; 0x30
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <LCD_ES_tWriteNLatch+0x120>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <LCD_ES_tWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	69 a9       	ldd	r22, Y+49	; 0x31
    1618:	7a a9       	ldd	r23, Y+50	; 0x32
    161a:	8b a9       	ldd	r24, Y+51	; 0x33
    161c:	9c a9       	ldd	r25, Y+52	; 0x34
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	98 ab       	std	Y+48, r25	; 0x30
    1628:	8f a7       	std	Y+47, r24	; 0x2f
    162a:	8f a5       	ldd	r24, Y+47	; 0x2f
    162c:	98 a9       	ldd	r25, Y+48	; 0x30
    162e:	9c a7       	std	Y+44, r25	; 0x2c
    1630:	8b a7       	std	Y+43, r24	; 0x2b
    1632:	8b a5       	ldd	r24, Y+43	; 0x2b
    1634:	9c a5       	ldd	r25, Y+44	; 0x2c
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <LCD_ES_tWriteNLatch+0x168>
    163a:	9c a7       	std	Y+44, r25	; 0x2c
    163c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	62 e0       	ldi	r22, 0x02	; 2
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 ef       	ldi	r26, 0xF0	; 240
    164e:	b1 e4       	ldi	r27, 0x41	; 65
    1650:	8f a3       	std	Y+39, r24	; 0x27
    1652:	98 a7       	std	Y+40, r25	; 0x28
    1654:	a9 a7       	std	Y+41, r26	; 0x29
    1656:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1658:	6f a1       	ldd	r22, Y+39	; 0x27
    165a:	78 a5       	ldd	r23, Y+40	; 0x28
    165c:	89 a5       	ldd	r24, Y+41	; 0x29
    165e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	4a e7       	ldi	r20, 0x7A	; 122
    1666:	55 e4       	ldi	r21, 0x45	; 69
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8b a3       	std	Y+35, r24	; 0x23
    1672:	9c a3       	std	Y+36, r25	; 0x24
    1674:	ad a3       	std	Y+37, r26	; 0x25
    1676:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1678:	6b a1       	ldd	r22, Y+35	; 0x23
    167a:	7c a1       	ldd	r23, Y+36	; 0x24
    167c:	8d a1       	ldd	r24, Y+37	; 0x25
    167e:	9e a1       	ldd	r25, Y+38	; 0x26
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e8       	ldi	r20, 0x80	; 128
    1686:	5f e3       	ldi	r21, 0x3F	; 63
    1688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168c:	88 23       	and	r24, r24
    168e:	2c f4       	brge	.+10     	; 0x169a <LCD_ES_tWriteNLatch+0x1cc>
		__ticks = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
    1698:	3f c0       	rjmp	.+126    	; 0x1718 <LCD_ES_tWriteNLatch+0x24a>
	else if (__tmp > 65535)
    169a:	6b a1       	ldd	r22, Y+35	; 0x23
    169c:	7c a1       	ldd	r23, Y+36	; 0x24
    169e:	8d a1       	ldd	r24, Y+37	; 0x25
    16a0:	9e a1       	ldd	r25, Y+38	; 0x26
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	3f ef       	ldi	r19, 0xFF	; 255
    16a6:	4f e7       	ldi	r20, 0x7F	; 127
    16a8:	57 e4       	ldi	r21, 0x47	; 71
    16aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	4c f5       	brge	.+82     	; 0x1704 <LCD_ES_tWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b2:	6f a1       	ldd	r22, Y+39	; 0x27
    16b4:	78 a5       	ldd	r23, Y+40	; 0x28
    16b6:	89 a5       	ldd	r24, Y+41	; 0x29
    16b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e2       	ldi	r20, 0x20	; 32
    16c0:	51 e4       	ldi	r21, 0x41	; 65
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9a a3       	std	Y+34, r25	; 0x22
    16d8:	89 a3       	std	Y+33, r24	; 0x21
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <LCD_ES_tWriteNLatch+0x22c>
    16dc:	80 e9       	ldi	r24, 0x90	; 144
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	98 a3       	std	Y+32, r25	; 0x20
    16e2:	8f 8f       	std	Y+31, r24	; 0x1f
    16e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16e6:	98 a1       	ldd	r25, Y+32	; 0x20
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_ES_tWriteNLatch+0x21a>
    16ec:	98 a3       	std	Y+32, r25	; 0x20
    16ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f0:	89 a1       	ldd	r24, Y+33	; 0x21
    16f2:	9a a1       	ldd	r25, Y+34	; 0x22
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9a a3       	std	Y+34, r25	; 0x22
    16f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fa:	89 a1       	ldd	r24, Y+33	; 0x21
    16fc:	9a a1       	ldd	r25, Y+34	; 0x22
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	69 f7       	brne	.-38     	; 0x16dc <LCD_ES_tWriteNLatch+0x20e>
    1702:	14 c0       	rjmp	.+40     	; 0x172c <LCD_ES_tWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	6b a1       	ldd	r22, Y+35	; 0x23
    1706:	7c a1       	ldd	r23, Y+36	; 0x24
    1708:	8d a1       	ldd	r24, Y+37	; 0x25
    170a:	9e a1       	ldd	r25, Y+38	; 0x26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9a a3       	std	Y+34, r25	; 0x22
    1716:	89 a3       	std	Y+33, r24	; 0x21
    1718:	89 a1       	ldd	r24, Y+33	; 0x21
    171a:	9a a1       	ldd	r25, Y+34	; 0x22
    171c:	9e 8f       	std	Y+30, r25	; 0x1e
    171e:	8d 8f       	std	Y+29, r24	; 0x1d
    1720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_ES_tWriteNLatch+0x256>
    1728:	9e 8f       	std	Y+30, r25	; 0x1e
    172a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	DIO_ES_tSetPinValue(D7_GRP, D7_PIN, ((Copy_u8Byte>>3)&1) );
    172c:	8a ad       	ldd	r24, Y+58	; 0x3a
    172e:	86 95       	lsr	r24
    1730:	86 95       	lsr	r24
    1732:	86 95       	lsr	r24
    1734:	98 2f       	mov	r25, r24
    1736:	91 70       	andi	r25, 0x01	; 1
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	67 e0       	ldi	r22, 0x07	; 7
    173c:	49 2f       	mov	r20, r25
    173e:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D6_GRP, D6_PIN, ((Copy_u8Byte>>2)&1) );
    1742:	8a ad       	ldd	r24, Y+58	; 0x3a
    1744:	86 95       	lsr	r24
    1746:	86 95       	lsr	r24
    1748:	98 2f       	mov	r25, r24
    174a:	91 70       	andi	r25, 0x01	; 1
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	66 e0       	ldi	r22, 0x06	; 6
    1750:	49 2f       	mov	r20, r25
    1752:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D5_GRP, D5_PIN, ((Copy_u8Byte>>1)&1) );
    1756:	8a ad       	ldd	r24, Y+58	; 0x3a
    1758:	86 95       	lsr	r24
    175a:	98 2f       	mov	r25, r24
    175c:	91 70       	andi	r25, 0x01	; 1
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	65 e0       	ldi	r22, 0x05	; 5
    1762:	49 2f       	mov	r20, r25
    1764:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(D4_GRP, D4_PIN, ((Copy_u8Byte>>0)&1) );
    1768:	8a ad       	ldd	r24, Y+58	; 0x3a
    176a:	98 2f       	mov	r25, r24
    176c:	91 70       	andi	r25, 0x01	; 1
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	64 e0       	ldi	r22, 0x04	; 4
    1772:	49 2f       	mov	r20, r25
    1774:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>

	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_HIGH );
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	62 e0       	ldi	r22, 0x02	; 2
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e8       	ldi	r26, 0x80	; 128
    1788:	bf e3       	ldi	r27, 0x3F	; 63
    178a:	89 8f       	std	Y+25, r24	; 0x19
    178c:	9a 8f       	std	Y+26, r25	; 0x1a
    178e:	ab 8f       	std	Y+27, r26	; 0x1b
    1790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	69 8d       	ldd	r22, Y+25	; 0x19
    1794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a e7       	ldi	r20, 0x7A	; 122
    17a0:	55 e4       	ldi	r21, 0x45	; 69
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8d 8b       	std	Y+21, r24	; 0x15
    17ac:	9e 8b       	std	Y+22, r25	; 0x16
    17ae:	af 8b       	std	Y+23, r26	; 0x17
    17b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <LCD_ES_tWriteNLatch+0x306>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <LCD_ES_tWriteNLatch+0x384>
	else if (__tmp > 65535)
    17d4:	6d 89       	ldd	r22, Y+21	; 0x15
    17d6:	7e 89       	ldd	r23, Y+22	; 0x16
    17d8:	8f 89       	ldd	r24, Y+23	; 0x17
    17da:	98 8d       	ldd	r25, Y+24	; 0x18
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <LCD_ES_tWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	69 8d       	ldd	r22, Y+25	; 0x19
    17ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_ES_tWriteNLatch+0x366>
    1816:	80 e9       	ldi	r24, 0x90	; 144
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	9a 8b       	std	Y+18, r25	; 0x12
    181c:	89 8b       	std	Y+17, r24	; 0x11
    181e:	89 89       	ldd	r24, Y+17	; 0x11
    1820:	9a 89       	ldd	r25, Y+18	; 0x12
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_ES_tWriteNLatch+0x354>
    1826:	9a 8b       	std	Y+18, r25	; 0x12
    1828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	8b 89       	ldd	r24, Y+19	; 0x13
    182c:	9c 89       	ldd	r25, Y+20	; 0x14
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <LCD_ES_tWriteNLatch+0x348>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <LCD_ES_tWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	98 8b       	std	Y+16, r25	; 0x10
    1858:	8f 87       	std	Y+15, r24	; 0x0f
    185a:	8f 85       	ldd	r24, Y+15	; 0x0f
    185c:	98 89       	ldd	r25, Y+16	; 0x10
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_ES_tWriteNLatch+0x390>
    1862:	98 8b       	std	Y+16, r25	; 0x10
    1864:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ES_tSetPinValue(EN_GRP, EN_PIN, PIN_LOW );
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	62 e0       	ldi	r22, 0x02	; 2
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 ef       	ldi	r26, 0xF0	; 240
    1876:	b1 e4       	ldi	r27, 0x41	; 65
    1878:	8b 87       	std	Y+11, r24	; 0x0b
    187a:	9c 87       	std	Y+12, r25	; 0x0c
    187c:	ad 87       	std	Y+13, r26	; 0x0d
    187e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a e7       	ldi	r20, 0x7A	; 122
    188e:	55 e4       	ldi	r21, 0x45	; 69
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8f 83       	std	Y+7, r24	; 0x07
    189a:	98 87       	std	Y+8, r25	; 0x08
    189c:	a9 87       	std	Y+9, r26	; 0x09
    189e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <LCD_ES_tWriteNLatch+0x3f4>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <LCD_ES_tWriteNLatch+0x472>
	else if (__tmp > 65535)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <LCD_ES_tWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <LCD_ES_tWriteNLatch+0x454>
    1904:	80 e9       	ldi	r24, 0x90	; 144
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_ES_tWriteNLatch+0x442>
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8d 81       	ldd	r24, Y+5	; 0x05
    191a:	9e 81       	ldd	r25, Y+6	; 0x06
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <LCD_ES_tWriteNLatch+0x436>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <LCD_ES_tWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_ES_tWriteNLatch+0x47e>
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	89 83       	std	Y+1, r24	; 0x01

#else
#error "LCD mode configuration is wrong"
#endif

	return LOC_ES_tErrorState;
    1954:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1956:	ea 96       	adiw	r28, 0x3a	; 58
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LCD_ES_tWriteString>:
/***********************************************************************************************************************/
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <LCD_ES_tWriteString+0x6>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <LCD_ES_tWriteString+0x8>
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03

	ES_t LOC_ES_tErrorState = ES_NOK;
    1978:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8Iterator = 0 ;
    197a:	19 82       	std	Y+1, r1	; 0x01
    197c:	13 c0       	rjmp	.+38     	; 0x19a4 <LCD_ES_tWriteString+0x3c>
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
	{
		//LCD_enuWriteData(Copy_u8Data[LOC_u8Iterator]);
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	fc 01       	movw	r30, r24
    1994:	e2 0f       	add	r30, r18
    1996:	f3 1f       	adc	r31, r19
    1998:	80 81       	ld	r24, Z
    199a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
		LOC_u8Iterator++;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_ES_tWriteString(u8* Copy_u8Data)
{

	ES_t LOC_ES_tErrorState = ES_NOK;
	u8 LOC_u8Iterator = 0 ;
	while(Copy_u8Data[LOC_u8Iterator]!='\0')
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	fc 01       	movw	r30, r24
    19b0:	e2 0f       	add	r30, r18
    19b2:	f3 1f       	adc	r31, r19
    19b4:	80 81       	ld	r24, Z
    19b6:	88 23       	and	r24, r24
    19b8:	11 f7       	brne	.-60     	; 0x197e <LCD_ES_tWriteString+0x16>
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
		LCD_ES_tWriteNLatch(Copy_u8Data[LOC_u8Iterator]);
		LOC_u8Iterator++;
	}

	return LOC_ES_tErrorState;
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02

}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <LCD_ES_tSendIntgerNum>:
/***********************************************************************************************************************/
ES_t LCD_ES_tSendIntgerNum(s32 Copy_s32Num)
{
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	62 97       	sbiw	r28, 0x12	; 18
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	6f 87       	std	Y+15, r22	; 0x0f
    19e4:	78 8b       	std	Y+16, r23	; 0x10
    19e6:	89 8b       	std	Y+17, r24	; 0x11
    19e8:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t LOC_ES_tErrorState = ES_NOK;
    19ea:	1c 82       	std	Y+4, r1	; 0x04

	s8 LOC_s8Sign = -1;
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	8b 83       	std	Y+3, r24	; 0x03
	u8 LOC_u8ArrIndex = 0;
    19f0:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOC_u8ArrNmber[10];
	/*Check Sign*/
	if(Copy_s32Num < 0)
    19f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f4:	98 89       	ldd	r25, Y+16	; 0x10
    19f6:	a9 89       	ldd	r26, Y+17	; 0x11
    19f8:	ba 89       	ldd	r27, Y+18	; 0x12
    19fa:	bb 23       	and	r27, r27
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <LCD_ES_tSendIntgerNum+0x36>
    19fe:	4b c0       	rjmp	.+150    	; 0x1a96 <LCD_ES_tSendIntgerNum+0xcc>
	{
		/*display Sign*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch('-');
    1a0a:	8d e2       	ldi	r24, 0x2D	; 45
    1a0c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
		/*make The number Positive*/
		Copy_s32Num *=LOC_s8Sign ;
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	28 2f       	mov	r18, r24
    1a14:	33 27       	eor	r19, r19
    1a16:	27 fd       	sbrc	r18, 7
    1a18:	30 95       	com	r19
    1a1a:	43 2f       	mov	r20, r19
    1a1c:	53 2f       	mov	r21, r19
    1a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a20:	98 89       	ldd	r25, Y+16	; 0x10
    1a22:	a9 89       	ldd	r26, Y+17	; 0x11
    1a24:	ba 89       	ldd	r27, Y+18	; 0x12
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	0e 94 b3 10 	call	0x2166	; 0x2166 <__mulsi3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
    1a34:	98 8b       	std	Y+16, r25	; 0x10
    1a36:	a9 8b       	std	Y+17, r26	; 0x11
    1a38:	ba 8b       	std	Y+18, r27	; 0x12
    1a3a:	52 c0       	rjmp	.+164    	; 0x1ae0 <LCD_ES_tSendIntgerNum+0x116>
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	08 2f       	mov	r16, r24
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	98 89       	ldd	r25, Y+16	; 0x10
    1a46:	a9 89       	ldd	r26, Y+17	; 0x11
    1a48:	ba 89       	ldd	r27, Y+18	; 0x12
    1a4a:	2a e0       	ldi	r18, 0x0A	; 10
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__divmodsi4>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	28 2f       	mov	r18, r24
    1a60:	ce 01       	movw	r24, r28
    1a62:	05 96       	adiw	r24, 0x05	; 5
    1a64:	fc 01       	movw	r30, r24
    1a66:	e0 0f       	add	r30, r16
    1a68:	f1 1f       	adc	r31, r17
    1a6a:	20 83       	st	Z, r18
			Copy_s32Num/=10;
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	98 89       	ldd	r25, Y+16	; 0x10
    1a70:	a9 89       	ldd	r26, Y+17	; 0x11
    1a72:	ba 89       	ldd	r27, Y+18	; 0x12
    1a74:	2a e0       	ldi	r18, 0x0A	; 10
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__divmodsi4>
    1a84:	da 01       	movw	r26, r20
    1a86:	c9 01       	movw	r24, r18
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
    1a8a:	98 8b       	std	Y+16, r25	; 0x10
    1a8c:	a9 8b       	std	Y+17, r26	; 0x11
    1a8e:	ba 8b       	std	Y+18, r27	; 0x12
			LOC_u8ArrIndex++;
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Num *=LOC_s8Sign ;
	}
	else
	{
		/*Parsing the Positive Number*/
		while(Copy_s32Num!=0)
    1a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a98:	98 89       	ldd	r25, Y+16	; 0x10
    1a9a:	a9 89       	ldd	r26, Y+17	; 0x11
    1a9c:	ba 89       	ldd	r27, Y+18	; 0x12
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	59 f6       	brne	.-106    	; 0x1a3c <LCD_ES_tSendIntgerNum+0x72>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	81 50       	subi	r24, 0x01	; 1
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	16 c0       	rjmp	.+44     	; 0x1ada <LCD_ES_tSendIntgerNum+0x110>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	33 27       	eor	r19, r19
    1abe:	27 fd       	sbrc	r18, 7
    1ac0:	30 95       	com	r19
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	05 96       	adiw	r24, 0x05	; 5
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	80 81       	ld	r24, Z
    1ace:	80 5d       	subi	r24, 0xD0	; 208
    1ad0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
		{
			LOC_u8ArrNmber[LOC_u8ArrIndex] = (Copy_s32Num%10);
			Copy_s32Num/=10;
			LOC_u8ArrIndex++;
		}
		for(s8 i = LOC_u8ArrIndex-1 ; i>=0;i--)
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 23       	and	r24, r24
    1ade:	3c f7       	brge	.-50     	; 0x1aae <LCD_ES_tSendIntgerNum+0xe4>
			LCD_ES_tWriteNLatch(LOC_u8ArrNmber[i]+'0');

		}
	}

	return LOC_ES_tErrorState;
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ae2:	62 96       	adiw	r28, 0x12	; 18
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	08 95       	ret

00001af8 <LCD_ES_tCustomAlphChar>:

/************************************************************************************************************************/
/*LCD Create SpecialCharacter 8 Bits*/
ES_t  LCD_ES_tCustomAlphChar(u8 Copy_u8PatternNumber, u8* PCopy_u8Pattern)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <LCD_ES_tCustomAlphChar+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <LCD_ES_tCustomAlphChar+0x8>
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	7d 83       	std	Y+5, r23	; 0x05
    1b0a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1b0c:	1a 82       	std	Y+2, r1	; 0x02
	/*you have only 8 patterns to be customized */

	if(Copy_u8PatternNumber<PATTERN_MAX_NUMBER)
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	88 30       	cpi	r24, 0x08	; 8
    1b12:	70 f5       	brcc	.+92     	; 0x1b70 <LCD_ES_tCustomAlphChar+0x78>
	{
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	08 96       	adiw	r24, 0x08	; 8
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	8a 83       	std	Y+2, r24	; 0x02
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <LCD_ES_tCustomAlphChar+0x6c>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	fc 01       	movw	r30, r24
    1b54:	e2 0f       	add	r30, r18
    1b56:	f3 1f       	adc	r31, r19
    1b58:	80 81       	ld	r24, Z
    1b5a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
		/*Address counter point on CGRAM*/
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
		LCD_ES_tWriteNLatch((CGRAM_OFFSET + (Copy_u8PatternNumber*PATTERN_SIZE)));
		LOC_ES_tErrorState = ES_OK ;
		/*Write your pattern in CGRAM*/
		for(u8 i=0;i<8;i++)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	88 30       	cpi	r24, 0x08	; 8
    1b68:	50 f3       	brcs	.-44     	; 0x1b3e <LCD_ES_tCustomAlphChar+0x46>
		{
			DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_HIGH);
			LCD_ES_tWriteNLatch(PCopy_u8Pattern[i]);
		}
		LOC_ES_tErrorState = ES_OK;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <LCD_ES_tCustomAlphChar+0x7c>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	8a 83       	std	Y+2, r24	; 0x02
	}
	return LOC_ES_tErrorState;
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <LCD_ES_tGoToPosition>:
/********************************************************************************************************************************************************/

/*LCD Go To Position*/

ES_t   LCD_ES_tGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <LCD_ES_tGoToPosition+0x6>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <LCD_ES_tGoToPosition+0x8>
    1b8e:	0f 92       	push	r0
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	8c 83       	std	Y+4, r24	; 0x04
    1b96:	6d 83       	std	Y+5, r22	; 0x05
	ES_t LOC_ES_tErrorState = ES_NOK;
    1b98:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8ArrRow[2] = {0x80,0xC0};
    1b9a:	80 e8       	ldi	r24, 0x80	; 128
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	80 ec       	ldi	r24, 0xC0	; 192
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
	if( (1<=Copy_u8Row && Copy_u8Row<=2 ) &&
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	88 23       	and	r24, r24
    1ba6:	11 f1       	breq	.+68     	; 0x1bec <LCD_ES_tGoToPosition+0x66>
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	f8 f4       	brcc	.+62     	; 0x1bec <LCD_ES_tGoToPosition+0x66>
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	88 23       	and	r24, r24
    1bb2:	e1 f0       	breq	.+56     	; 0x1bec <LCD_ES_tGoToPosition+0x66>
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	81 31       	cpi	r24, 0x11	; 17
    1bb8:	c8 f4       	brcc	.+50     	; 0x1bec <LCD_ES_tGoToPosition+0x66>
			(1<=Copy_u8Col && Copy_u8Col<=16))
	{
		DIO_ES_tSetPinValue(RS_GRP , RS_PIN , PIN_LOW);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
		LCD_ES_tWriteNLatch(LOC_u8ArrRow[Copy_u8Row-1]+ Copy_u8Col-1);
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9c 01       	movw	r18, r24
    1bcc:	21 50       	subi	r18, 0x01	; 1
    1bce:	30 40       	sbci	r19, 0x00	; 0
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	02 96       	adiw	r24, 0x02	; 2
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e2 0f       	add	r30, r18
    1bd8:	f3 1f       	adc	r31, r19
    1bda:	90 81       	ld	r25, Z
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	89 0f       	add	r24, r25
    1be0:	81 50       	subi	r24, 0x01	; 1
    1be2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_ES_tWriteNLatch>
		LOC_ES_tErrorState = ES_OK ;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <LCD_ES_tGoToPosition+0x6a>
	}
	else
	{
		LOC_ES_tErrorState = ES_OUT_OF_RANGE ;
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LED_ES_tInit>:


extern u8 G_u8LEDsNum ;
/*LED Driver Initialization*/
ES_t LED_ES_tInit(LED_t* Copy_PtoArrLED_tConfig)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <LED_ES_tInit+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <LED_ES_tInit+0x8>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9c 83       	std	Y+4, r25	; 0x04
    1c10:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1c12:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtoArrLED_tConfig != NULL)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <LED_ES_tInit+0x1c>
    1c1c:	5e c0       	rjmp	.+188    	; 0x1cda <LED_ES_tInit+0xd8>
	{
		u8 LOC_u8Iter = 0;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	53 c0       	rjmp	.+166    	; 0x1cc8 <LED_ES_tInit+0xc6>
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	c9 01       	movw	r24, r18
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	28 0f       	add	r18, r24
    1c30:	39 1f       	adc	r19, r25
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	fc 01       	movw	r30, r24
    1c38:	e2 0f       	add	r30, r18
    1c3a:	f3 1f       	adc	r31, r19
    1c3c:	40 81       	ld	r20, Z
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	c9 01       	movw	r24, r18
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	28 0f       	add	r18, r24
    1c4c:	39 1f       	adc	r19, r25
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	fc 01       	movw	r30, r24
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	84 2f       	mov	r24, r20
    1c5c:	69 2f       	mov	r22, r25
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	c9 01       	movw	r24, r18
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	28 0f       	add	r18, r24
    1c72:	39 1f       	adc	r19, r25
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	fc 01       	movw	r30, r24
    1c7a:	e2 0f       	add	r30, r18
    1c7c:	f3 1f       	adc	r31, r19
    1c7e:	50 81       	ld	r21, Z
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	c9 01       	movw	r24, r18
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	28 0f       	add	r18, r24
    1c8e:	39 1f       	adc	r19, r25
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	fc 01       	movw	r30, r24
    1c96:	e2 0f       	add	r30, r18
    1c98:	f3 1f       	adc	r31, r19
    1c9a:	41 81       	ldd	r20, Z+1	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	c9 01       	movw	r24, r18
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	28 0f       	add	r18, r24
    1caa:	39 1f       	adc	r19, r25
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	92 81       	ldd	r25, Z+2	; 0x02
    1cb8:	85 2f       	mov	r24, r21
    1cba:	64 2f       	mov	r22, r20
    1cbc:	49 2f       	mov	r20, r25
    1cbe:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtoArrLED_tConfig != NULL)
	{
		u8 LOC_u8Iter = 0;
		for(;LOC_u8Iter < G_u8LEDsNum ;LOC_u8Iter++)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	90 91 80 00 	lds	r25, 0x0080
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	89 17       	cp	r24, r25
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <LED_ES_tInit+0xd2>
    1cd2:	a7 cf       	rjmp	.-178    	; 0x1c22 <LED_ES_tInit+0x20>
			DIO_ES_tSetPinDirection(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,PIN_OUTPUT);
			DIO_ES_tSetPinValue(Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PORT,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_PIN,Copy_PtoArrLED_tConfig[LOC_u8Iter].LED_State);
		}


		 LOC_ES_tErrorState = ES_OK ;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <LED_ES_tInit+0xdc>

	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	8a 83       	std	Y+2, r24	; 0x02
	}


	return LOC_ES_tErrorState ;
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <LED_ES_tSetState>:

/*Set LED State*/

ES_t LED_ES_tSetState(LED_t* Copy_PtoArrLED_tInfo,u8 Copy_u8State)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <LED_ES_tSetState+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <LED_ES_tSetState+0x8>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	9b 83       	std	Y+3, r25	; 0x03
    1cfc:	8a 83       	std	Y+2, r24	; 0x02
    1cfe:	6c 83       	std	Y+4, r22	; 0x04

	ES_t LOC_ES_tErrorState = ES_NOK ;
    1d00:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PtoArrLED_tInfo != NULL)
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <LED_ES_tSetState+0x36>
	{
		DIO_ES_tSetPinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN,Copy_u8State);
    1d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0e:	80 81       	ld	r24, Z
    1d10:	ea 81       	ldd	r30, Y+2	; 0x02
    1d12:	fb 81       	ldd	r31, Y+3	; 0x03
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	69 2f       	mov	r22, r25
    1d18:	4c 81       	ldd	r20, Y+4	; 0x04
    1d1a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
		LOC_ES_tErrorState = ES_OK;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <LED_ES_tSetState+0x3a>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	89 83       	std	Y+1, r24	; 0x01
	}

	return LOC_ES_tErrorState ;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <LED_ES_tToggleState>:

/*Toggle LED State*/
ES_t LED_ES_tToggleState(LED_t* Copy_PtoArrLED_tInfo)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <LED_ES_tToggleState+0x6>
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	9b 83       	std	Y+3, r25	; 0x03
    1d46:	8a 83       	std	Y+2, r24	; 0x02
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1d48:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_PtoArrLED_tInfo != NULL)
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <LED_ES_tToggleState+0x32>
		{
			DIO_ES_tTogglePinValue(Copy_PtoArrLED_tInfo->LED_PORT,Copy_PtoArrLED_tInfo->LED_PIN);
    1d52:	ea 81       	ldd	r30, Y+2	; 0x02
    1d54:	fb 81       	ldd	r31, Y+3	; 0x03
    1d56:	80 81       	ld	r24, Z
    1d58:	ea 81       	ldd	r30, Y+2	; 0x02
    1d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	69 2f       	mov	r22, r25
    1d60:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_ES_tTogglePinValue>
			LOC_ES_tErrorState = ES_OK;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <LED_ES_tToggleState+0x36>
		}
		else
		{
			LOC_ES_tErrorState = ES_NULL_POINTER;
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	89 83       	std	Y+1, r24	; 0x01
		}

		return LOC_ES_tErrorState ;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <SWITCH_ES_tInit>:
extern u8 G_u8SwitchNum ;


/*Switch Driver Initialization*/
ES_t SWITCH_ES_tInit(SWITCH_t* Copy_PtrSWITCH_tConfig )
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <SWITCH_ES_tInit+0x6>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <SWITCH_ES_tInit+0x8>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t LOC_ES_tErrorState = ES_NOK ;
    1d8c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_PtrSWITCH_tConfig !=NULL)
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <SWITCH_ES_tInit+0x1c>
    1d96:	5c c0       	rjmp	.+184    	; 0x1e50 <SWITCH_ES_tInit+0xd4>
	{
		u8 LOC_u8SwitchIter = 0 ;
    1d98:	19 82       	std	Y+1, r1	; 0x01
    1d9a:	53 c0       	rjmp	.+166    	; 0x1e42 <SWITCH_ES_tInit+0xc6>
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
		{
			DIO_ES_tSetPinDirection(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	c9 01       	movw	r24, r18
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	28 0f       	add	r18, r24
    1daa:	39 1f       	adc	r19, r25
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	fc 01       	movw	r30, r24
    1db2:	e2 0f       	add	r30, r18
    1db4:	f3 1f       	adc	r31, r19
    1db6:	40 81       	ld	r20, Z
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	c9 01       	movw	r24, r18
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	28 0f       	add	r18, r24
    1dc6:	39 1f       	adc	r19, r25
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e2 0f       	add	r30, r18
    1dd0:	f3 1f       	adc	r31, r19
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	84 2f       	mov	r24, r20
    1dd6:	69 2f       	mov	r22, r25
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 c9 05 	call	0xb92	; 0xb92 <DIO_ES_tSetPinDirection>
					Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PIN,PIN_INPUT);
			DIO_ES_tSetPinValue(Copy_PtrSWITCH_tConfig[LOC_u8SwitchIter].SWITCH_PORT,
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	c9 01       	movw	r24, r18
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	28 0f       	add	r18, r24
    1dec:	39 1f       	adc	r19, r25
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	50 81       	ld	r21, Z
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	c9 01       	movw	r24, r18
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	28 0f       	add	r18, r24
    1e08:	39 1f       	adc	r19, r25
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	41 81       	ldd	r20, Z+1	; 0x01
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	28 0f       	add	r18, r24
    1e24:	39 1f       	adc	r19, r25
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e2 0f       	add	r30, r18
    1e2e:	f3 1f       	adc	r31, r19
    1e30:	92 81       	ldd	r25, Z+2	; 0x02
    1e32:	85 2f       	mov	r24, r21
    1e34:	64 2f       	mov	r22, r20
    1e36:	49 2f       	mov	r20, r25
    1e38:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_ES_tSetPinValue>
{
	ES_t LOC_ES_tErrorState = ES_NOK ;
	if(Copy_PtrSWITCH_tConfig !=NULL)
	{
		u8 LOC_u8SwitchIter = 0 ;
		for(;LOC_u8SwitchIter<G_u8SwitchNum;LOC_u8SwitchIter++)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	90 91 99 00 	lds	r25, 0x0099
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	89 17       	cp	r24, r25
    1e4a:	08 f4       	brcc	.+2      	; 0x1e4e <SWITCH_ES_tInit+0xd2>
    1e4c:	a7 cf       	rjmp	.-178    	; 0x1d9c <SWITCH_ES_tInit+0x20>
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <SWITCH_ES_tInit+0xd8>
					(Copy_PtrSWITCH_tConfig+LOC_u8SwitchIter)->SWITCH_INTERFACE);
		}
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER;
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	8a 83       	std	Y+2, r24	; 0x02
	}

   return LOC_ES_tErrorState ;
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <SWITCH_ES_tGetSwitchState>:
/*Get Switch State*/
ES_t SWITCH_ES_tGetSwitchState(SWITCH_t* Copy_PtrSWITCH_tInfo,u8* Copy_Pu8SwitchState)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <SWITCH_ES_tGetSwitchState+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <SWITCH_ES_tGetSwitchState+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	7d 83       	std	Y+5, r23	; 0x05
    1e78:	6c 83       	std	Y+4, r22	; 0x04
	ES_t LOC_ES_tErrorState = ES_NOK;
    1e7a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8SwitchState !=NULL &&
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	91 f0       	breq	.+36     	; 0x1ea8 <SWITCH_ES_tGetSwitchState+0x44>
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	9d 81       	ldd	r25, Y+5	; 0x05
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <SWITCH_ES_tGetSwitchState+0x44>
			Copy_Pu8SwitchState !=NULL)
	{
		LOC_ES_tErrorState = DIO_ES_tGetPinValue(Copy_PtrSWITCH_tInfo->SWITCH_PORT,Copy_PtrSWITCH_tInfo->SWITCH_PIN,Copy_Pu8SwitchState);
    1e8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e90:	80 81       	ld	r24, Z
    1e92:	ea 81       	ldd	r30, Y+2	; 0x02
    1e94:	fb 81       	ldd	r31, Y+3	; 0x03
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9c:	69 2f       	mov	r22, r25
    1e9e:	a9 01       	movw	r20, r18
    1ea0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <DIO_ES_tGetPinValue>
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <SWITCH_ES_tGetSwitchState+0x48>
	}
	else
	{
		LOC_ES_tErrorState = ES_NULL_POINTER ;
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	}
	   return LOC_ES_tErrorState ;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <main>:
#include<util/delay.h>

u8 right ;
extern SWITCH_t G_SWITCH_tSwitchArrConfig[SW_NUM] ;
int main(void)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	c2 54       	subi	r28, 0x42	; 66
    1ec8:	d0 40       	sbci	r29, 0x00	; 0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
	/*pattern for Ahmed in Arabic */
	//pattern for Alph character
	u8 pattern0[8]={0x06,0x04,0x0E,0x00,0x04,0x04,0x04,0x00};
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	0f 96       	adiw	r24, 0x0f	; 15
    1ed8:	98 ab       	std	Y+48, r25	; 0x30
    1eda:	8f a7       	std	Y+47, r24	; 0x2f
    1edc:	ee eb       	ldi	r30, 0xBE	; 190
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	fa ab       	std	Y+50, r31	; 0x32
    1ee2:	e9 ab       	std	Y+49, r30	; 0x31
    1ee4:	f8 e0       	ldi	r31, 0x08	; 8
    1ee6:	fb ab       	std	Y+51, r31	; 0x33
    1ee8:	e9 a9       	ldd	r30, Y+49	; 0x31
    1eea:	fa a9       	ldd	r31, Y+50	; 0x32
    1eec:	00 80       	ld	r0, Z
    1eee:	89 a9       	ldd	r24, Y+49	; 0x31
    1ef0:	9a a9       	ldd	r25, Y+50	; 0x32
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	9a ab       	std	Y+50, r25	; 0x32
    1ef6:	89 ab       	std	Y+49, r24	; 0x31
    1ef8:	ef a5       	ldd	r30, Y+47	; 0x2f
    1efa:	f8 a9       	ldd	r31, Y+48	; 0x30
    1efc:	00 82       	st	Z, r0
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
    1f08:	9b a9       	ldd	r25, Y+51	; 0x33
    1f0a:	91 50       	subi	r25, 0x01	; 1
    1f0c:	9b ab       	std	Y+51, r25	; 0x33
    1f0e:	eb a9       	ldd	r30, Y+51	; 0x33
    1f10:	ee 23       	and	r30, r30
    1f12:	51 f7       	brne	.-44     	; 0x1ee8 <main+0x2a>
	// pattern for 7a8
	u8 pattern1[8]={0x00,0x00,0x08,0x14,0x02,0x1F,0x00,0x00};
    1f14:	ce 01       	movw	r24, r28
    1f16:	47 96       	adiw	r24, 0x17	; 23
    1f18:	9d ab       	std	Y+53, r25	; 0x35
    1f1a:	8c ab       	std	Y+52, r24	; 0x34
    1f1c:	e6 eb       	ldi	r30, 0xB6	; 182
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	ff ab       	std	Y+55, r31	; 0x37
    1f22:	ee ab       	std	Y+54, r30	; 0x36
    1f24:	f8 e0       	ldi	r31, 0x08	; 8
    1f26:	f8 af       	std	Y+56, r31	; 0x38
    1f28:	ee a9       	ldd	r30, Y+54	; 0x36
    1f2a:	ff a9       	ldd	r31, Y+55	; 0x37
    1f2c:	00 80       	ld	r0, Z
    1f2e:	8e a9       	ldd	r24, Y+54	; 0x36
    1f30:	9f a9       	ldd	r25, Y+55	; 0x37
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	9f ab       	std	Y+55, r25	; 0x37
    1f36:	8e ab       	std	Y+54, r24	; 0x36
    1f38:	ec a9       	ldd	r30, Y+52	; 0x34
    1f3a:	fd a9       	ldd	r31, Y+53	; 0x35
    1f3c:	00 82       	st	Z, r0
    1f3e:	8c a9       	ldd	r24, Y+52	; 0x34
    1f40:	9d a9       	ldd	r25, Y+53	; 0x35
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	9d ab       	std	Y+53, r25	; 0x35
    1f46:	8c ab       	std	Y+52, r24	; 0x34
    1f48:	98 ad       	ldd	r25, Y+56	; 0x38
    1f4a:	91 50       	subi	r25, 0x01	; 1
    1f4c:	98 af       	std	Y+56, r25	; 0x38
    1f4e:	e8 ad       	ldd	r30, Y+56	; 0x38
    1f50:	ee 23       	and	r30, r30
    1f52:	51 f7       	brne	.-44     	; 0x1f28 <main+0x6a>
	// pattern for mem
	u8 pattern2[8]={0x00,0x00,0x00,0x00,0x02,0x1D,0x02,0x00};
    1f54:	ce 01       	movw	r24, r28
    1f56:	4f 96       	adiw	r24, 0x1f	; 31
    1f58:	9a af       	std	Y+58, r25	; 0x3a
    1f5a:	89 af       	std	Y+57, r24	; 0x39
    1f5c:	ee ea       	ldi	r30, 0xAE	; 174
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	fc af       	std	Y+60, r31	; 0x3c
    1f62:	eb af       	std	Y+59, r30	; 0x3b
    1f64:	f8 e0       	ldi	r31, 0x08	; 8
    1f66:	fd af       	std	Y+61, r31	; 0x3d
    1f68:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f6a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f6c:	00 80       	ld	r0, Z
    1f6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f70:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	9c af       	std	Y+60, r25	; 0x3c
    1f76:	8b af       	std	Y+59, r24	; 0x3b
    1f78:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f7a:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f7c:	00 82       	st	Z, r0
    1f7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	9a af       	std	Y+58, r25	; 0x3a
    1f86:	89 af       	std	Y+57, r24	; 0x39
    1f88:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f8a:	91 50       	subi	r25, 0x01	; 1
    1f8c:	9d af       	std	Y+61, r25	; 0x3d
    1f8e:	ed ad       	ldd	r30, Y+61	; 0x3d
    1f90:	ee 23       	and	r30, r30
    1f92:	51 f7       	brne	.-44     	; 0x1f68 <main+0xaa>
	// pattern for dal
	u8 pattern3[8]={0x00,0x00,0x01,0x01,0x01,0x1F,0x00,0x00};
    1f94:	ce 01       	movw	r24, r28
    1f96:	87 96       	adiw	r24, 0x27	; 39
    1f98:	9f af       	std	Y+63, r25	; 0x3f
    1f9a:	8e af       	std	Y+62, r24	; 0x3e
    1f9c:	e6 ea       	ldi	r30, 0xA6	; 166
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	22 96       	adiw	r28, 0x02	; 2
    1fa2:	ff af       	std	Y+63, r31	; 0x3f
    1fa4:	ee af       	std	Y+62, r30	; 0x3e
    1fa6:	22 97       	sbiw	r28, 0x02	; 2
    1fa8:	f8 e0       	ldi	r31, 0x08	; 8
    1faa:	23 96       	adiw	r28, 0x03	; 3
    1fac:	ff af       	std	Y+63, r31	; 0x3f
    1fae:	23 97       	sbiw	r28, 0x03	; 3
    1fb0:	22 96       	adiw	r28, 0x02	; 2
    1fb2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fb4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fb6:	22 97       	sbiw	r28, 0x02	; 2
    1fb8:	00 80       	ld	r0, Z
    1fba:	22 96       	adiw	r28, 0x02	; 2
    1fbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fc0:	22 97       	sbiw	r28, 0x02	; 2
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	22 96       	adiw	r28, 0x02	; 2
    1fc6:	9f af       	std	Y+63, r25	; 0x3f
    1fc8:	8e af       	std	Y+62, r24	; 0x3e
    1fca:	22 97       	sbiw	r28, 0x02	; 2
    1fcc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fce:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fd0:	00 82       	st	Z, r0
    1fd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	9f af       	std	Y+63, r25	; 0x3f
    1fda:	8e af       	std	Y+62, r24	; 0x3e
    1fdc:	23 96       	adiw	r28, 0x03	; 3
    1fde:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fe0:	23 97       	sbiw	r28, 0x03	; 3
    1fe2:	91 50       	subi	r25, 0x01	; 1
    1fe4:	23 96       	adiw	r28, 0x03	; 3
    1fe6:	9f af       	std	Y+63, r25	; 0x3f
    1fe8:	23 97       	sbiw	r28, 0x03	; 3
    1fea:	23 96       	adiw	r28, 0x03	; 3
    1fec:	ef ad       	ldd	r30, Y+63	; 0x3f
    1fee:	23 97       	sbiw	r28, 0x03	; 3
    1ff0:	ee 23       	and	r30, r30
    1ff2:	f1 f6       	brne	.-68     	; 0x1fb0 <main+0xf2>

	 /*Initialize Switch */
	SWITCH_ES_tInit(G_SWITCH_tSwitchArrConfig);
    1ff4:	8a e9       	ldi	r24, 0x9A	; 154
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <SWITCH_ES_tInit>
	/*initialize LCD Driver according to your Configuration*/
	 /*Initialize LCD*/
	LCD_ES_tInit();
    1ffc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <LCD_ES_tInit>
	LCD_ES_tWriteString("Ahmed Khaled Hammad Ali");
    2000:	80 e6       	ldi	r24, 0x60	; 96
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_ES_tWriteString>
	LCD_ES_tGoToPosition(2,1);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	61 e0       	ldi	r22, 0x01	; 1
    200c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <LCD_ES_tGoToPosition>
   LCD_ES_tSendIntgerNum(5980);
    2010:	6c e5       	ldi	r22, 0x5C	; 92
    2012:	77 e1       	ldi	r23, 0x17	; 23
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_ES_tSendIntgerNum>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	aa e7       	ldi	r26, 0x7A	; 122
    2022:	b4 e4       	ldi	r27, 0x44	; 68
    2024:	8b 87       	std	Y+11, r24	; 0x0b
    2026:	9c 87       	std	Y+12, r25	; 0x0c
    2028:	ad 87       	std	Y+13, r26	; 0x0d
    202a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a e7       	ldi	r20, 0x7A	; 122
    203a:	55 e4       	ldi	r21, 0x45	; 69
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8f 83       	std	Y+7, r24	; 0x07
    2046:	98 87       	std	Y+8, r25	; 0x08
    2048:	a9 87       	std	Y+9, r26	; 0x09
    204a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    204c:	6f 81       	ldd	r22, Y+7	; 0x07
    204e:	78 85       	ldd	r23, Y+8	; 0x08
    2050:	89 85       	ldd	r24, Y+9	; 0x09
    2052:	9a 85       	ldd	r25, Y+10	; 0x0a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <main+0x1b0>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <main+0x22e>
	else if (__tmp > 65535)
    206e:	6f 81       	ldd	r22, Y+7	; 0x07
    2070:	78 85       	ldd	r23, Y+8	; 0x08
    2072:	89 85       	ldd	r24, Y+9	; 0x09
    2074:	9a 85       	ldd	r25, Y+10	; 0x0a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	6b 85       	ldd	r22, Y+11	; 0x0b
    2088:	7c 85       	ldd	r23, Y+12	; 0x0c
    208a:	8d 85       	ldd	r24, Y+13	; 0x0d
    208c:	9e 85       	ldd	r25, Y+14	; 0x0e
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <main+0x210>
    20b0:	80 e9       	ldi	r24, 0x90	; 144
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <main+0x1fe>
    20c0:	9c 83       	std	Y+4, r25	; 0x04
    20c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <main+0x1f2>
    20d6:	14 c0       	rjmp	.+40     	; 0x2100 <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	6f 81       	ldd	r22, Y+7	; 0x07
    20da:	78 85       	ldd	r23, Y+8	; 0x08
    20dc:	89 85       	ldd	r24, Y+9	; 0x09
    20de:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	9a 81       	ldd	r25, Y+2	; 0x02
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <main+0x23a>
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_ES_tWriteCommand(0x01);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_ES_tWriteCommand>
//	LCD_ES_tWriteData(0);

//	LCD_ES_tGoToPosition(1,1);
//
//	/*Initialize patterns*/
    LCD_ES_tCustomAlphChar(0, pattern0);
    2106:	9e 01       	movw	r18, r28
    2108:	21 5f       	subi	r18, 0xF1	; 241
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	b9 01       	movw	r22, r18
    2110:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_ES_tCustomAlphChar>
	LCD_ES_tCustomAlphChar(1, pattern1);
    2114:	9e 01       	movw	r18, r28
    2116:	29 5e       	subi	r18, 0xE9	; 233
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	b9 01       	movw	r22, r18
    211e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_ES_tCustomAlphChar>
	LCD_ES_tCustomAlphChar(2, pattern2);
    2122:	9e 01       	movw	r18, r28
    2124:	21 5e       	subi	r18, 0xE1	; 225
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	b9 01       	movw	r22, r18
    212c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_ES_tCustomAlphChar>
	LCD_ES_tCustomAlphChar(3, pattern3);
    2130:	9e 01       	movw	r18, r28
    2132:	29 5d       	subi	r18, 0xD9	; 217
    2134:	3f 4f       	sbci	r19, 0xFF	; 255
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	b9 01       	movw	r22, r18
    213a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_ES_tCustomAlphChar>

	LCD_ES_tWriteCommand(0x04);
    213e:	84 e0       	ldi	r24, 0x04	; 4
    2140:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_ES_tWriteCommand>
	LCD_ES_tGoToPosition(1,16);
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	60 e1       	ldi	r22, 0x10	; 16
    2148:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <LCD_ES_tGoToPosition>
    LCD_ES_tWriteData(0);
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_ES_tWriteData>
	//LCD_ES_tGoToPosition(1,15);
	LCD_ES_tWriteData(1);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_ES_tWriteData>
	//LCD_ES_tGoToPosition(1,14);
	LCD_ES_tWriteData(2);
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_ES_tWriteData>
	//LCD_ES_tGoToPosition(1,13);
	LCD_ES_tWriteData(3);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	0e 94 39 0a 	call	0x1472	; 0x1472 <LCD_ES_tWriteData>
    2164:	ff cf       	rjmp	.-2      	; 0x2164 <main+0x2a6>

00002166 <__mulsi3>:
    2166:	62 9f       	mul	r22, r18
    2168:	d0 01       	movw	r26, r0
    216a:	73 9f       	mul	r23, r19
    216c:	f0 01       	movw	r30, r0
    216e:	82 9f       	mul	r24, r18
    2170:	e0 0d       	add	r30, r0
    2172:	f1 1d       	adc	r31, r1
    2174:	64 9f       	mul	r22, r20
    2176:	e0 0d       	add	r30, r0
    2178:	f1 1d       	adc	r31, r1
    217a:	92 9f       	mul	r25, r18
    217c:	f0 0d       	add	r31, r0
    217e:	83 9f       	mul	r24, r19
    2180:	f0 0d       	add	r31, r0
    2182:	74 9f       	mul	r23, r20
    2184:	f0 0d       	add	r31, r0
    2186:	65 9f       	mul	r22, r21
    2188:	f0 0d       	add	r31, r0
    218a:	99 27       	eor	r25, r25
    218c:	72 9f       	mul	r23, r18
    218e:	b0 0d       	add	r27, r0
    2190:	e1 1d       	adc	r30, r1
    2192:	f9 1f       	adc	r31, r25
    2194:	63 9f       	mul	r22, r19
    2196:	b0 0d       	add	r27, r0
    2198:	e1 1d       	adc	r30, r1
    219a:	f9 1f       	adc	r31, r25
    219c:	bd 01       	movw	r22, r26
    219e:	cf 01       	movw	r24, r30
    21a0:	11 24       	eor	r1, r1
    21a2:	08 95       	ret

000021a4 <__divmodsi4>:
    21a4:	97 fb       	bst	r25, 7
    21a6:	09 2e       	mov	r0, r25
    21a8:	05 26       	eor	r0, r21
    21aa:	0e d0       	rcall	.+28     	; 0x21c8 <__divmodsi4_neg1>
    21ac:	57 fd       	sbrc	r21, 7
    21ae:	04 d0       	rcall	.+8      	; 0x21b8 <__divmodsi4_neg2>
    21b0:	14 d0       	rcall	.+40     	; 0x21da <__udivmodsi4>
    21b2:	0a d0       	rcall	.+20     	; 0x21c8 <__divmodsi4_neg1>
    21b4:	00 1c       	adc	r0, r0
    21b6:	38 f4       	brcc	.+14     	; 0x21c6 <__divmodsi4_exit>

000021b8 <__divmodsi4_neg2>:
    21b8:	50 95       	com	r21
    21ba:	40 95       	com	r20
    21bc:	30 95       	com	r19
    21be:	21 95       	neg	r18
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	4f 4f       	sbci	r20, 0xFF	; 255
    21c4:	5f 4f       	sbci	r21, 0xFF	; 255

000021c6 <__divmodsi4_exit>:
    21c6:	08 95       	ret

000021c8 <__divmodsi4_neg1>:
    21c8:	f6 f7       	brtc	.-4      	; 0x21c6 <__divmodsi4_exit>
    21ca:	90 95       	com	r25
    21cc:	80 95       	com	r24
    21ce:	70 95       	com	r23
    21d0:	61 95       	neg	r22
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255
    21d4:	8f 4f       	sbci	r24, 0xFF	; 255
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	08 95       	ret

000021da <__udivmodsi4>:
    21da:	a1 e2       	ldi	r26, 0x21	; 33
    21dc:	1a 2e       	mov	r1, r26
    21de:	aa 1b       	sub	r26, r26
    21e0:	bb 1b       	sub	r27, r27
    21e2:	fd 01       	movw	r30, r26
    21e4:	0d c0       	rjmp	.+26     	; 0x2200 <__udivmodsi4_ep>

000021e6 <__udivmodsi4_loop>:
    21e6:	aa 1f       	adc	r26, r26
    21e8:	bb 1f       	adc	r27, r27
    21ea:	ee 1f       	adc	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	a2 17       	cp	r26, r18
    21f0:	b3 07       	cpc	r27, r19
    21f2:	e4 07       	cpc	r30, r20
    21f4:	f5 07       	cpc	r31, r21
    21f6:	20 f0       	brcs	.+8      	; 0x2200 <__udivmodsi4_ep>
    21f8:	a2 1b       	sub	r26, r18
    21fa:	b3 0b       	sbc	r27, r19
    21fc:	e4 0b       	sbc	r30, r20
    21fe:	f5 0b       	sbc	r31, r21

00002200 <__udivmodsi4_ep>:
    2200:	66 1f       	adc	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	88 1f       	adc	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	1a 94       	dec	r1
    220a:	69 f7       	brne	.-38     	; 0x21e6 <__udivmodsi4_loop>
    220c:	60 95       	com	r22
    220e:	70 95       	com	r23
    2210:	80 95       	com	r24
    2212:	90 95       	com	r25
    2214:	9b 01       	movw	r18, r22
    2216:	ac 01       	movw	r20, r24
    2218:	bd 01       	movw	r22, r26
    221a:	cf 01       	movw	r24, r30
    221c:	08 95       	ret

0000221e <__prologue_saves__>:
    221e:	2f 92       	push	r2
    2220:	3f 92       	push	r3
    2222:	4f 92       	push	r4
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	ca 1b       	sub	r28, r26
    2248:	db 0b       	sbc	r29, r27
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	09 94       	ijmp

00002256 <__epilogue_restores__>:
    2256:	2a 88       	ldd	r2, Y+18	; 0x12
    2258:	39 88       	ldd	r3, Y+17	; 0x11
    225a:	48 88       	ldd	r4, Y+16	; 0x10
    225c:	5f 84       	ldd	r5, Y+15	; 0x0f
    225e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2260:	7d 84       	ldd	r7, Y+13	; 0x0d
    2262:	8c 84       	ldd	r8, Y+12	; 0x0c
    2264:	9b 84       	ldd	r9, Y+11	; 0x0b
    2266:	aa 84       	ldd	r10, Y+10	; 0x0a
    2268:	b9 84       	ldd	r11, Y+9	; 0x09
    226a:	c8 84       	ldd	r12, Y+8	; 0x08
    226c:	df 80       	ldd	r13, Y+7	; 0x07
    226e:	ee 80       	ldd	r14, Y+6	; 0x06
    2270:	fd 80       	ldd	r15, Y+5	; 0x05
    2272:	0c 81       	ldd	r16, Y+4	; 0x04
    2274:	1b 81       	ldd	r17, Y+3	; 0x03
    2276:	aa 81       	ldd	r26, Y+2	; 0x02
    2278:	b9 81       	ldd	r27, Y+1	; 0x01
    227a:	ce 0f       	add	r28, r30
    227c:	d1 1d       	adc	r29, r1
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	ed 01       	movw	r28, r26
    228a:	08 95       	ret

0000228c <_exit>:
    228c:	f8 94       	cli

0000228e <__stop_program>:
    228e:	ff cf       	rjmp	.-2      	; 0x228e <__stop_program>
